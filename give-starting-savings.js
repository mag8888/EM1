const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –∫–æ–º–Ω–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const roomSchema = new mongoose.Schema({
    players: [{
        user_id: String,
        name: String
    }],
    game_data: {
        player_balances: [Number],
        transfers_history: [{
            sender: String,
            recipient: String,
            amount: Number,
            timestamp: Date,
            sender_index: Number,
            recipient_index: Number,
            type: String,
            description: String
        }],
        starting_savings_given: Boolean
    }
});

const Room = mongoose.model('Room', roomSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
async function giveStartingSavings(roomId, amount = 3000) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
        
        const room = await Room.findById(roomId);
        if (!room) {
            console.error('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${room.players.length} –∏–≥—Ä–æ–∫–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
        if (room.game_data?.starting_savings_given) {
            console.log('‚ö†Ô∏è –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º game_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!room.game_data) {
            room.game_data = {
                player_balances: new Array(room.players.length).fill(0),
                transfers_history: [],
                starting_savings_given: false
            };
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º player_balances –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!room.game_data.player_balances) {
            room.game_data.player_balances = new Array(room.players.length).fill(0);
        }
        
        console.log('üí∞ –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è...');
        
        // –ù–∞—á–∏—Å–ª—è–µ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        for (let i = 0; i < room.players.length; i++) {
            const player = room.players[i];
            room.game_data.player_balances[i] += amount;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            const transfer = {
                sender: '–ë–∞–Ω–∫',
                recipient: player.name || `–ò–≥—Ä–æ–∫ ${i + 1}`,
                amount: amount,
                timestamp: new Date(),
                sender_index: -1, // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–∞–Ω–∫
                recipient_index: i,
                type: 'deposit',
                description: '–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è'
            };
            
            room.game_data.transfers_history.unshift(transfer);
            
            console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${i + 1} (${player.name}): +$${amount} ‚Üí –ë–∞–ª–∞–Ω—Å: $${room.game_data.player_balances[i]}`);
        }
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã
        room.game_data.starting_savings_given = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await room.save();
        
        console.log('üéâ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º!');
        console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: $${amount * room.players.length}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
async function giveStartingSavingsToAllRooms(amount = 3000) {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç...');
        
        const rooms = await Room.find({
            'game_data.starting_savings_given': { $ne: true }
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç –±–µ–∑ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π`);
        
        for (const room of rooms) {
            console.log(`\nüè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É: ${room._id}`);
            await giveStartingSavings(room._id, amount);
        }
        
        console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–Ω–∞—Ç:', error);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/em1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
            console.log('  node give-starting-savings.js <room_id> [amount]  - –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É');
            console.log('  node give-starting-savings.js --all [amount]     - –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤–æ –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node give-starting-savings.js 68c7d02787cef27b53d01f44 3000');
            console.log('  node give-starting-savings.js --all 5000');
            return;
        }
        
        if (args[0] === '--all') {
            const amount = parseInt(args[1]) || 3000;
            await giveStartingSavingsToAllRooms(amount);
        } else {
            const roomId = args[0];
            const amount = parseInt(args[1]) || 3000;
            await giveStartingSavings(roomId, amount);
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await mongoose.connection.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
