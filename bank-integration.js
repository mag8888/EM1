/**
 * –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–û–î–£–õ–Ø –ë–ê–ù–ö–ê –° –û–°–ù–û–í–ù–´–ú –ü–†–û–ï–ö–¢–û–ú
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞
 * —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞
let bankModule = null;

/**
 * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø –ë–ê–ù–ö–ê
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
 */
async function initBankModule() {
    try {
        console.log('üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞...');
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞
        bankModule = new BankModule();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        await bankModule.init();
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å –±–∞–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞:', error);
    }
}

/**
 * –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
function updateLocalBalance(amount, description = '') {
    if (bankModule) {
        return bankModule.updateLocalBalance(amount, description);
    } else {
        console.warn('Bank module not initialized, using fallback');
        // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        currentBalance += amount;
        window.lastBalanceUpdate = Date.now();
        console.log(`üí∞ Fallback –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${currentBalance} (${description})`);
        return currentBalance;
    }
}

/**
 * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ë–ê–ù–ö–ê
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
async function loadBankData(forceUpdate = false) {
    if (bankModule) {
        await bankModule.loadFromServer(forceUpdate);
    } else {
        console.warn('Bank module not initialized, using fallback');
        // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await loadBankDataFallback(forceUpdate);
    }
}

/**
 * FALLBACK –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –ë–ê–ù–ö–ê
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –º–æ–¥—É–ª—å –±–∞–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 */
async function loadBankDataFallback(forceUpdate = false) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (!forceUpdate && !shouldLoadBankData()) {
            console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å');
            return;
        }
        
        const roomId = getRoomIdFromURL();
        if (!roomId) {
            console.log('Room ID not found, skipping bank data load');
            return;
        }
        
        const user = JSON.parse(localStorage.getItem('user'));
        if (!user) {
            console.log('User not found, skipping bank data load');
            return;
        }
        
        const response = await fetch(`/api/rooms/${roomId}?user_id=${user.id}`);
        if (!response.ok) {
            console.log(`Failed to load room data: HTTP ${response.status}`);
            return;
        }
        
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const playerIndex = data.players.findIndex(p => p.user_id === user.id);
        
        if (playerIndex !== -1) {
            let newBalance = currentBalance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (game_data.player_balances)
            if (data.game_data?.player_balances) {
                newBalance = data.game_data.player_balances[playerIndex] || 0;
                console.log('Balance loaded from game_data.player_balances:', newBalance, 'for player', playerIndex);
            } 
            // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (players[].balance)
            else if (data.players[playerIndex]?.balance !== undefined) {
                newBalance = data.players[playerIndex].balance;
                console.log('Balance loaded from players[].balance:', newBalance, 'for player', playerIndex);
            } else {
                console.log('No balance data found, playerIndex:', playerIndex, 'player data:', data.players[playerIndex]);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            // 1. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
            // 2. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0 (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
            // 3. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
            // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (forceUpdate = true)
            const now = Date.now();
            const timeSinceLastUpdate = now - (window.lastBalanceUpdate || 0);
            
            if (newBalance > currentBalance || currentBalance === 0 || timeSinceLastUpdate > 5000 || forceUpdate) {
                currentBalance = newBalance;
                window.lastBalanceUpdate = now;
                console.log('Balance updated to:', currentBalance, 'timeSinceLastUpdate:', timeSinceLastUpdate + 'ms', 'forceUpdate:', forceUpdate);
            } else {
                console.log('Keeping current balance:', currentBalance, '(new:', newBalance, ')', 'timeSinceLastUpdate:', timeSinceLastUpdate + 'ms', 'forceUpdate:', forceUpdate);
            }
        } else {
            console.log('Player not found in room, user.id:', user.id, 'players:', data.players.map(p => p.user_id));
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if (data.game_data?.transfers_history) {
            transfersHistory = data.game_data.transfers_history;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadFinancialData(roomId, playerIndex);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateBankUI();
        
        console.log('=== BANK DATA LOADED ===');
        console.log('Balance:', currentBalance);
        console.log('Income:', totalIncome);
        console.log('Expenses:', totalExpenses);
        console.log('Cash Flow:', monthlyIncome);
        console.log('Credit:', currentCredit);
        
    } catch (error) {
        console.error('Error loading bank data:', error);
    }
}

/**
 * –ü–†–û–í–ï–†–ö–ê –ù–£–ñ–ù–û–°–¢–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
 * Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
function shouldLoadBankData() {
    const now = Date.now();
    const timeSinceLastUpdate = now - (window.lastBalanceUpdate || 0);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // 2. –ò–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (lastBalanceUpdate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    return timeSinceLastUpdate > 5000 || !window.lastBalanceUpdate;
}

/**
 * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
async function syncBankWithServer() {
    if (bankModule) {
        await bankModule.syncWithServer();
    } else {
        console.warn('Bank module not initialized, using fallback');
        await loadBankData(true);
    }
}

/**
 * –û–¢–ö–†–´–¢–ò–ï –ë–ê–ù–ö–ê
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
async function openBank() {
    console.log('=== OPENING BANK MODAL ===');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadBankData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–∞
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const bankModal = document.getElementById('bankModal');
        if (bankModal) {
            bankModal.style.display = 'flex';
            bankModal.classList.add('show');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            await loadRecipients();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateBankUI();
            
            console.log('=== BANK MODAL OPENED SUCCESSFULLY ===');
        } else {
            throw new Error('Bank modal not found');
        }
        
    } catch (error) {
        console.error('Error opening bank:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–∞');
    } finally {
        hideLoadingIndicator();
    }
}

/**
 * –ó–ê–ö–†–´–¢–ò–ï –ë–ê–ù–ö–ê
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
function closeBankModal() {
    const bankModal = document.getElementById('bankModal');
    if (bankModal) {
        bankModal.classList.remove('show');
        setTimeout(() => {
            bankModal.style.display = 'none';
        }, 300);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.initBankModule = initBankModule;
window.updateLocalBalance = updateLocalBalance;
window.loadBankData = loadBankData;
window.shouldLoadBankData = shouldLoadBankData;
window.syncBankWithServer = syncBankWithServer;
window.openBank = openBank;
window.closeBankModal = closeBankModal;
