/**
 * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º
 * –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤–Ω–∏–∑—É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

class DebugPanel {
    constructor() {
        this.isVisible = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫—Ä—ã—Ç–∞
        this.panel = null;
        this.init();
    }

    init() {
        this.createPanel();
        this.attachEvents();
        this.addToAllPages();
    }

    createPanel() {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        this.createFloatingButton();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        this.panel = document.createElement('div');
        this.panel.id = 'debug-panel';
        this.panel.innerHTML = `
            <div class="debug-panel-content">
                <div class="debug-panel-header">
                    <h3>üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å</h3>
                    <button id="debug-toggle" class="debug-toggle-btn">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å</button>
                </div>
                <div class="debug-panel-body">
                    <div class="debug-section">
                        <h4>üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è</h4>
                        <div class="debug-buttons">
                            <button class="debug-btn" onclick="window.location.href='/auth.html'">
                                üîê –õ–æ–≥–∏–Ω
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/lobby.html'">
                                üè† –õ–æ–±–±–∏
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/room.html'">
                                üö™ –ö–æ–º–Ω–∞—Ç–∞
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/index.html'">
                                üéÆ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞
                            </button>
                        </div>
                    </div>
                    
                    <div class="debug-section">
                        <h4>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                        <div class="debug-buttons">
                            <button class="debug-btn" onclick="window.location.href='/test-all-scenarios.html'">
                                üß™ –í—Å–µ —Ç–µ—Å—Ç—ã
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/test-cells.html'">
                                üéØ –¢–µ—Å—Ç –∫–ª–µ—Ç–æ–∫
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/test-game-integration.html'">
                                üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
                            </button>
                            <button class="debug-btn" onclick="window.location.href='/debug.html'">
                                üêõ –û—Ç–ª–∞–¥–∫–∞
                            </button>
                        </div>
                    </div>
                    
                    <div class="debug-section">
                        <h4>üìä API –¢–µ—Å—Ç—ã</h4>
                        <div class="debug-buttons">
                            <button class="debug-btn" onclick="testAPI('health')">
                                ‚ù§Ô∏è Health
                            </button>
                            <button class="debug-btn" onclick="testAPI('auth')">
                                üîê Auth
                            </button>
                            <button class="debug-btn" onclick="testAPI('rooms')">
                                üè† Rooms
                            </button>
                            <button class="debug-btn" onclick="showDebugInfo()">
                                ‚ÑπÔ∏è –ò–Ω—Ñ–æ
                            </button>
                        </div>
                    </div>
                    
                    <div class="debug-section">
                        <h4>üéÆ –ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h4>
                        <div class="debug-buttons">
                            <button class="debug-btn" onclick="testGameCore()">
                                üéØ GameCore
                            </button>
                            <button class="debug-btn" onclick="testDice()">
                                üé≤ –ö—É–±–∏–∫–∏
                            </button>
                            <button class="debug-btn" onclick="testMovement()">
                                üë§ –î–≤–∏–∂–µ–Ω–∏–µ
                            </button>
                            <button class="debug-btn" onclick="clearStorage()">
                                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
    }

    createFloatingButton() {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É
        this.floatingButton = document.createElement('div');
        this.floatingButton.id = 'debug-floating-btn';
        this.floatingButton.innerHTML = 'üêõ';
        this.floatingButton.title = '–û—Ç–∫—Ä—ã—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å';
    }

    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            /* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ */
            #debug-floating-btn {
                position: fixed;
                bottom: 20px;
                right: 20px;
                width: 50px;
                height: 50px;
                background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 20px;
                cursor: pointer;
                z-index: 10001;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
                transition: all 0.3s ease;
                user-select: none;
            }

            #debug-floating-btn:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
            }

            #debug-floating-btn:active {
                transform: scale(0.95);
            }

            /* –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ */
            #debug-panel:not(.collapsed) ~ #debug-floating-btn {
                display: none;
            }

            #debug-panel {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
                border-top: 2px solid #00e5ff;
                box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.5);
                z-index: 10000;
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                max-height: 60vh;
                overflow-y: auto;
                transition: all 0.3s ease;
            }

            .debug-panel-content {
                padding: 15px;
            }

            .debug-panel-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
                padding-bottom: 10px;
                border-bottom: 1px solid #333;
            }

            .debug-panel-header h3 {
                color: #00e5ff;
                margin: 0;
                font-size: 16px;
                font-weight: 600;
            }

            .debug-toggle-btn {
                background: #ff6b6b;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background 0.2s;
            }

            .debug-toggle-btn:hover {
                background: #ff5252;
            }

            .debug-panel-body {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
            }

            .debug-section h4 {
                color: #ffffff;
                margin: 0 0 10px 0;
                font-size: 14px;
                font-weight: 500;
            }

            .debug-buttons {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
            }

            .debug-btn {
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 12px;
                font-weight: 500;
                transition: all 0.2s;
                white-space: nowrap;
            }

            .debug-btn:hover {
                background: linear-gradient(135deg, #43A047 0%, #388E3C 100%);
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }

            .debug-btn:active {
                transform: translateY(0);
            }

            /* –°–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
            #debug-panel.collapsed .debug-panel-body {
                display: none;
            }

            #debug-panel.collapsed {
                max-height: 50px;
            }

            #debug-panel.collapsed .debug-toggle-btn {
                content: "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å";
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .debug-panel-body {
                    grid-template-columns: 1fr;
                }
                
                .debug-buttons {
                    justify-content: center;
                }
                
                .debug-btn {
                    flex: 1;
                    min-width: 120px;
                }
            }
        `;
        document.head.appendChild(style);
    }

    attachEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.id === 'debug-toggle') {
                this.toggle();
            }
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
            if (e.target.id === 'debug-floating-btn') {
                this.toggle();
            }
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        window.testAPI = this.testAPI.bind(this);
        window.showDebugInfo = this.showDebugInfo.bind(this);
        window.testGameCore = this.testGameCore.bind(this);
        window.testDice = this.testDice.bind(this);
        window.testMovement = this.testMovement.bind(this);
        window.clearStorage = this.clearStorage.bind(this);
    }

    addToAllPages() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É
        document.body.appendChild(this.floatingButton);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.appendChild(this.panel);
        // –°—Ä–∞–∑—É —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        this.panel.classList.add('collapsed');
    }

    toggle() {
        this.isVisible = !this.isVisible;
        this.panel.classList.toggle('collapsed', !this.isVisible);
        
        const toggleBtn = document.getElementById('debug-toggle');
        if (toggleBtn) {
            toggleBtn.textContent = this.isVisible ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
        }
    }

    // API —Ç–µ—Å—Ç—ã
    async testAPI(type) {
        const baseUrl = window.location.origin;
        let url, method = 'GET', body = null;

        switch (type) {
            case 'health':
                url = `${baseUrl}/api/health`;
                break;
            case 'auth':
                url = `${baseUrl}/api/auth/login`;
                method = 'POST';
                body = JSON.stringify({
                    email: 'test@example.com',
                    password: 'test123'
                });
                break;
            case 'rooms':
                url = `${baseUrl}/api/rooms`;
                break;
        }

        try {
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body
            });
            
            const data = await response.json();
            console.log(`‚úÖ ${type.toUpperCase()} API:`, data);
            alert(`‚úÖ ${type.toUpperCase()} API: ${response.status} - ${JSON.stringify(data).substring(0, 100)}...`);
        } catch (error) {
            console.error(`‚ùå ${type.toUpperCase()} API Error:`, error);
            alert(`‚ùå ${type.toUpperCase()} API Error: ${error.message}`);
        }
    }

    showDebugInfo() {
        const info = {
            url: window.location.href,
            userAgent: navigator.userAgent,
            localStorage: Object.keys(localStorage),
            sessionStorage: Object.keys(sessionStorage),
            gameCore: window.gameCore ? 'Available' : 'Not available',
            timestamp: new Date().toISOString()
        };
        
        console.log('üêõ Debug Info:', info);
        alert(`üêõ Debug Info:\nURL: ${info.url}\nGameCore: ${info.gameCore}\nStorage: ${info.localStorage.length} items`);
    }

    testGameCore() {
        if (window.gameCore) {
            console.log('‚úÖ GameCore available:', window.gameCore);
            alert('‚úÖ GameCore –¥–æ—Å—Ç—É–ø–µ–Ω!');
        } else {
            console.log('‚ùå GameCore not available');
            alert('‚ùå GameCore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    testDice() {
        if (window.gameCore) {
            const diceModule = window.gameCore.getModule('diceModule');
            if (diceModule) {
                diceModule.roll().then(result => {
                    console.log('üé≤ Dice result:', result);
                    alert(`üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: ${result.total}`);
                });
            } else {
                alert('‚ùå DiceModule –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } else {
            alert('‚ùå GameCore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    testMovement() {
        if (window.gameCore) {
            const movementModule = window.gameCore.getModule('movementModule');
            if (movementModule) {
                const result = movementModule.move(0, 5, 44);
                console.log('üë§ Movement result:', result);
                alert(`üë§ –î–≤–∏–∂–µ–Ω–∏–µ: 0 + 5 = ${result}`);
            } else {
                alert('‚ùå MovementModule –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } else {
            alert('‚ùå GameCore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    clearStorage() {
        if (confirm('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞?')) {
            localStorage.clear();
            sessionStorage.clear();
            console.log('üóëÔ∏è Storage cleared');
            alert('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');
        }
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    if (!window.debugPanelInstance) {
        window.debugPanelInstance = new DebugPanel();
    }
});
