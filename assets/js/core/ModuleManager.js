/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–æ–¥—É–ª–µ–π
 */

export class ModuleManager {
    constructor() {
        this.modules = new Map();
        this.dependencies = new Map();
        this.initialized = new Set();
        this.isDestroyed = false;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     * @param {Object} module - –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
     * @param {Array} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
     */
    register(name, module, dependencies = []) {
        if (this.isDestroyed) {
            console.warn('ModuleManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return false;
        }

        if (this.modules.has(name)) {
            console.warn(`–ú–æ–¥—É–ª—å ${name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const missingDependencies = dependencies.filter(dep => !this.modules.has(dep));
        if (missingDependencies.length > 0) {
            console.error(`–ú–æ–¥—É–ª—å ${name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDependencies.join(', ')}`);
            return false;
        }

        this.modules.set(name, module);
        this.dependencies.set(name, dependencies);
        
        console.log(`‚úÖ –ú–æ–¥—É–ª—å ${name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ –∏–º–µ–Ω–∏
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    get(name) {
        return this.modules.get(name);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    has(name) {
        return this.modules.has(name);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    getAll() {
        return Array.from(this.modules.entries());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    getModuleNames() {
        return Array.from(this.modules.keys());
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    async initModule(name) {
        if (this.initialized.has(name)) {
            console.log(`–ú–æ–¥—É–ª—å ${name} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            return true;
        }

        const module = this.modules.get(name);
        if (!module) {
            console.error(`–ú–æ–¥—É–ª—å ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            const dependencies = this.dependencies.get(name) || [];
            for (const depName of dependencies) {
                await this.initModule(depName);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
            if (typeof module.init === 'function') {
                console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è: ${name}`);
                await module.init();
            }

            this.initialized.add(name);
            console.log(`‚úÖ –ú–æ–¥—É–ª—å ${name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${name}:`, error);
            return false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     * @param {Array} order - –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async initAll(order = null) {
        const moduleNames = order || this.getModuleNames();
        const results = [];

        for (const name of moduleNames) {
            const result = await this.initModule(name);
            results.push({ name, success: result });
        }

        return results;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    async destroyModule(name) {
        const module = this.modules.get(name);
        if (!module) {
            return false;
        }

        try {
            // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
            if (typeof module.destroy === 'function') {
                console.log(`üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ${name}`);
                await module.destroy();
            }

            this.initialized.delete(name);
            console.log(`‚úÖ –ú–æ–¥—É–ª—å ${name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω`);
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –º–æ–¥—É–ª—è ${name}:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    getDependencies(name) {
        return this.dependencies.get(name) || [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    getDependents(name) {
        const dependents = [];
        
        for (const [moduleName, dependencies] of this.dependencies.entries()) {
            if (dependencies.includes(name)) {
                dependents.push(moduleName);
            }
        }
        
        return dependents;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –º–æ–¥—É–ª–µ–π
     */
    getTopologicalOrder() {
        const visited = new Set();
        const temp = new Set();
        const order = [];

        const visit = (name) => {
            if (temp.has(name)) {
                throw new Error(`–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ${name}`);
            }
            
            if (visited.has(name)) {
                return;
            }

            temp.add(name);
            
            const dependencies = this.getDependencies(name);
            for (const dep of dependencies) {
                visit(dep);
            }
            
            temp.delete(name);
            visited.add(name);
            order.push(name);
        };

        for (const name of this.getModuleNames()) {
            if (!visited.has(name)) {
                visit(name);
            }
        }

        return order;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    checkCircularDependencies() {
        try {
            this.getTopologicalOrder();
            return false; // –ù–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        } catch (error) {
            console.error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', error.message);
            return true; // –ï—Å—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª–µ–π
     */
    getStats() {
        return {
            totalModules: this.modules.size,
            initializedModules: this.initialized.size,
            uninitializedModules: this.modules.size - this.initialized.size,
            hasCircularDependencies: this.checkCircularDependencies(),
            modules: Array.from(this.modules.keys()).map(name => ({
                name,
                initialized: this.initialized.has(name),
                dependencies: this.getDependencies(name),
                dependents: this.getDependents(name)
            }))
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    getModuleInfo(name) {
        const module = this.modules.get(name);
        if (!module) {
            return null;
        }

        return {
            name,
            module,
            dependencies: this.getDependencies(name),
            dependents: this.getDependents(name),
            initialized: this.initialized.has(name),
            hasInit: typeof module.init === 'function',
            hasDestroy: typeof module.destroy === 'function'
        };
    }

    /**
     * –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {string} name - –ò–º—è –º–æ–¥—É–ª—è
     */
    async reinitModule(name) {
        await this.destroyModule(name);
        return await this.initModule(name);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async destroyAll() {
        const results = [];
        const moduleNames = this.getModuleNames();

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const reverseOrder = this.getTopologicalOrder().reverse();

        for (const name of reverseOrder) {
            const result = await this.destroyModule(name);
            results.push({ name, success: result });
        }

        return results;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ ModuleManager
     */
    async destroy() {
        await this.destroyAll();
        
        this.modules.clear();
        this.dependencies.clear();
        this.initialized.clear();
        this.isDestroyed = true;
        
        console.log('üóëÔ∏è ModuleManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default ModuleManager;
