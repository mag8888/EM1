/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export class StateManager {
    constructor() {
        this.state = {};
        this.subscribers = new Map();
        this.history = [];
        this.maxHistorySize = 100;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StateManager
     */
    async init() {
        console.log('üóÇÔ∏è StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
        await this.loadFromStorage();
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Object} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {boolean} saveToHistory - –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    setState(newState, saveToHistory = true) {
        if (this.isDestroyed) {
            console.warn('StateManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }

        const oldState = { ...this.state };
        
        // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        this.state = { ...this.state, ...newState };
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (saveToHistory) {
            this.saveToHistory(oldState, newState);
        }
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        this.notifySubscribers(newState, oldState);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        this.saveToStorage();
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if (this.config?.debug) {
            console.log('üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', newState);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {string} key - –ö–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    getState(key) {
        if (key) {
            return this.state[key];
        }
        return { ...this.state };
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {string} key - –ö–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    subscribe(key, callback, options = {}) {
        if (this.isDestroyed) {
            console.warn('StateManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }

        if (!this.subscribers.has(key)) {
            this.subscribers.set(key, []);
        }

        const subscription = {
            callback,
            once: options.once || false,
            priority: options.priority || 0,
            context: options.context || null,
            id: this.generateSubscriptionId()
        };

        this.subscribers.get(key).push(subscription);
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        this.subscribers.get(key).sort((a, b) => a.priority - b.priority);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {string} key - –ö–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     */
    unsubscribe(key, callback) {
        if (!this.subscribers.has(key)) {
            return;
        }

        const subscriptions = this.subscribers.get(key);
        const index = subscriptions.findIndex(sub => sub.callback === callback);
        
        if (index > -1) {
            subscriptions.splice(index, 1);
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if (subscriptions.length === 0) {
            this.subscribers.delete(key);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     * @param {Object} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Object} oldState - –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    notifySubscribers(newState, oldState) {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
        Object.keys(newState).forEach(key => {
            if (this.subscribers.has(key)) {
                const subscriptions = [...this.subscribers.get(key)];
                
                subscriptions.forEach(subscription => {
                    try {
                        if (subscription.once) {
                            this.unsubscribe(key, subscription.callback);
                        }

                        const changeData = {
                            key,
                            newValue: newState[key],
                            oldValue: oldState[key],
                            timestamp: Date.now()
                        };

                        if (subscription.context) {
                            subscription.callback.call(subscription.context, changeData);
                        } else {
                            subscription.callback(changeData);
                        }

                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${key}:`, error);
                    }
                });
            }
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if (this.subscribers.has('*')) {
            const globalSubscriptions = [...this.subscribers.get('*')];
            
            globalSubscriptions.forEach(subscription => {
                try {
                    if (subscription.once) {
                        this.unsubscribe('*', subscription.callback);
                    }

                    const changeData = {
                        newState: { ...this.state },
                        oldState,
                        timestamp: Date.now()
                    };

                    if (subscription.context) {
                        subscription.callback.call(subscription.context, changeData);
                    } else {
                        subscription.callback(changeData);
                    }

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
                }
            });
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {Object} oldState - –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Object} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    saveToHistory(oldState, newState) {
        const historyEntry = {
            timestamp: Date.now(),
            oldState,
            newState,
            changes: this.getChanges(oldState, newState)
        };

        this.history.push(historyEntry);

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.maxHistorySize) {
            this.history.shift();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
     * @param {Object} oldState - –°—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @param {Object} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getChanges(oldState, newState) {
        const changes = {};

        Object.keys(newState).forEach(key => {
            if (oldState[key] !== newState[key]) {
                changes[key] = {
                    from: oldState[key],
                    to: newState[key]
                };
            }
        });

        return changes;
    }

    /**
     * –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥
     */
    undo(steps = 1) {
        if (this.history.length < steps) {
            console.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
            return false;
        }

        const historyEntry = this.history[this.history.length - steps];
        this.setState(historyEntry.oldState, false);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        this.history.splice(-steps, steps);
        
        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getHistory(limit = 10) {
        return this.history.slice(-limit);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        this.history = [];
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
     */
    saveToStorage() {
        try {
            const stateToSave = {
                state: this.state,
                timestamp: Date.now()
            };
            
            localStorage.setItem('gameState', JSON.stringify(stateToSave));
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
     */
    async loadFromStorage() {
        try {
            const savedState = localStorage.getItem('gameState');
            if (savedState) {
                const parsed = JSON.parse(savedState);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                const isRecent = Date.now() - parsed.timestamp < 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
                
                if (isRecent) {
                    this.state = { ...this.state, ...parsed.state };
                    console.log('üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage');
                } else {
                    console.log('‚è∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Array} keysToKeep - –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
     */
    clearState(keysToKeep = []) {
        const newState = {};
        
        keysToKeep.forEach(key => {
            if (this.state.hasOwnProperty(key)) {
                newState[key] = this.state[key];
            }
        });
        
        this.state = newState;
        this.saveToStorage();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
     */
    generateSubscriptionId() {
        return `state_sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     */
    setConfig(config) {
        this.config = { ...this.config, ...config };
        this.maxHistorySize = config.maxHistorySize || this.maxHistorySize;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getStats() {
        return {
            stateKeys: Object.keys(this.state).length,
            subscribers: Array.from(this.subscribers.keys()).length,
            historySize: this.history.length,
            lastUpdate: this.history.length > 0 ? this.history[this.history.length - 1].timestamp : null
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ StateManager
     */
    destroy() {
        this.state = {};
        this.subscribers.clear();
        this.history = [];
        this.isDestroyed = true;
        console.log('üóëÔ∏è StateManager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default StateManager;
