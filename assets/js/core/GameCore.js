/**
 * GameCore - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
class GameCore {
    constructor() {
        this.modules = new ModuleManager();
        this.state = new StateManager();
        this.eventBus = new EventBus();
        this.isInitialized = false;
        this.isRunning = false;
        this.config = this.getDefaultConfig();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultConfig() {
        return {
            game: {
                maxPlayers: 8,
                minPlayers: 2,
                startingBalance: 10000,
                turnTime: 30,
                boardSize: 44
            },
            ui: {
                theme: 'dark',
                animations: true,
                sound: true
            },
            api: {
                baseUrl: window.location.origin,
                timeout: 10000
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞
     */
    async init(config = {}) {
        try {
            console.log('üéÆ Initializing GameCore...');
            
            // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            this.config = this.mergeConfig(this.config, config);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await this.initBaseComponents();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.registerModules();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.setupEvents();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.modules.initAll();
            
            this.isInitialized = true;
            console.log('‚úÖ GameCore initialized');
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.eventBus.emit('gameCoreReady', this);
            
        } catch (error) {
            console.error('‚ùå Failed to initialize GameCore:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initBaseComponents() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.setState('gameCore', this);
        this.state.setState('isInitialized', false);
        this.state.setState('isRunning', false);
        this.state.setState('currentPlayer', null);
        this.state.setState('gameState', 'waiting');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
     */
    async registerModules() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.modules.register('apiClient', window.ApiClient, {
            dependencies: [],
            priority: 100
        });

        this.modules.register('board', window.Board, {
            dependencies: ['apiClient'],
            priority: 90
        });

        this.modules.register('dice', window.Dice, {
            dependencies: ['apiClient'],
            priority: 90
        });

        this.modules.register('player', window.Player, {
            dependencies: ['apiClient'],
            priority: 90
        });

        this.modules.register('gameState', window.GameState, {
            dependencies: ['board', 'dice', 'player'],
            priority: 80
        });

        this.modules.register('lobby', window.Lobby, {
            dependencies: ['apiClient'],
            priority: 70
        });

        this.modules.register('room', window.Room, {
            dependencies: ['apiClient'],
            priority: 70
        });

        this.modules.register('auth', window.Auth, {
            dependencies: ['apiClient'],
            priority: 70
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –º–æ–¥—É–ª–µ–π
        this.eventBus.on('moduleReady', (moduleName) => {
            console.log(`üì¶ Module ${moduleName} is ready`);
        });

        this.eventBus.on('moduleError', (moduleName, error) => {
            console.error(`‚ùå Module ${moduleName} error:`, error);
        });

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.subscribe('gameState', (newState, oldState) => {
            console.log(`üéÆ Game state changed: ${oldState} ‚Üí ${newState}`);
            this.eventBus.emit('gameStateChanged', newState, oldState);
        });

        this.state.subscribe('currentPlayer', (newPlayer, oldPlayer) => {
            console.log(`üë§ Current player changed:`, newPlayer);
            this.eventBus.emit('currentPlayerChanged', newPlayer, oldPlayer);
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    async startGame(gameConfig = {}) {
        if (!this.isInitialized) {
            throw new Error('GameCore not initialized');
        }

        try {
            console.log('üöÄ Starting game...');
            
            this.state.setState('isRunning', true);
            this.state.setState('gameState', 'playing');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const gameState = this.modules.get('gameState');
            if (gameState && typeof gameState.start === 'function') {
                await gameState.start(gameConfig);
            }

            this.eventBus.emit('gameStarted', gameConfig);
            console.log('‚úÖ Game started');
            
        } catch (error) {
            console.error('‚ùå Failed to start game:', error);
            throw error;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
     */
    async stopGame() {
        try {
            console.log('üõë Stopping game...');
            
            this.state.setState('isRunning', false);
            this.state.setState('gameState', 'stopped');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const gameState = this.modules.get('gameState');
            if (gameState && typeof gameState.stop === 'function') {
                await gameState.stop();
            }

            this.eventBus.emit('gameStopped');
            console.log('‚úÖ Game stopped');
            
        } catch (error) {
            console.error('‚ùå Failed to stop game:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    getModule(name) {
        return this.modules.get(name);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState(key, defaultValue = null) {
        return this.state.getState(key, defaultValue);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setState(key, value, options = {}) {
        return this.state.setState(key, value, options);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, callback, options = {}) {
        return this.eventBus.on(event, callback, options);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    off(event, listenerId) {
        return this.eventBus.off(event, listenerId);
    }

    /**
     * –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏–π
     */
    emit(event, ...args) {
        return this.eventBus.emit(event, ...args);
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
     */
    mergeConfig(defaultConfig, userConfig) {
        const result = { ...defaultConfig };
        
        for (const key in userConfig) {
            if (userConfig[key] && typeof userConfig[key] === 'object' && !Array.isArray(userConfig[key])) {
                result[key] = this.mergeConfig(result[key] || {}, userConfig[key]);
            } else {
                result[key] = userConfig[key];
            }
        }
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return this.config;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateConfig(newConfig) {
        this.config = this.mergeConfig(this.config, newConfig);
        this.eventBus.emit('configUpdated', this.config);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞
     */
    async destroy() {
        try {
            console.log('üóëÔ∏è Destroying GameCore...');
            
            await this.stopGame();
            await this.modules.clear();
            this.state.reset();
            this.eventBus.removeAllListeners();
            
            this.isInitialized = false;
            this.isRunning = false;
            
            console.log('‚úÖ GameCore destroyed');
            
        } catch (error) {
            console.error('‚ùå Failed to destroy GameCore:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.GameCore = GameCore;