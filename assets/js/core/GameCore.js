/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
 */

// –ò–º–ø–æ—Ä—Ç—ã —É–±—Ä–∞–Ω—ã - —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç

export class GameCore {
    constructor() {
        this.config = GAME_CONFIG;
        this.modules = new ModuleManager();
        this.state = new StateManager();
        this.eventBus = new EventBus();
        this.isInitialized = false;
        this.isRunning = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞
     */
    async init(config = {}) {
        try {
            console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GameCore...');
            
            // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            this.config = { ...this.config, ...config };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await this.initBaseComponents();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.registerModules();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.setupEvents();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.initModules();
            
            this.isInitialized = true;
            console.log('‚úÖ GameCore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.eventBus.emit('gameCoreReady', this);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameCore:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initBaseComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StateManager
        await this.state.init();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventBus
        this.eventBus.init();
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
     */
    async registerModules() {
        try {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
            const { PlayerManager } = await import('./PlayerManager.js');
            const { DiceModule } = await import('../modules/DiceModule.js');

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            this.modules.register('playerManager', new PlayerManager(this));
            this.modules.register('diceModule', new DiceModule(this));
            
            console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
            try {
                const { CardModule } = await import('../modules/CardModule.js');
                this.modules.register('cardModule', new CardModule(this));
                console.log('‚úÖ CardModule –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è CardModule –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }
            
            try {
                const { MovementModule } = await import('../modules/MovementModule.js');
                this.modules.register('movementModule', new MovementModule(this));
                console.log('‚úÖ MovementModule –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è MovementModule –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }
            
            try {
                const { EventModule } = await import('../modules/EventModule.js');
                this.modules.register('eventModule', new EventModule(this));
                console.log('‚úÖ EventModule –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è EventModule –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }
            
            try {
                const { BankModule } = await import('../modules/BankModule.js');
                this.modules.register('bankModule', new BankModule(this));
                console.log('‚úÖ BankModule –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è BankModule –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            try {
                const { CellGenerator } = await import('../modules/game/CellGenerator.js');
                this.modules.register('cellGenerator', new CellGenerator(this));
                console.log('‚úÖ CellGenerator –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è CellGenerator –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }

            try {
                const { TurnController } = await import('../modules/game/TurnController.js');
                this.modules.register('turnController', new TurnController(this));
                console.log('‚úÖ TurnController –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è TurnController –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }

            try {
                const { GameFlowController } = await import('../modules/game/GameFlowController.js');
                this.modules.register('gameFlowController', new GameFlowController(this));
                console.log('‚úÖ GameFlowController –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è GameFlowController –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        // –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        this.eventBus.on('gameStarted', this.onGameStarted.bind(this));
        this.eventBus.on('gameEnded', this.onGameEnded.bind(this));
        this.eventBus.on('playerTurnStarted', this.onPlayerTurnStarted.bind(this));
        this.eventBus.on('playerTurnEnded', this.onPlayerTurnEnded.bind(this));
        
        // –°–æ–±—ã—Ç–∏—è –æ—à–∏–±–æ–∫
        this.eventBus.on('error', this.onError.bind(this));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initModules() {
        const moduleNames = this.modules.getModuleNames();
        let initializedCount = 0;
        
        for (const moduleName of moduleNames) {
            const module = this.modules.get(moduleName);
            if (module && typeof module.init === 'function') {
                try {
                    console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è: ${moduleName}`);
                    await module.init();
                    console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                    initializedCount++;
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${moduleName}:`, error);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
                }
            }
        }
        
        console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${initializedCount} –∏–∑ ${moduleNames.length} –º–æ–¥—É–ª–µ–π`);
        
        if (initializedCount === 0) {
            throw new Error('–ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    async start() {
        if (!this.isInitialized) {
            throw new Error('GameCore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        if (this.isRunning) {
            console.warn('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }

        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
            
            this.isRunning = true;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await this.initGameState();
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            this.eventBus.emit('gameStarted', {
                config: this.config,
                timestamp: Date.now()
            });
            
            console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            this.isRunning = false;
            throw error;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
     */
    stop() {
        if (!this.isRunning) {
            return;
        }

        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã...');
        
        this.isRunning = false;
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.eventBus.emit('gameEnded', {
            timestamp: Date.now()
        });
        
        console.log('‚úÖ –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async initGameState() {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
        const roomId = this.getRoomId();
        const userId = this.getUserId();
        
        if (!roomId || !userId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        await this.loadGameData(roomId, userId);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
        await this.initPlayers();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        await this.initGameBoard();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤
        await this.initTurnSystem();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    async initGameBoard() {
        const cellGenerator = this.modules.get('cellGenerator');
        if (cellGenerator) {
            const cells = cellGenerator.generateGameBoard();
            console.log(`üéØ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å ${cells.length} –∫–ª–µ—Ç–∫–∞–º–∏`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–µ—Ç–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            this.state.setState({ gameBoard: { cells } });
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤
     */
    async initTurnSystem() {
        const turnController = this.modules.get('turnController');
        const playerManager = this.modules.get('playerManager');
        
        if (turnController && playerManager) {
            const players = playerManager.getPlayers();
            const turnOrder = turnController.initializeTurns(players);
            console.log(`üéÆ –°–∏—Å—Ç–µ–º–∞ —Ö–æ–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            this.state.setState({ turnSystem: { order: turnOrder } });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadGameData(roomId, userId) {
        try {
            const response = await fetch(`${this.config.api.baseUrl}/api/rooms/${roomId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'User-Id': userId
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const gameData = await response.json();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state.setState({
                roomId,
                userId,
                gameData
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
     */
    async initPlayers() {
        const playerManager = this.modules.get('playerManager');
        const gameData = this.state.getState('gameData');
        
        if (gameData && gameData.players) {
            for (const playerData of gameData.players) {
                await playerManager.addPlayer(playerData);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã
     */
    getRoomId() {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        let roomId = urlParams.get('room');
        
        if (!roomId) {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—É—Ç–∏
            const pathMatch = window.location.pathname.match(/\/room\/([0-9a-fA-F]{24})/);
            if (pathMatch) {
                roomId = pathMatch[1];
            }
        }
        
        if (!roomId) {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            roomId = localStorage.getItem('currentRoomId');
        }
        
        return roomId;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserId() {
        try {
            const userData = localStorage.getItem('user');
            if (userData) {
                const user = JSON.parse(userData);
                return user.id || user.userId;
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        
        return localStorage.getItem('userId') || localStorage.getItem('user_id');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ –∏–º–µ–Ω–∏
     */
    getModule(moduleName) {
        return this.modules.get(moduleName);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState(key) {
        return this.state.getState(key);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setState(newState) {
        this.state.setState(newState);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onGameStarted(data) {
        console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
    }

    onGameEnded(data) {
        console.log('üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞:', data);
    }

    onPlayerTurnStarted(player) {
        console.log(`üéØ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${player.name}`);
    }

    onPlayerTurnEnded(player) {
        console.log(`‚úÖ –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${player.name} –∑–∞–≤–µ—Ä—à–µ–Ω`);
    }

    onError(error) {
        console.error('üö® –û—à–∏–±–∫–∞ –≤ GameCore:', error);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–¥–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    async executeTurn(playerId) {
        if (!this.isRunning) {
            throw new Error('–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
        }

        const gameFlowController = this.modules.get('gameFlowController');
        if (!gameFlowController) {
            throw new Error('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return await gameFlowController.executeTurn(playerId);
    }

    /**
     * –ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    startPlayerTurn(playerId) {
        const turnController = this.modules.get('turnController');
        if (!turnController) {
            throw new Error('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return turnController.startTurn(playerId);
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} turnResult - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
     */
    endPlayerTurn(playerId, turnResult = {}) {
        const turnController = this.modules.get('turnController');
        if (!turnController) {
            throw new Error('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return turnController.endTurn(playerId, turnResult);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        const turnController = this.modules.get('turnController');
        if (!turnController) {
            return null;
        }

        return turnController.getCurrentPlayer();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
     */
    getGameBoardInfo() {
        const cellGenerator = this.modules.get('cellGenerator');
        if (!cellGenerator) {
            return null;
        }

        return cellGenerator.getBoardInfo();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
     */
    getGameStats() {
        const stats = {
            gameState: {
                isRunning: this.isRunning,
                isInitialized: this.isInitialized,
                currentPlayer: this.getCurrentPlayer()
            }
        };

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–æ–¥–æ–≤
        const turnController = this.modules.get('turnController');
        if (turnController) {
            stats.turns = turnController.getTurnsStats();
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        const gameFlowController = this.modules.get('gameFlowController');
        if (gameFlowController) {
            stats.gameFlow = gameFlowController.getGameFlowStats();
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—è
        const cellGenerator = this.modules.get('cellGenerator');
        if (cellGenerator) {
            stats.gameBoard = cellGenerator.getCellsStats();
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–±–∏–∫–æ–≤
        const diceModule = this.modules.get('diceModule');
        if (diceModule) {
            stats.dice = diceModule.getStats();
        }

        return stats;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞
     */
    destroy() {
        if (this.isRunning) {
            this.stop();
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª–µ–π
        this.modules.destroy();
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.destroy();
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.eventBus.destroy();
        
        this.isInitialized = false;
        console.log('üóëÔ∏è GameCore —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default GameCore;
