/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –±–∞–ª–∞–Ω—Å–∞ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
 */

export class NotificationService {
    constructor() {
        this.notifications = [];
        this.maxNotifications = 10;
        this.container = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    init() {
        this.createContainer();
        this.loadStyles();
        console.log('üîî NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    createContainer() {
        this.container = document.getElementById('notification-container');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notification-container';
            this.container.className = 'notification-container';
            document.body.appendChild(this.container);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    loadStyles() {
        if (document.getElementById('notification-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification-container {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
                pointer-events: none;
            }
            
            .notification {
                background: #fff;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                margin-bottom: 10px;
                padding: 16px;
                pointer-events: auto;
                transform: translateX(100%);
                transition: transform 0.3s ease;
                border-left: 4px solid #4CAF50;
                position: relative;
                overflow: hidden;
            }
            
            .notification.show {
                transform: translateX(0);
            }
            
            .notification.hide {
                transform: translateX(100%);
                opacity: 0;
            }
            
            .notification.success {
                border-left-color: #4CAF50;
            }
            
            .notification.error {
                border-left-color: #f44336;
            }
            
            .notification.warning {
                border-left-color: #ff9800;
            }
            
            .notification.info {
                border-left-color: #2196F3;
            }
            
            .notification-money {
                border-left-color: #FFD700;
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                gap: 12px;
            }
            
            .notification-icon {
                font-size: 24px;
                flex-shrink: 0;
            }
            
            .notification-message {
                flex: 1;
                font-size: 14px;
                line-height: 1.4;
                color: #333;
            }
            
            .notification-close {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                color: #999;
                padding: 0;
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                transition: background-color 0.2s;
            }
            
            .notification-close:hover {
                background-color: #f5f5f5;
                color: #666;
            }
            
            .notification-reason {
                font-size: 12px;
                color: #666;
                margin-top: 4px;
                font-style: italic;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     */
    show(message, type = 'info', options = {}) {
        const notification = {
            id: this.generateId(),
            message,
            type,
            timestamp: Date.now(),
            duration: options.duration || this.getDefaultDuration(type),
            reason: options.reason || '',
            showClose: options.showClose !== false
        };

        this.notifications.push(notification);
        this.render(notification);
        this.cleanup();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (notification.duration > 0) {
            setTimeout(() => {
                this.hide(notification.id);
            }, notification.duration);
        }

        console.log(`üîî –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message} (${type})`);
        return notification.id;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} notification - –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    render(notification) {
        const element = document.createElement('div');
        element.id = `notification-${notification.id}`;
        element.className = `notification ${notification.type}`;
        
        const icon = this.getIcon(notification.type);
        
        element.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">${icon}</div>
                <div class="notification-message">
                    ${notification.message}
                    ${notification.reason ? `<div class="notification-reason">${notification.reason}</div>` : ''}
                </div>
                ${notification.showClose ? '<button class="notification-close">&times;</button>' : ''}
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (notification.showClose) {
            const closeBtn = element.querySelector('.notification-close');
            closeBtn.addEventListener('click', () => {
                this.hide(notification.id);
            });
        }

        // –ö–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        element.addEventListener('click', () => {
            this.hide(notification.id);
        });

        this.container.appendChild(element);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            element.classList.add('show');
        }, 10);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} id - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hide(id) {
        const element = document.getElementById(`notification-${id}`);
        if (!element) return;

        element.classList.remove('show');
        element.classList.add('hide');

        setTimeout(() => {
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }
            this.notifications = this.notifications.filter(n => n.id !== id);
        }, 300);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    hideAll() {
        this.notifications.forEach(notification => {
            this.hide(notification.id);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è',
            money: 'üí∞',
            movement: 'üö∂',
            card: 'üÉè',
            bankruptcy: 'üí∏'
        };
        return icons[type] || '‚ÑπÔ∏è';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getDefaultDuration(type) {
        const durations = {
            success: 3000,
            error: 5000,
            warning: 4000,
            info: 3000,
            money: 4000,
            movement: 2000,
            card: 3000,
            bankruptcy: 6000
        };
        return durations[type] || 3000;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    cleanup() {
        if (this.notifications.length > this.maxNotifications) {
            const toRemove = this.notifications.slice(0, this.notifications.length - this.maxNotifications);
            toRemove.forEach(notification => {
                this.hide(notification.id);
            });
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     */
    generateId() {
        return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    success(message, options = {}) {
        return this.show(message, 'success', options);
    }

    error(message, options = {}) {
        return this.show(message, 'error', options);
    }

    warning(message, options = {}) {
        return this.show(message, 'warning', options);
    }

    info(message, options = {}) {
        return this.show(message, 'info', options);
    }

    money(message, options = {}) {
        return this.show(message, 'money', options);
    }

    movement(message, options = {}) {
        return this.show(message, 'movement', options);
    }

    card(message, options = {}) {
        return this.show(message, 'card', options);
    }

    bankruptcy(message, options = {}) {
        return this.show(message, 'bankruptcy', options);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
     * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} amount - –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    async notifyBalanceChange(username, amount, reason = '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞') {
        try {
            const roomId = window.gameState?.state?.roomId || window.roomId;
            if (!roomId) {
                console.warn('üîî –ù–µ—Ç roomId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/bank/notify/balance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-User-Name': username
                },
                body: JSON.stringify({
                    username,
                    roomId,
                    amount,
                    reason
                })
            });

            if (response.ok) {
                const data = await response.json();
                this.money(data.message, { 
                    reason: data.reason,
                    duration: 4000 
                });
            } else {
                console.error('üîî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                const sign = amount >= 0 ? '+' : '';
                this.money(`–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É ${sign}$${amount}`, { 
                    reason,
                    duration: 4000 
                });
            }
        } catch (error) {
            console.error('üîî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            const sign = amount >= 0 ? '+' : '';
            this.money(`–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É ${sign}$${amount}`, { 
                reason,
                duration: 4000 
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            activeNotifications: this.notifications.length,
            maxNotifications: this.maxNotifications,
            containerExists: !!this.container
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
     */
    destroy() {
        this.hideAll();
        if (this.container && this.container.parentNode) {
            this.container.parentNode.removeChild(this.container);
        }
        this.container = null;
        console.log('üóëÔ∏è NotificationService —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.notificationService = new NotificationService();

export default NotificationService;
