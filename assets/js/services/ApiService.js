/**
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

export class ApiService {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.baseURL = this.getBaseURL();
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
        this.requestQueue = [];
        this.isOnline = navigator.onLine;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        console.log('üåê ApiService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.processQueuedRequests();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL
     */
    getBaseURL() {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Railway
        if (window.location.hostname === 'em1-production.up.railway.app') {
            return 'https://em1-production.up.railway.app';
        }
        
        // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        return window.location.origin;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     */
    async request(endpoint, options = {}) {
        if (this.isDestroyed) {
            console.warn('ApiService —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
            return null;
        }

        const url = `${this.baseURL}${endpoint}`;
        const requestOptions = {
            ...options,
            headers: {
                ...this.defaultHeaders,
                ...options.headers
            }
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        const user = this.getCurrentUser();
        if (user && user.id) {
            requestOptions.headers['X-User-ID'] = user.id;
        }

        try {
            console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${requestOptions.method || 'GET'} ${url}`);
            
            const response = await fetch(url, requestOptions);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            // –ü–∞—Ä—Å–∏–Ω–≥ JSON
            const data = await response.json();
            
            console.log(`üåê API –æ—Ç–≤–µ—Ç: ${url}`, data);
            return data;
            
        } catch (error) {
            console.error(`üåê API –æ—à–∏–±–∫–∞: ${url}`, error);
            
            // –ï—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if (!this.isOnline) {
                this.addToQueue(endpoint, options);
            }
            
            throw error;
        }
    }

    /**
     * GET –∑–∞–ø—Ä–æ—Å
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
     */
    async get(endpoint, params = {}) {
        const queryString = new URLSearchParams(params).toString();
        const url = queryString ? `${endpoint}?${queryString}` : endpoint;
        
        return this.request(url, { method: 'GET' });
    }

    /**
     * POST –∑–∞–ø—Ä–æ—Å
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async post(endpoint, data = {}) {
        return this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    /**
     * PUT –∑–∞–ø—Ä–æ—Å
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async put(endpoint, data = {}) {
        return this.request(endpoint, {
            method: 'PUT',
            body: JSON.stringify(data)
        });
    }

    /**
     * DELETE –∑–∞–ø—Ä–æ—Å
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     */
    async delete(endpoint) {
        return this.request(endpoint, { method: 'DELETE' });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    async getRoom(roomId) {
        try {
            return await this.get(`/api/rooms/${roomId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUser(userId) {
        try {
            return await this.get(`/api/users/${userId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} amount - –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async updateBalance(userId, amount, description) {
        try {
            return await this.post('/api/users/balance', {
                user_id: userId,
                amount: amount,
                description: description,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    async getTransactionHistory(userId, limit = 50) {
        try {
            return await this.get(`/api/users/${userId}/transactions`, { limit });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} amount - –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
     */
    async createCredit(userId, amount) {
        try {
            return await this.post('/api/credits', {
                user_id: userId,
                amount: amount,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} amount - –°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è
     */
    async payCredit(userId, amount) {
        try {
            return await this.post('/api/credits/pay', {
                user_id: userId,
                amount: amount,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
     * @param {string} fromUserId - ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
     * @param {string} toUserId - ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
     * @param {number} amount - –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ
     */
    async transferMoney(fromUserId, toUserId, amount, description) {
        try {
            return await this.post('/api/transfers', {
                from_user_id: fromUserId,
                to_user_id: toUserId,
                amount: amount,
                description: description,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            throw error;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} gameState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    async saveGameState(roomId, gameState) {
        try {
            return await this.put(`/api/rooms/${roomId}/state`, {
                state: gameState,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    async getGameState(roomId) {
        try {
            return await this.get(`/api/rooms/${roomId}/state`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     */
    async sendMessage(roomId, message) {
        try {
            return await this.post(`/api/rooms/${roomId}/messages`, {
                message: message,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {number} limit - –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async getMessages(roomId, limit = 50) {
        try {
            return await this.get(`/api/rooms/${roomId}/messages`, { limit });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async checkServerStatus() {
        try {
            const response = await this.get('/api/health');
            return response.status === 'ok';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        try {
            const userStr = localStorage.getItem('user');
            return userStr ? JSON.parse(userStr) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     */
    addToQueue(endpoint, options) {
        this.requestQueue.push({
            endpoint,
            options,
            timestamp: Date.now()
        });
        
        console.log(`üåê –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: ${endpoint}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     */
    async processQueuedRequests() {
        if (this.requestQueue.length === 0) {
            return;
        }
        
        console.log(`üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ ${this.requestQueue.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
        
        const requests = [...this.requestQueue];
        this.requestQueue = [];
        
        for (const request of requests) {
            try {
                await this.request(request.endpoint, request.options);
                console.log(`üåê –ó–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${request.endpoint}`);
            } catch (error) {
                console.error(`üåê –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${request.endpoint}`, error);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
                this.requestQueue.push(request);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            baseURL: this.baseURL,
            isOnline: this.isOnline,
            queuedRequests: this.requestQueue.length,
            hasCurrentUser: !!this.getCurrentUser()
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–∞
     */
    destroy() {
        this.requestQueue = [];
        this.isDestroyed = true;
        console.log('üóëÔ∏è ApiService —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default ApiService;
