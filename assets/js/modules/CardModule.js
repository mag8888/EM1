/**
 * –ú–æ–¥—É–ª—å –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–¥–∞–º–∏ –∫–∞—Ä—Ç, –∏—Ö —Ä–∞–∑–¥–∞—á–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 */

export class CardModule {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.decks = new Map();
        this.currentCard = null;
        this.cardHistory = [];
        this.maxHistorySize = 100;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞—Ä—Ç
     */
    async init() {
        console.log('üÉè CardModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥
        this.initDecks();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('cardDrawRequested', this.onCardDrawRequested.bind(this));
        this.gameCore.eventBus.on('playerPositionChanged', this.onPlayerPositionChanged.bind(this));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥ –∫–∞—Ä—Ç
     */
    initDecks() {
        // –ö–æ–ª–æ–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        this.decks.set('opportunity', new Deck('opportunity', this.createOpportunityCards()));
        
        // –ö–æ–ª–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        this.decks.set('expense', new Deck('expense', this.createExpenseCards()));
        
        // –ö–æ–ª–æ–¥–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.decks.set('charity', new Deck('charity', this.createCharityCards()));
        
        console.log('üÉè –ö–æ–ª–æ–¥—ã –∫–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
     */
    createOpportunityCards() {
        return [
            { id: 'opp_001', name: '–ê–∫—Ü–∏–∏', amount: 5000, income: 500, type: 'stock' },
            { id: 'opp_002', name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', amount: 15000, income: 1500, type: 'real_estate' },
            { id: 'opp_003', name: '–ë–∏–∑–Ω–µ—Å', amount: 25000, income: 2500, type: 'business' },
            { id: 'opp_004', name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', amount: 3000, income: 300, type: 'bonds' },
            { id: 'opp_005', name: '–ó–æ–ª–æ—Ç–æ', amount: 8000, income: 800, type: 'gold' },
            { id: 'opp_006', name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', amount: 12000, income: 1200, type: 'crypto' },
            { id: 'opp_007', name: '–§—Ä–∞–Ω—à–∏–∑–∞', amount: 35000, income: 3500, type: 'franchise' },
            { id: 'opp_008', name: '–ü–∞—Ç–µ–Ω—Ç', amount: 20000, income: 2000, type: 'patent' },
            { id: 'opp_009', name: '–°—Ç–∞—Ä—Ç–∞–ø', amount: 40000, income: 4000, type: 'startup' },
            { id: 'opp_010', name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', amount: 6000, income: 600, type: 'investment' }
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
     */
    createExpenseCards() {
        return [
            { id: 'exp_001', name: '–ù–∞–ª–æ–≥–∏', amount: 2000, type: 'tax' },
            { id: 'exp_002', name: '–ú–µ–¥–∏—Ü–∏–Ω–∞', amount: 1500, type: 'medical' },
            { id: 'exp_003', name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', amount: 3000, type: 'education' },
            { id: 'exp_004', name: '–†–µ–º–æ–Ω—Ç', amount: 2500, type: 'repair' },
            { id: 'exp_005', name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', amount: 1800, type: 'insurance' },
            { id: 'exp_006', name: '–®—Ç—Ä–∞—Ñ', amount: 500, type: 'fine' },
            { id: 'exp_007', name: '–ü—Ä–∞–∑–¥–Ω–∏–∫', amount: 1200, type: 'celebration' },
            { id: 'exp_008', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', amount: 4000, type: 'travel' },
            { id: 'exp_009', name: '–ü–æ–∫—É–ø–∫–∞', amount: 2200, type: 'purchase' },
            { id: 'exp_010', name: '–£—Å–ª—É–≥–∏', amount: 800, type: 'services' }
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    createCharityCards() {
        return [
            { id: 'char_001', name: '–î–µ—Ç—Å–∫–∏–π –¥–æ–º', amount: 1000, description: '–ü–æ–º–æ—â—å –¥–µ—Ç—è–º' },
            { id: 'char_002', name: '–ü—Ä–∏—é—Ç –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö', amount: 800, description: '–ü–æ–º–æ—â—å –∂–∏–≤–æ—Ç–Ω—ã–º' },
            { id: 'char_003', name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å', amount: 1500, description: '–õ–µ—á–µ–Ω–∏–µ –±–æ–ª—å–Ω—ã—Ö' },
            { id: 'char_004', name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', amount: 1200, description: '–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π' },
            { id: 'char_005', name: '–≠–∫–æ–ª–æ–≥–∏—è', amount: 900, description: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∏—Ä–æ–¥—ã' }
        ];
    }

    /**
     * –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
     * @param {string} deckType - –¢–∏–ø –∫–æ–ª–æ–¥—ã
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    drawCard(deckType, options = {}) {
        if (this.isDestroyed) {
            console.warn('CardModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –≤–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
            return null;
        }

        const deck = this.decks.get(deckType);
        if (!deck) {
            console.error(`–ö–æ–ª–æ–¥–∞ ${deckType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return null;
        }

        const card = deck.draw();
        if (!card) {
            console.warn(`–ö–æ–ª–æ–¥–∞ ${deckType} –ø—É—Å—Ç–∞`);
            return null;
        }

        this.currentCard = card;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.saveToHistory(card, deckType);
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.emit('cardDrawn', {
            card,
            deckType,
            timestamp: Date.now(),
            options
        });

        console.log(`üÉè –í–∑—è—Ç–∞ –∫–∞—Ä—Ç–∞: ${card.name} (${deckType})`);
        
        return card;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã
     * @param {Object} card - –ö–∞—Ä—Ç–∞
     * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ (buy/skip)
     * @param {Object} player - –ò–≥—Ä–æ–∫
     */
    processCard(card, action, player) {
        if (!card || !player) {
            console.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç—ã');
            return false;
        }

        const result = {
            card,
            action,
            player: player.id,
            timestamp: Date.now(),
            success: false,
            message: '',
            financialImpact: 0
        };

        try {
            switch (action) {
                case 'buy':
                    result.success = this.processCardPurchase(card, player);
                    result.message = result.success ? 
                        `–ü–æ–∫—É–ø–∫–∞ ${card.name} –∑–∞ $${card.amount.toLocaleString()}` : 
                        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                    result.financialImpact = result.success ? -card.amount : 0;
                    break;

                case 'skip':
                    result.success = true;
                    result.message = `–ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ä—Ç—ã ${card.name}`;
                    result.financialImpact = 0;
                    break;

                case 'pay':
                    result.success = this.processCardPayment(card, player);
                    result.message = result.success ? 
                        `–û–ø–ª–∞—Ç–∞ ${card.name} $${card.amount.toLocaleString()}` : 
                        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                    result.financialImpact = result.success ? -card.amount : 0;
                    break;

                case 'charity':
                    result.success = this.processCharityCard(card, player);
                    result.message = result.success ? 
                        `–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${card.name} $${card.amount.toLocaleString()}` : 
                        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                    result.financialImpact = result.success ? -card.amount : 0;
                    break;

                default:
                    result.message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç—ã:', error);
            result.message = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç—ã';
        }

        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.emit('cardProcessed', result);

        return result;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ã
     * @param {Object} card - –ö–∞—Ä—Ç–∞
     * @param {Object} player - –ò–≥—Ä–æ–∫
     */
    processCardPurchase(card, player) {
        const playerManager = this.gameCore.getModule('playerManager');
        if (!playerManager) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (player.balance < card.amount) {
            return false;
        }

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        playerManager.updateBalance(player.id, -card.amount, `–ü–æ–∫—É–ø–∫–∞: ${card.name}`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
        if (card.income) {
            playerManager.updatePlayer(player.id, {
                monthlyIncome: player.monthlyIncome + card.income,
                assets: [...(player.assets || []), card]
            });
        }

        return true;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç—ã
     * @param {Object} card - –ö–∞—Ä—Ç–∞
     * @param {Object} player - –ò–≥—Ä–æ–∫
     */
    processCardPayment(card, player) {
        const playerManager = this.gameCore.getModule('playerManager');
        if (!playerManager) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (player.balance < card.amount) {
            return false;
        }

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        playerManager.updateBalance(player.id, -card.amount, `–†–∞—Å—Ö–æ–¥: ${card.name}`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
        playerManager.updatePlayer(player.id, {
            monthlyExpenses: player.monthlyExpenses + (card.monthlyExpense || 0)
        });

        return true;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Object} card - –ö–∞—Ä—Ç–∞
     * @param {Object} player - –ò–≥—Ä–æ–∫
     */
    processCharityCard(card, player) {
        const playerManager = this.gameCore.getModule('playerManager');
        if (!playerManager) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (player.balance < card.amount) {
            return false;
        }

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        playerManager.updateBalance(player.id, -card.amount, `–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${card.name}`);

        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ —Ç–∏–ø—É –∫–ª–µ—Ç–∫–∏
     * @param {Object} cell - –ö–ª–µ—Ç–∫–∞
     */
    getCardByCellType(cell) {
        if (!cell || !cell.type) {
            return null;
        }

        switch (cell.type) {
            case 'opportunity':
                return this.drawCard('opportunity');
            case 'expense':
                return this.drawCard('expense');
            case 'charity':
                return this.drawCard('charity');
            default:
                return null;
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
     * @param {string} deckType - –¢–∏–ø –∫–æ–ª–æ–¥—ã
     */
    shuffleDeck(deckType) {
        const deck = this.decks.get(deckType);
        if (deck) {
            deck.shuffle();
            console.log(`üÉè –ö–æ–ª–æ–¥–∞ ${deckType} –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞`);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–¥
     */
    shuffleAllDecks() {
        this.decks.forEach((deck, type) => {
            deck.shuffle();
        });
        console.log('üÉè –í—Å–µ –∫–æ–ª–æ–¥—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–µ
     * @param {string} deckType - –¢–∏–ø –∫–æ–ª–æ–¥—ã
     */
    getDeckInfo(deckType) {
        const deck = this.decks.get(deckType);
        if (!deck) {
            return null;
        }

        return {
            type: deckType,
            totalCards: deck.totalCards,
            remainingCards: deck.remainingCards,
            isShuffled: deck.isShuffled,
            lastShuffle: deck.lastShuffle
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä—Ç
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getHistory(limit = 10) {
        return this.cardHistory.slice(-limit);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {Object} card - –ö–∞—Ä—Ç–∞
     * @param {string} deckType - –¢–∏–ø –∫–æ–ª–æ–¥—ã
     */
    saveToHistory(card, deckType) {
        this.cardHistory.push({
            card,
            deckType,
            timestamp: Date.now(),
            playerId: this.gameCore.state.getState('currentPlayerId')
        });

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.cardHistory.length > this.maxHistorySize) {
            this.cardHistory.shift();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    getCurrentCard() {
        return this.currentCard;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    clearCurrentCard() {
        this.currentCard = null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        const stats = {
            totalDecks: this.decks.size,
            currentCard: this.currentCard ? this.currentCard.name : null,
            historySize: this.cardHistory.length,
            deckStats: {}
        };

        this.decks.forEach((deck, type) => {
            stats.deckStats[type] = {
                totalCards: deck.totalCards,
                remainingCards: deck.remainingCards,
                drawnCards: deck.totalCards - deck.remainingCards
            };
        });

        return stats;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onCardDrawRequested(data) {
        this.drawCard(data.deckType, data.options);
    }

    onPlayerPositionChanged(data) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        // –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∫–∞—Ä—Ç
     */
    destroy() {
        this.decks.clear();
        this.currentCard = null;
        this.cardHistory = [];
        this.isDestroyed = true;
        console.log('üóëÔ∏è CardModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

/**
 * –ö–ª–∞—Å—Å –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
 */
class Deck {
    constructor(type, cards = []) {
        this.type = type;
        this.cards = [...cards];
        this.originalCards = [...cards];
        this.currentIndex = 0;
        this.isShuffled = false;
        this.lastShuffle = null;
    }

    /**
     * –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã
     */
    draw() {
        if (this.remainingCards === 0) {
            this.shuffle();
        }

        const card = this.cards[this.currentIndex];
        this.currentIndex++;
        
        return card;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
     */
    shuffle() {
        for (let i = this.cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
        }
        
        this.currentIndex = 0;
        this.isShuffled = true;
        this.lastShuffle = Date.now();
    }

    /**
     * –°–±—Ä–æ—Å –∫–æ–ª–æ–¥—ã
     */
    reset() {
        this.cards = [...this.originalCards];
        this.currentIndex = 0;
        this.isShuffled = false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç
     */
    get remainingCards() {
        return Math.max(0, this.cards.length - this.currentIndex);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç
     */
    get totalCards() {
        return this.cards.length;
    }
}

export default CardModule;
