class ReadyButton {
    constructor({ state, button }) {
        this.state = state;
        this.button = button;
        this.isProcessing = false;
    }

    init() {
        if (!this.button) {
            return;
        }
        this.button.addEventListener('click', () => this.handleClick());
        this.state.on('change', (room) => this.update(room));
        this.state.on('loading', (isLoading) => {
            if (isLoading) {
                this.button.classList.add('loading');
            } else {
                this.button.classList.remove('loading');
            }
        });
    }

    update(room) {
        const player = room?.currentPlayer;
        if (!player) {
            this.button.disabled = true;
            this.button.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ...';
            return;
        }
        const hasDream = Boolean(player.selectedDream);
        const hasToken = Boolean(player.selectedToken);
        const ready = Boolean(player.isReady);

        console.log('üîç ReadyButton update:', {
            playerName: player.name,
            hasDream,
            hasToken,
            ready,
            selectedDream: player.selectedDream,
            selectedToken: player.selectedToken
        });

        if (!hasDream || !hasToken) {
            this.button.disabled = true;
            this.button.textContent = hasDream ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—à–∫—É' : '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É';
            this.button.classList.add('disabled');
        } else {
            this.button.disabled = false;
            this.button.classList.remove('disabled');
            this.button.textContent = ready ? '–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å' : '–ì–æ—Ç–æ–≤';
        }

        if (ready) {
            this.button.classList.add('ready');
        } else {
            this.button.classList.remove('ready');
        }
    }

    async handleClick() {
        if (this.isProcessing || this.button.disabled) {
            console.log('‚ö†Ô∏è ReadyButton.handleClick: –∫–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è');
            return;
        }
        console.log('üîÑ ReadyButton.handleClick: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞');
        this.isProcessing = true;
        this.button.dataset.loading = 'true';
        try {
            await this.state.toggleReady();
            console.log('‚úÖ ReadyButton.handleClick: —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå ReadyButton.handleClick: –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        } finally {
            this.button.dataset.loading = 'false';
            this.isProcessing = false;
        }
    }
}

window.ReadyButton = ReadyButton;
