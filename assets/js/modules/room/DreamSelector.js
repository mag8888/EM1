const DEFAULT_DREAMS = [
    { id: 2, name: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã –¥–ª—è —Å–µ–º—å–∏', cost: 100000, icon: 'üè†' },
    { id: 6, name: '–ü–æ—Å–µ—Ç–∏—Ç—å –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É', cost: 150000, icon: '‚úàÔ∏è' },
    { id: 12, name: '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ –≤—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã –º–∏—Ä–∞', cost: 500000, icon: '‚õ∞Ô∏è' },
    { id: 16, name: '–ñ–∏—Ç—å –≥–æ–¥ –Ω–∞ —è—Ö—Ç–µ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', cost: 300000, icon: '‚õµ' },
    { id: 18, name: '–°–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤', cost: 300000, icon: 'üéóÔ∏è' },
    { id: 20, name: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', cost: 200000, icon: 'üé™' },
    { id: 24, name: '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —ç–∫–æ-—Ä–∞–Ω—á–æ', cost: 1000000, icon: 'üèûÔ∏è' },
    { id: 28, name: 'NFT-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', cost: 400000, icon: 'üíé' },
    { id: 30, name: '–ü–æ–ª–µ—Ç –Ω–∞ –ú–∞—Ä—Å', cost: 300000, icon: 'üöÄ' },
    { id: 32, name: '–°–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É –±—É–¥—É—â–µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–π', cost: 300000, icon: 'üè´' },
    { id: 35, name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 200000, icon: '‚õµ' },
    { id: 37, name: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è –Ø—Ö—Ç–∞', cost: 300000, icon: '‚õµ' },
    { id: 42, name: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', cost: 200000, icon: 'üéóÔ∏è' },
    { id: 46, name: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å', cost: 250000, icon: 'üöÄ' },
    { id: 48, name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', cost: 300000, icon: 'üåç' },
    { id: 50, name: '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Å—Ç—Ä–æ–≤', cost: 500000, icon: 'üèùÔ∏è' }
];

class DreamSelector {
    constructor({ state, container, searchInput }) {
        this.state = state;
        this.container = container;
        this.currentDreamId = null;
        this.isProcessing = false;
        this.searchInput = searchInput || null;
        this.lastRoom = null;
    }

    init() {
        if (!this.container) {
            return;
        }
        if (this.searchInput) {
            this.searchInput.addEventListener('input', () => {
                if (this.lastRoom) {
                    this.render(this.lastRoom, { force: true });
                }
            });
        }
        this.state.on('change', (room) => this.render(room));
    }

    render(room, { force = false } = {}) {
        if (!room) {
            return;
        }
        this.lastRoom = room;
        const dreams = Array.isArray(room.availableDreams) && room.availableDreams.length
            ? room.availableDreams
            : DEFAULT_DREAMS;
        const player = room.currentPlayer;
        this.currentDreamId = player?.selectedDream ?? null;
        const query = this.searchInput?.value?.trim().toLowerCase() || '';
        const list = query
            ? dreams.filter(dream => dream.name.toLowerCase().includes(query))
            : dreams;

        if (!force) {
            this.container.innerHTML = '';
        } else {
            this.container.textContent = '';
        }

        list.forEach((dream) => {
            const item = document.createElement('button');
            item.type = 'button';
            item.className = 'dream-item';
            if (dream.id === this.currentDreamId) {
                item.classList.add('selected');
            }
            item.dataset.dreamId = dream.id;
            item.innerHTML = `
                <span class="dream-icon">${dream.icon || 'üåü'}</span>
                <span class="dream-name">${dream.name}</span>
                <span class="dream-cost">$${Number(dream.cost || 0).toLocaleString()}</span>
            `;
            item.addEventListener('click', () => this.handleSelection(dream.id));
            this.container.appendChild(item);
        });
    }

    async handleSelection(dreamId) {
        if (this.isProcessing || dreamId === this.currentDreamId) {
            return;
        }
        this.isProcessing = true;
        try {
            await this.state.selectDream(dreamId);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–µ—á—Ç—É:', error);
        } finally {
            this.isProcessing = false;
        }
    }
}

window.DreamSelector = DreamSelector;

} // –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ else –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
