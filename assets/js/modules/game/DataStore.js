/**
 * –ï–¥–∏–Ω–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π DataStore –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
class DataStore {
    constructor() {
        this.data = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            balance: 0,
            income: 0,           // –û–±—â–∏–π –¥–æ—Ö–æ–¥ (–∑–∞—Ä–ø–ª–∞—Ç–∞ + –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥)
            salary: 0,           // –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            passiveIncome: 0,    // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∞–∫—Ç–∏–≤–æ–≤
            expenses: 0,         // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            payday: 0,           // –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ (PAYDAY)
            
            // –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            credit: 0,           // –¢–µ–∫—É—â–∏–π –¥–æ–ª–≥
            maxCredit: 0,        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–∞
            freeCredit: 0,       // –î–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–∞
            
            // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            expensesBreakdown: {
                base: 0,         // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
                credit: 0,       // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫—Ä–µ–¥–∏—Ç
                children: 0,     // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π
                total: 0         // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            },
            
            // –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            transfers: [],
            
            // –ò–≥—Ä–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            roomId: null,
            playerName: null,
            playerId: null,
            
            // –ö—ç—à –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            lastUpdated: null,
            isLoading: false
        };
        
        this.listeners = new Map();
        this.isInitialized = false;
        
        console.log('üìä DataStore: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    subscribe(key, callback) {
        if (!this.listeners.has(key)) {
            this.listeners.set(key, new Set());
        }
        this.listeners.get(key).add(callback);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            const callbacks = this.listeners.get(key);
            if (callbacks) {
                callbacks.delete(callback);
            }
        };
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     */
    notify(key, oldValue, newValue) {
        const callbacks = this.listeners.get(key);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(newValue, oldValue, key);
                } catch (error) {
                    console.error(`DataStore: –û—à–∏–±–∫–∞ –≤ callback –¥–ª—è ${key}:`, error);
                }
            });
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
     */
    set(key, value) {
        const oldValue = this.data[key];
        this.data[key] = value;
        this.data.lastUpdated = Date.now();
        
        if (oldValue !== value) {
            this.notify(key, oldValue, value);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    get(key) {
        return this.data[key];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    getAll() {
        return { ...this.data };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å PlayerSummary
     */
    getPlayerSummaryData() {
        return {
            balance: this.data.balance,
            income: this.data.income,
            passiveIncome: this.data.passiveIncome,
            expenses: this.data.expenses,
            payday: this.data.payday,
            credit: this.data.credit,
            maxCredit: this.data.maxCredit
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –º–æ–¥—É–ª–µ–º
     */
    getBankModuleData() {
        return {
            balance: this.data.balance,
            income: this.data.income,
            passiveIncome: this.data.passiveIncome,
            expenses: this.data.expenses,
            payday: this.data.payday,
            credit: this.data.credit,
            maxCredit: this.data.maxCredit,
            freeCredit: this.data.freeCredit,
            transfers: this.data.transfers
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
     */
    update(updates) {
        const changedKeys = [];
        
        Object.keys(updates).forEach(key => {
            const oldValue = this.data[key];
            const newValue = updates[key];
            this.data[key] = newValue;
            
            if (oldValue !== newValue) {
                changedKeys.push({ key, oldValue, newValue });
            }
        });
        
        this.data.lastUpdated = Date.now();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        changedKeys.forEach(({ key, oldValue, newValue }) => {
            this.notify(key, oldValue, newValue);
        });
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    calculateDerivedValues() {
        const { salary, passiveIncome, expensesBreakdown, credit } = this.data;
        
        // –û–±—â–∏–π –¥–æ—Ö–æ–¥
        const totalIncome = salary + passiveIncome;
        
        // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        const totalExpenses = expensesBreakdown.base + expensesBreakdown.credit + expensesBreakdown.children;
        
        // PAYDAY (—á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥)
        const payday = Math.max(0, totalIncome - totalExpenses);
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç (10x –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ PAYDAY –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É)
        const basePayday = Math.max(0, totalIncome - expensesBreakdown.base - expensesBreakdown.children);
        const maxCredit = Math.max(0, basePayday * 10);
        
        // –î–æ—Å—Ç—É–ø–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        const freeCredit = Math.max(0, maxCredit - credit);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.update({
            income: totalIncome,
            expenses: totalExpenses,
            payday: payday,
            maxCredit: maxCredit,
            freeCredit: freeCredit
        });
        
        console.log('üìä DataStore: –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã', {
            income: totalIncome,
            expenses: totalExpenses,
            payday: payday,
            maxCredit: maxCredit,
            freeCredit: freeCredit
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
     */
    updateExpenses(expensesData) {
        this.update({
            expensesBreakdown: {
                base: expensesData.base || 0,
                credit: expensesData.credit || 0,
                children: expensesData.children || 0,
                total: (expensesData.base || 0) + (expensesData.credit || 0) + (expensesData.children || 0)
            }
        });
        
        this.calculateDerivedValues();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     */
    updateCredit(creditAmount) {
        this.set('credit', creditAmount);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫—Ä–µ–¥–∏—Ç
        const creditPenalty = Math.floor(creditAmount / 1000) * 100;
        this.updateExpenses({
            ...this.data.expensesBreakdown,
            credit: creditPenalty
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
     */
    updatePassiveIncome(amount) {
        this.set('passiveIncome', amount);
        this.calculateDerivedValues();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
     */
    updateSalary(amount) {
        this.set('salary', amount);
        this.calculateDerivedValues();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalance(amount) {
        this.set('balance', amount);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
     */
    updateTransfers(transfers) {
        this.set('transfers', transfers || []);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    setGameInfo(roomId, playerName, playerId) {
        this.update({
            roomId,
            playerName,
            playerId
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(isLoading) {
        this.set('isLoading', isLoading);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    isReady() {
        return this.isInitialized && this.data.roomId && this.data.playerName;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    initialize() {
        this.isInitialized = true;
        this.data.lastUpdated = Date.now();
        console.log('üìä DataStore: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', {
            isInitialized: this.isInitialized,
            isReady: this.isReady(),
            data: this.getAll()
        });
    }
    
    /**
     * –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
     */
    reset() {
        this.data = {
            balance: 0,
            income: 0,
            salary: 0,
            passiveIncome: 0,
            expenses: 0,
            payday: 0,
            credit: 0,
            maxCredit: 0,
            freeCredit: 0,
            expensesBreakdown: {
                base: 0,
                credit: 0,
                children: 0,
                total: 0
            },
            transfers: [],
            roomId: null,
            playerName: null,
            playerId: null,
            lastUpdated: null,
            isLoading: false
        };
        
        this.isInitialized = false;
        console.log('üìä DataStore: –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    getDebugInfo() {
        return {
            isInitialized: this.isInitialized,
            isReady: this.isReady(),
            lastUpdated: this.data.lastUpdated,
            listenersCount: Array.from(this.listeners.values()).reduce((sum, set) => sum + set.size, 0),
            data: this.getAll()
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.dataStore = new DataStore();

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataStore
if (window.dataStore) {
    window.dataStore.initialize();
    console.log('üìä DataStore: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
        dataStore: window.dataStore,
        isReady: window.dataStore?.isReady?.() || false,
        data: window.dataStore?.getAll?.() || 'N/A'
    });
} else {
    console.error('‚ùå DataStore: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä');
}

export default DataStore;
