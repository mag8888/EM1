// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∞–º–∏
class DealsManager {
    constructor() {
        this.deals = {
            big: [],      // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏
            small: [],    // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏
            market: [],   // –†—ã–Ω–æ–∫
            expenses: []  // –†–∞—Å—Ö–æ–¥—ã
        };
        this.currentDealType = 'big';
        this.dealsContent = document.getElementById('dealsContent');
        this.dealTabs = document.querySelectorAll('.deal-tab');
        
        this.init();
    }

    init() {
        console.log('üìù DealsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.setupEventListeners();
        this.loadDealsData();
        this.renderDeals();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤
        this.dealTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchDealType(tab.dataset.dealType);
            });
        });

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        if (window.EventEmitter) {
            window.EventEmitter.on('dealSelected', this.handleDealSelected.bind(this));
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–æ–∫
    switchDealType(dealType) {
        this.currentDealType = dealType;
        console.log('üìù –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∏–ø —Å–¥–µ–ª–æ–∫:', dealType);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        this.dealTabs.forEach(tab => {
            tab.classList.remove('active');
            if (tab.dataset.dealType === dealType) {
                tab.classList.add('active');
            }
        });

        this.renderDeals();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    loadDealsData() {
        // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏ (–ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
        this.deals.big = [
            {
                id: 1,
                name: '–û—Ç–µ–ª—å –Ω–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è',
                description: '–ö—É–ø–∏—Ç—å –æ—Ç–µ–ª—å –Ω–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è',
                cost: 500000,
                income: 25000,
                type: 'real_estate',
                icon: 'üè®'
            },
            {
                id: 2,
                name: '–°–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                description: '–§—Ä–∞–Ω—à–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                cost: 300000,
                income: 18000,
                type: 'business',
                icon: 'üçΩÔ∏è'
            },
            {
                id: 3,
                name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø',
                description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø',
                cost: 200000,
                income: 15000,
                type: 'technology',
                icon: 'üíª'
            },
            {
                id: 4,
                name: '–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç',
                description: '–ü–æ–∫—É–ø–∫–∞ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–≥–æ –∫—É—Ä–æ—Ä—Ç–∞',
                cost: 800000,
                income: 40000,
                type: 'real_estate',
                icon: '‚õ∑Ô∏è'
            }
        ];

        // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)
        this.deals.small = [
            {
                id: 1,
                name: '–ö–æ—Ñ–µ–π–Ω—è',
                description: '–û—Ç–∫—Ä—ã—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∫–æ—Ñ–µ–π–Ω—é',
                cost: 50000,
                income: 3000,
                type: 'business',
                icon: '‚òï'
            },
            {
                id: 2,
                name: '–ê–≤—Ç–æ–º–æ–π–∫–∞',
                description: '–ê–≤—Ç–æ–º–æ–π–∫–∞ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
                cost: 75000,
                income: 4000,
                type: 'business',
                icon: 'üöó'
            },
            {
                id: 3,
                name: '–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã',
                description: '–ë—É—Ç–∏–∫ –æ–¥–µ–∂–¥—ã –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ',
                cost: 60000,
                income: 3500,
                type: 'retail',
                icon: 'üëï'
            },
            {
                id: 4,
                name: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
                description: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –∏ –±–∞—Ä–±–µ—Ä—à–æ–ø',
                cost: 40000,
                income: 2500,
                type: 'service',
                icon: 'üíÑ'
            }
        ];

        // –†—ã–Ω–æ–∫ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        this.deals.market = [
            {
                id: 1,
                name: '–ê–∫—Ü–∏–∏ Apple',
                description: '–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π Apple',
                cost: 10000,
                income: 500,
                type: 'stocks',
                icon: 'üìà'
            },
            {
                id: 2,
                name: '–ó–æ–ª–æ—Ç–æ',
                description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–æ–ª–æ—Ç–æ',
                cost: 15000,
                income: 750,
                type: 'commodities',
                icon: 'ü•á'
            },
            {
                id: 3,
                name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
                description: '–ü–æ–∫—É–ø–∫–∞ Bitcoin',
                cost: 20000,
                income: 1000,
                type: 'crypto',
                icon: '‚Çø'
            },
            {
                id: 4,
                name: '–û–±–ª–∏–≥–∞—Ü–∏–∏',
                description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏',
                cost: 8000,
                income: 400,
                type: 'bonds',
                icon: 'üìã'
            }
        ];

        // –†–∞—Å—Ö–æ–¥—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
        this.deals.expenses = [
            {
                id: 1,
                name: '–ù–∞–ª–æ–≥–∏',
                description: '–ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥ 13%',
                cost: 1300,
                type: 'tax',
                icon: 'üìä'
            },
            {
                id: 2,
                name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                description: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                cost: 500,
                type: 'insurance',
                icon: 'üè•'
            },
            {
                id: 3,
                name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                description: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                cost: 300,
                type: 'insurance',
                icon: 'üöô'
            },
            {
                id: 4,
                name: '–ñ–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                description: '–ñ–ö–• –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
                cost: 800,
                type: 'utilities',
                icon: 'üè†'
            }
        ];

        console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫:', {
            big: this.deals.big.length,
            small: this.deals.small.length,
            market: this.deals.market.length,
            expenses: this.deals.expenses.length
        });
    }

    // –†–µ–Ω–¥–µ—Ä —Å–¥–µ–ª–æ–∫
    renderDeals() {
        if (!this.dealsContent) return;

        const currentDeals = this.deals[this.currentDealType];
        if (!currentDeals) {
            this.dealsContent.innerHTML = '<div class="no-deals">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫</div>';
            return;
        }

        this.dealsContent.innerHTML = '';

        currentDeals.forEach(deal => {
            const dealElement = this.createDealElement(deal);
            this.dealsContent.appendChild(dealElement);
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–¥–µ–ª–∫–∏
    createDealElement(deal) {
        const div = document.createElement('div');
        div.className = 'deal-card';
        div.dataset.dealId = deal.id;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        const dealTypeClass = this.getDealTypeClass(deal.type);
        div.classList.add(dealTypeClass);

        div.innerHTML = `
            <div class="deal-header">
                <div class="deal-icon">${deal.icon}</div>
                <div class="deal-info">
                    <h4 class="deal-name">${deal.name}</h4>
                    <p class="deal-description">${deal.description}</p>
                </div>
            </div>
            
            <div class="deal-details">
                <div class="deal-cost">
                    <span class="cost-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span class="cost-value">$${deal.cost.toLocaleString()}</span>
                </div>
                ${deal.income ? `
                    <div class="deal-income">
                        <span class="income-label">–î–æ—Ö–æ–¥:</span>
                        <span class="income-value">$${deal.income.toLocaleString()}/–º–µ—Å</span>
                    </div>
                ` : ''}
            </div>

            <div class="deal-actions">
                <button class="btn-deal buy" data-deal-id="${deal.id}">
                    ${deal.type === 'expense' ? '–û–ø–ª–∞—Ç–∏—Ç—å' : '–ö—É–ø–∏—Ç—å'}
                </button>
                <button class="btn-deal info" data-deal-id="${deal.id}">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const buyButton = div.querySelector('.btn-deal.buy');
        const infoButton = div.querySelector('.btn-deal.info');

        buyButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this.selectDeal(deal);
        });

        infoButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showDealInfo(deal);
        });

        return div;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    getDealTypeClass(type) {
        const typeClasses = {
            'real_estate': 'deal-real-estate',
            'business': 'deal-business',
            'technology': 'deal-technology',
            'retail': 'deal-retail',
            'service': 'deal-service',
            'stocks': 'deal-stocks',
            'commodities': 'deal-commodities',
            'crypto': 'deal-crypto',
            'bonds': 'deal-bonds',
            'tax': 'deal-tax',
            'insurance': 'deal-insurance',
            'utilities': 'deal-utilities'
        };
        return typeClasses[type] || 'deal-default';
    }

    // –í—ã–±–æ—Ä —Å–¥–µ–ª–∫–∏
    selectDeal(deal) {
        console.log('üìù –í—ã–±—Ä–∞–Ω–∞ —Å–¥–µ–ª–∫–∞:', deal.name);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
        if (window.playersManager) {
            const currentPlayer = window.playersManager.getCurrentPlayer();
            if (currentPlayer && currentPlayer.cash >= deal.cost) {
                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
                if (window.EventEmitter) {
                    window.EventEmitter.emit('dealSelected', {
                        deal: deal,
                        player: currentPlayer
                    });
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                this.processDeal(deal, currentPlayer);
            } else {
                this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∫–∏
    processDeal(deal, player) {
        if (deal.type === 'expense') {
            // –†–∞—Å—Ö–æ–¥—ã - –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            window.playersManager.updatePlayer(player.id, {
                cash: player.cash - deal.cost
            });
            this.showSuccess(`–û–ø–ª–∞—á–µ–Ω–æ: ${deal.name} - $${deal.cost}`);
        } else {
            // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
            const newCash = player.cash - deal.cost;
            const newIncome = player.income + (deal.income || 0);
            
            window.playersManager.updatePlayer(player.id, {
                cash: newCash,
                income: newIncome,
                assets: player.assets + deal.cost
            });
            
            this.showSuccess(`–ö—É–ø–ª–µ–Ω–æ: ${deal.name} –∑–∞ $${deal.cost}`);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
    showDealInfo(deal) {
        console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:', deal);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const modal = document.createElement('div');
        modal.className = 'deal-info-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${deal.name}</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="deal-icon-large">${deal.icon}</div>
                    <p class="deal-description">${deal.description}</p>
                    <div class="deal-stats">
                        <div class="stat">
                            <span class="stat-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span class="stat-value">$${deal.cost.toLocaleString()}</span>
                        </div>
                        ${deal.income ? `
                            <div class="stat">
                                <span class="stat-label">–î–æ—Ö–æ–¥:</span>
                                <span class="stat-value">$${deal.income.toLocaleString()}/–º–µ—Å</span>
                            </div>
                        ` : ''}
                        <div class="stat">
                            <span class="stat-label">–¢–∏–ø:</span>
                            <span class="stat-value">${this.getDealTypeName(deal.type)}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = modal.querySelector('.modal-close');
        closeBtn.addEventListener('click', () => modal.remove());
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    getDealTypeName(type) {
        const typeNames = {
            'real_estate': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'business': '–ë–∏–∑–Ω–µ—Å',
            'technology': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'retail': '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
            'service': '–£—Å–ª—É–≥–∏',
            'stocks': '–ê–∫—Ü–∏–∏',
            'commodities': '–°—ã—Ä—å–µ',
            'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
            'bonds': '–û–±–ª–∏–≥–∞—Ü–∏–∏',
            'tax': '–ù–∞–ª–æ–≥–∏',
            'insurance': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
            'utilities': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'
        };
        return typeNames[type] || '–ü—Ä–æ—á–µ–µ';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
    handleDealSelected(data) {
        console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏:', data);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccess(message) {
        console.log('‚úÖ', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        console.error('‚ùå', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ —Ç–∏–ø—É
    getDeals(type) {
        return this.deals[type] || [];
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏
    getAllDeals() {
        return this.deals;
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥—É–ª—è —Å–¥–µ–ª–æ–∫
const dealsManagerStyles = `
    .deal-card {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 12px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .deal-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        border-color: rgba(255, 255, 255, 0.2);
    }

    .deal-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

    .deal-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }

    .deal-info {
        flex: 1;
    }

    .deal-name {
        font-size: 16px;
        font-weight: 600;
        color: #e2e8f0;
        margin: 0 0 4px 0;
    }

    .deal-description {
        font-size: 14px;
        color: #a0aec0;
        margin: 0;
    }

    .deal-details {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding: 8px 0;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .deal-cost, .deal-income {
        text-align: center;
    }

    .cost-label, .income-label {
        display: block;
        font-size: 12px;
        color: #a0aec0;
        margin-bottom: 4px;
    }

    .cost-value {
        font-size: 16px;
        font-weight: 700;
        color: #ed8936;
    }

    .income-value {
        font-size: 16px;
        font-weight: 700;
        color: #48bb78;
    }

    .deal-actions {
        display: flex;
        gap: 8px;
    }

    .btn-deal {
        flex: 1;
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-deal.buy {
        background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
        color: white;
    }

    .btn-deal.info {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
    }

    .btn-deal:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    .no-deals {
        text-align: center;
        color: #a0aec0;
        padding: 40px 20px;
        font-style: italic;
    }

    /* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ */
    .deal-info-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
        border-radius: 16px;
        padding: 24px;
        max-width: 400px;
        width: 90%;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .modal-header h3 {
        color: #e2e8f0;
        margin: 0;
    }

    .modal-close {
        background: none;
        border: none;
        color: #a0aec0;
        font-size: 24px;
        cursor: pointer;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-body {
        text-align: center;
    }

    .deal-icon-large {
        font-size: 48px;
        margin-bottom: 16px;
    }

    .deal-stats {
        margin-top: 16px;
    }

    .stat {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .stat:last-child {
        border-bottom: none;
    }

    .stat-label {
        color: #a0aec0;
    }

    .stat-value {
        color: #e2e8f0;
        font-weight: 600;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
if (typeof document !== 'undefined') {
    const styleSheet = document.createElement('style');
    styleSheet.textContent = dealsManagerStyles;
    document.head.appendChild(styleSheet);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.DealsManager = DealsManager;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìù DealsManager: DOM loaded, initializing...');
    if (!window.dealsManager) {
        console.log('üìù DealsManager: Creating new instance...');
        window.dealsManager = new DealsManager();
    } else {
        console.log('üìù DealsManager: Already exists, skipping initialization');
    }
});
