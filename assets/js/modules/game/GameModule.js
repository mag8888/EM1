import GameState from './GameState.js';
import NotificationCenter from './NotificationCenter.js';
import PlayersPanel from './PlayersPanel.js';
import TurnController from './TurnController.js';
import GameFlowController from './GameFlowController.js';
import DealController from './DealController.js';
import AssetsManager from './AssetsManager.js';
import PlayerSummary from './PlayerSummary.js';

class GameModule {
    constructor({ roomId }) {
        this.roomId = roomId;
        this.state = new GameState({ roomId });
        this.notifier = new NotificationCenter(document.getElementById('gameToast'));
        this.modules = [];
        this.gameFlow = null;
    }

    async init() {
        this.setupModules();
        this.setupListeners();
        this.setupUiShortcuts();
        try {
            await this.state.init();
            // –î–µ–ª–∞–µ–º GameState –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏—à–µ–∫
            window.gameState = this.state;
        } catch (error) {
            this.notifier.show(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É', { type: 'error' });
        }
    }

    setupModules() {
        const playersPanel = new PlayersPanel({
            state: this.state,
            container: document.getElementById('playersPanelList')
        });
        playersPanel.init();
        this.modules.push(playersPanel);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π –ø–æ—Ç–æ–∫ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã –ø–æ–≤–µ—Ä—Ö GameState/RoomApi
        this.gameFlow = new GameFlowController({
            eventBus: this.state, // GameState –Ω–∞—Å–ª–µ–¥—É–µ—Ç EventEmitter
            getModule: (name) => {
                if (name === 'diceModule') {
                    return {
                        roll: async () => {
                            const res = await this.state.rollDice();
                            const values = [res?.result?.dice1 || 0, res?.result?.dice2 || 0].filter(Boolean);
                            const total = res?.result?.total || values.reduce((a,b)=>a+b,0) || 0;
                            return { values, total };
                        }
                    };
                }
                if (name === 'movementModule') {
                    return {
                        movePlayer: async (playerId, steps) => {
                            // –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Ç–µ–∫—É—â—É—é
                            // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å—Å—è –ø–æ–∑–∂–µ
                            const snapshot = this.state.getSnapshot();
                            return { from: 0, to: (snapshot?.currentTurn || 1), steps, cell: null };
                        }
                    };
                }
                if (name === 'eventModule') {
                    return {
                        queueEvent: async (evt) => {
                            // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä —Å–¥–µ–ª–∫–∏, –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª —á–µ—Ä–µ–∑ DealController
                            return { handled: true, type: evt.type };
                        }
                    };
                }
                return null;
            }
        });
        this.gameFlow.init?.();

        const turnController = new TurnController({
            state: this.state,
            rollButton: document.getElementById('rollDiceBtn'),
            endTurnButton: document.getElementById('endTurnBtn'),
            phaseLabel: document.getElementById('turnState'),
            lastRollLabel: document.getElementById('lastRollValue'),
            notifier: this.notifier,
            statusChip: document.getElementById('turnStatusChip'),
            timerLabel: document.getElementById('turnTimerValue')
        });
        turnController.init();
        this.modules.push(turnController);

        const dealController = new DealController({
            state: this.state,
            modalElement: document.getElementById('dealModal'),
            notifier: this.notifier
        });
        dealController.init();
        this.modules.push(dealController);

        const assetsManager = new AssetsManager({
            state: this.state,
            container: document.getElementById('assetsList'),
            notifier: this.notifier
        });
        assetsManager.init();
        this.modules.push(assetsManager);
        
        // –î–µ–ª–∞–µ–º AssetsManager –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.assetsManager = assetsManager;

        const playerSummary = new PlayerSummary({ state: this.state });
        playerSummary.init();
        this.modules.push(playerSummary);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º debounce –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bankUpdateDebounce = null;
        this.lastBankUpdate = 0;
        this.BANK_UPDATE_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.pushService = window.pushNotificationService;
        this.setupPushNotifications();

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–Ω–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        this.state.on('change', async () => {
            try {
                const user = this.state.api?.getCurrentUser?.();
                const roomId = this.roomId;
                if (!user?.username || !roomId) return;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                const snapshot = this.state.getSnapshot();
                const shouldUpdateBank = this.shouldUpdateBankData(snapshot);
                
                if (shouldUpdateBank && window.dataStore && window.dataStoreAdapter) {
                    // Debounce –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
                    this.debouncedBankUpdate(user.username, roomId);
                }
            } catch (error) {
                console.error('‚ùå GameModule: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        });
    }

    setupListeners() {
        this.state.on('error', (error) => {
            this.notifier.show(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { type: 'error' });
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
     * @param {Object} snapshot - –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {boolean}
     */
    shouldUpdateBankData(snapshot) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö:
        // 1. –°–º–µ–Ω–∞ —Ö–æ–¥–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        // 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü)
        // 3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
        
        const currentTime = Date.now();
        const timeSinceLastUpdate = currentTime - this.lastBankUpdate;
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        if (timeSinceLastUpdate < this.BANK_UPDATE_INTERVAL) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const hasTurnChanged = this.lastActiveIndex !== snapshot.activeIndex;
        const hasGameStateChanged = this.lastGameState !== snapshot.gameState;
        const hasPlayersChanged = this.lastPlayersCount !== (snapshot.players?.length || 0);
        
        if (hasTurnChanged || hasGameStateChanged || hasPlayersChanged) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.lastActiveIndex = snapshot.activeIndex;
            this.lastGameState = snapshot.gameState;
            this.lastPlayersCount = snapshot.players?.length || 0;
            this.lastBankUpdate = currentTime;
            return true;
        }
        
        return false;
    }

    /**
     * Debounced –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    debouncedBankUpdate(username, roomId) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.bankUpdateDebounce) {
            clearTimeout(this.bankUpdateDebounce);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.bankUpdateDebounce = setTimeout(async () => {
            try {
                console.log('üîÑ GameModule: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (debounced)');
                
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                const [balanceRes, creditRes, financialsRes] = await Promise.all([
                    fetch(`/api/bank/balance/${encodeURIComponent(username)}/${encodeURIComponent(roomId)}`),
                    fetch(`/api/bank/credit/status/${encodeURIComponent(username)}/${encodeURIComponent(roomId)}`),
                    fetch(`/api/bank/financials/${encodeURIComponent(username)}/${encodeURIComponent(roomId)}`)
                ]);
                
                const [balanceData, creditData, financialsData] = await Promise.all([
                    balanceRes.json(),
                    creditRes.json(),
                    financialsRes.json()
                ]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º DataStore
                window.dataStore.update({
                    balance: Number(balanceData?.amount || 0),
                    credit: Number(creditData?.loanAmount || 0),
                    salary: Number(financialsData?.salary || 0),
                    passiveIncome: Number(financialsData?.passiveIncome || 0)
                });
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                window.dataStore.calculateDerivedValues();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ DataStoreAdapter
                window.dataStoreAdapter.updateUI();
                
                console.log('‚úÖ GameModule: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (debounced)');
            } catch (error) {
                console.error('‚ùå GameModule: –û—à–∏–±–∫–∞ debounced –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    setupPushNotifications() {
        if (!this.pushService) return;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        this.pushService.on('balanceChanged', (data) => {
            console.log('üîî GameModule: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞', data);
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if (window.dataStoreAdapter) {
                window.dataStoreAdapter.updateUI();
            }
        });

        this.pushService.on('turnChanged', (data) => {
            console.log('üîî GameModule: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞', data);
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
            const user = this.state.api?.getCurrentUser?.();
            if (user?.username && this.roomId) {
                this.debouncedBankUpdate(user.username, this.roomId);
            }
        });

        this.pushService.on('assetPurchased', (data) => {
            console.log('üîî GameModule: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ç–∏–≤–∞', data);
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∞–∫—Ç–∏–≤–∞
            this.updateAssetsUI(data);
        });

        this.pushService.on('transferCompleted', (data) => {
            console.log('üîî GameModule: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ', data);
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            const user = this.state.api?.getCurrentUser?.();
            if (user?.username && this.roomId) {
                this.debouncedBankUpdate(user.username, this.roomId);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI –∞–∫—Ç–∏–≤–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
     */
    updateAssetsUI(data) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤
            const assetsPanel = document.querySelector('.assets-panel');
            if (assetsPanel && data.asset) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤ –≤ UI
                const assetElement = document.createElement('div');
                assetElement.className = 'asset-item';
                assetElement.innerHTML = `
                    <div class="asset-name">${data.asset.name}</div>
                    <div class="asset-value">$${data.asset.value?.toLocaleString() || 0}</div>
                    <div class="asset-income">+$${data.asset.income || 0}/–º–µ—Å</div>
                `;
                assetsPanel.appendChild(assetElement);
            }
        } catch (error) {
            console.error('‚ùå GameModule: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∞–∫—Ç–∏–≤–∞:', error);
        }
    }

    setupUiShortcuts() {
        const bankBtn = document.getElementById('bankButton');
        bankBtn?.addEventListener('click', () => {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –±–∞–Ω–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
            if (window.bankWindow && !window.bankWindow.closed) {
                window.bankWindow.close();
            }
            
            const v = Date.now();
            const features = 'width=720,height=840,scrollbars=yes,resizable=yes,menubar=no,toolbar=no,location=no,status=no';
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å v4
            if (typeof window.openBankV4 === 'function') {
                window.openBankV4();
            } else {
                console.error('BankModuleV4 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω.');
            }
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            if (window.bankWindow) {
                window.bankWindow.focus();
            }
        });

        const dealsBtn = document.getElementById('dealsButton');
        dealsBtn?.addEventListener('click', () => {
            const v = Date.now();
            window.open(`/game-board/deals-module.html?v=${v}`, 'dealsModule', 'width=960,height=820,scrollbars=yes');
        });

        // –ö–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–æ–ª–æ—Å–∫–∏ —Å–¥–µ–ª–æ–∫
        document.querySelectorAll('.special-card[data-deal-tab]')?.forEach(card => {
            card.addEventListener('click', () => {
                const tab = card.getAttribute('data-deal-tab');
                const v = Date.now();
                window.open(`/game-board/deals-module.html?v=${v}#${tab}`, 'dealsModule', 'width=960,height=820,scrollbars=yes');
            });
        });

        const leaveBtn = document.getElementById('leaveRoomBtn');
        leaveBtn?.addEventListener('click', () => {
            window.location.assign(`/room/${this.roomId}`);
        });

        const user = this.state.api?.getCurrentUser?.();
        if (user) {
            const nameEl = document.getElementById('username');
            const avatarEl = document.getElementById('user-avatar');
            if (nameEl) {
                nameEl.textContent = user.first_name || user.username || user.email || '–ò–≥—Ä–æ–∫';
            }
            if (avatarEl) {
                avatarEl.textContent = (user.first_name || user.username || 'U').slice(0, 1).toUpperCase();
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∏–∑ /api/cards
        try {
            fetch('/api/cards')
                .then(r => r.json())
                .then(data => {
                    const market = Array.isArray(data?.marketCards) ? data.marketCards.length : 0;
                    const expense = Array.isArray(data?.expenseCards) ? data.expenseCards.length : 0;
                    const small = Array.isArray(data?.smallDeals) ? data.smallDeals.length : 0;
                    const big = Array.isArray(data?.bigDeals) ? data.bigDeals.length : 0;
                    const setText = (id, val) => { const el = document.getElementById(id); if (el) el.textContent = String(val); };
                    setText('marketCardCount', market);
                    setText('expenseCardCount', expense);
                    setText('smallDealCount', small);
                    setText('bigDealCount', big);
                })
                .catch(() => {});
        } catch (_) {}
    }
}

if (typeof window !== 'undefined') {
    window.GameModule = GameModule;
}

export default GameModule;
