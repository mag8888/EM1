/**
 * Player - –º–æ–¥—É–ª—å –∏–≥—Ä–æ–∫–æ–≤
 */
class Player {
    constructor(gameCore = null) {
        this.gameCore = gameCore;
        this.players = new Map();
        this.currentPlayer = null;
        this.eventBus = gameCore?.eventBus || null;
        this.state = gameCore?.state || null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üë§ Initializing Player module...');
        
        this.eventBus = window.gameCore?.eventBus;
        this.state = window.gameCore?.state;
        
        this.setupEvents();
        
        console.log('‚úÖ Player module initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        if (this.eventBus) {
            this.eventBus.on('playerJoined', this.onPlayerJoined.bind(this));
            this.eventBus.on('playerLeft', this.onPlayerLeft.bind(this));
            this.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
            this.eventBus.on('gameStarted', this.onGameStarted.bind(this));
            this.eventBus.on('gameStopped', this.onGameStopped.bind(this));
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    addPlayer(playerData) {
        const player = {
            id: playerData.id || this.generatePlayerId(),
            name: playerData.name || '–ò–≥—Ä–æ–∫',
            avatar: playerData.avatar || null,
            position: playerData.position || 0,
            balance: playerData.balance || 10000,
            token: playerData.token || null,
            dream: playerData.dream || null,
            isReady: playerData.isReady || false,
            isHost: playerData.isHost || false,
            stats: {
                turnsTaken: 0,
                diceRolled: 0,
                dealsBought: 0,
                dealsSkipped: 0,
                assetsSold: 0,
                incomeReceived: 0,
                expensesPaid: 0
            }
        };

        this.players.set(player.id, player);
        
        console.log(`üë§ Player added: ${player.name}`);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        if (this.eventBus) {
            this.eventBus.emit('playerAdded', player);
        }

        return player;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    removePlayer(playerId) {
        const player = this.players.get(playerId);
        if (player) {
            this.players.delete(playerId);
            
            console.log(`üë§ Player removed: ${player.name}`);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if (this.eventBus) {
                this.eventBus.emit('playerRemoved', player);
            }
        }
        return player;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     */
    getPlayer(playerId) {
        return this.players.get(playerId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    getAllPlayers() {
        return Array.from(this.players.values());
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    setCurrentPlayer(playerId) {
        const player = this.players.get(playerId);
        if (player) {
            this.currentPlayer = player;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (this.state) {
                this.state.setState('currentPlayer', player);
            }
            
            console.log(`üë§ Current player set: ${player.name}`);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if (this.eventBus) {
                this.eventBus.emit('currentPlayerChanged', player);
            }
        }
        return player;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        return this.currentPlayer;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    movePlayer(playerId, newPosition) {
        const player = this.players.get(playerId);
        if (player) {
            const oldPosition = player.position;
            player.position = newPosition;
            
            console.log(`üë§ Player ${player.name} moved from ${oldPosition} to ${newPosition}`);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if (this.eventBus) {
                this.eventBus.emit('playerMoved', player, oldPosition, newPosition);
            }
        }
        return player;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    updateBalance(playerId, amount, reason = '') {
        const player = this.players.get(playerId);
        if (player) {
            player.balance += amount;
            
            console.log(`üí∞ Player ${player.name} balance updated: ${amount} (${reason})`);
            
            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if (this.eventBus) {
                this.eventBus.emit('playerBalanceUpdated', player, amount, reason);
            }
        }
        return player;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏–≥—Ä–æ–∫–∞
     */
    generatePlayerId() {
        return 'player_' + Date.now() + '_' + Math.random().toString(36).slice(2, 8);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    onPlayerJoined(player) {
        console.log(`üë§ Player joined: ${player.name}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     */
    onPlayerLeft(player) {
        console.log(`üë§ Player left: ${player.name}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    onPlayerMoved(player, fromPosition, toPosition) {
        console.log(`üë§ Player ${player.name} moved from ${fromPosition} to ${toPosition}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
     */
    onGameStarted() {
        console.log('üéÆ Game started - initializing players');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
     */
    onGameStopped() {
        console.log('üõë Game stopped - clearing players');
        this.players.clear();
        this.currentPlayer = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.Player = Player;
