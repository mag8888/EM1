/**
 * Board - –º–æ–¥—É–ª—å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
 */
class Board {
    constructor(gameCore = null, containerId = 'gameBoardContainer') {
        this.gameCore = gameCore;
        this.containerId = containerId;
        this.cells = [];
        this.players = new Map(); // Map<playerId, playerElement>
        this.isInitialized = false;
        this.eventBus = gameCore?.eventBus || null;
        this.state = gameCore?.state || null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üéØ Initializing Board module...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.eventBus = this.gameCore?.eventBus;
        this.state = this.gameCore?.state;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –¥–æ—Å–∫–∏
        this.initializeCells();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.renderBoard();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.setupEvents();
        
        this.isInitialized = true;
        console.log('‚úÖ Board module initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫ –¥–æ—Å–∫–∏
     */
    initializeCells() {
        // –°–æ–∑–¥–∞–µ–º 76 —è—á–µ–µ–∫: 52 –≤–Ω–µ—à–Ω–∏–µ + 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
        this.cells = [];
        
        // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ (52 —è—á–µ–π–∫–∏)
        for (let i = 1; i <= 52; i++) {
            this.cells.push({
                id: i,
                type: this.getCellType(i),
                color: this.getCellColor(i),
                icon: this.getCellIcon(i),
                name: this.getCellName(i),
                description: this.getCellDescription(i),
                position: i,
                isSpecial: this.isSpecialCell(i),
                isStart: i === 1,
                isEnd: i === 52,
                isOuter: true,
                players: []
            });
        }
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (24 —è—á–µ–π–∫–∏)
        for (let i = 53; i <= 76; i++) {
            this.cells.push({
                id: i,
                type: this.getCellType(i),
                color: this.getCellColor(i),
                icon: this.getCellIcon(i),
                name: this.getCellName(i),
                description: this.getCellDescription(i),
                position: i,
                isSpecial: this.isSpecialCell(i),
                isStart: false,
                isEnd: false,
                isOuter: false,
                players: []
            });
        }
        
        console.log(`üéØ Initialized ${this.cells.length} board cells (52 outer + 24 inner)`);
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    renderBoard() {
        const container = document.getElementById(this.containerId);
        if (!container) {
            console.error(`‚ùå Container with ID "${this.containerId}" not found`);
            return;
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —è—á–µ–µ–∫
        this.createSpiralLayout(container);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –¥–æ—Å–∫–∏
        this.addBoardStyles();
        
        console.log('üéØ Board rendered on page');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö–∫—Ä—É–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —è—á–µ–µ–∫
     */
    createSpiralLayout(container) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å–∫–∏
        const boardContainer = document.createElement('div');
        boardContainer.className = 'board-container';
        
        // –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ (52 —è—á–µ–π–∫–∏)
        const outerCircle = document.createElement('div');
        outerCircle.className = 'outer-circle';
        
        // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (24 —è—á–µ–π–∫–∏)
        const innerCircle = document.createElement('div');
        innerCircle.className = 'inner-circle';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä—É–≥–∏
        this.cells.forEach(cell => {
            const cellElement = document.createElement('div');
            cellElement.className = `board-cell ${cell.type} ${cell.color}`;
            cellElement.dataset.cellId = cell.id;
            cellElement.innerHTML = `
                <div class="cell-number">${cell.id}</div>
                <div class="cell-icon">${cell.icon}</div>
                <div class="cell-name">${cell.name}</div>
                <div class="cell-players"></div>
            `;
            
            if (cell.isOuter) {
                outerCircle.appendChild(cellElement);
            } else {
                innerCircle.appendChild(cellElement);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const centerElement = document.createElement('div');
        centerElement.className = 'center-element';
        centerElement.innerHTML = `
            <div class="center-number">1</div>
        `;
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å–∫—É
        boardContainer.appendChild(outerCircle);
        boardContainer.appendChild(innerCircle);
        boardContainer.appendChild(centerElement);
        
        container.appendChild(boardContainer);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–π–∫–∏ –≤ —Å–ø–∏—Ä–∞–ª–∏
     */
    getSpiralPosition(cellId) {
        // –°–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–ª—å—Ü–∞ –∏ –∏–¥–µ–º –≤–Ω—É—Ç—Ä—å
        const positions = this.generateSpiralPositions();
        return positions[cellId - 1] || { x: 0, y: 0 };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–ø–∏—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
     */
    generateSpiralPositions() {
        const positions = [];
        const cellSize = 60;
        const spacing = 80;
        
        // –°–ø–∏—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–∞–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ —É–≥–ª–∞ (–°–¢–ê–†–¢) –∏ –∏–¥–µ–º –ø–æ —Å–ø–∏—Ä–∞–ª–∏ –∫ —Ü–µ–Ω—Ç—Ä—É
        
        // –í–Ω–µ—à–Ω–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä (—è—á–µ–π–∫–∏ 1-16) - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–∞–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ —É–≥–ª–∞
        const outerPositions = [
            { x: 580, y: 580 }, // 1 - –°–¢–ê–†–¢ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
            { x: 480, y: 580 }, // 2
            { x: 380, y: 580 }, // 3
            { x: 280, y: 580 }, // 4
            { x: 180, y: 580 }, // 5
            { x: 80, y: 580 },  // 6
            { x: 80, y: 480 },  // 7 - –ª–µ–≤—ã–π –∫—Ä–∞–π
            { x: 80, y: 380 },  // 8
            { x: 80, y: 280 },  // 9
            { x: 80, y: 180 },  // 10
            { x: 80, y: 80 },   // 11
            { x: 180, y: 80 },  // 12 - –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
            { x: 280, y: 80 },  // 13
            { x: 380, y: 80 },  // 14
            { x: 480, y: 80 },  // 15
            { x: 580, y: 80 },  // 16
        ];
        
        // –í—Ç–æ—Ä–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä (—è—á–µ–π–∫–∏ 17-28) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ø–∏—Ä–∞–ª—å
        const secondPositions = [
            { x: 580, y: 180 }, // 17 - –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            { x: 580, y: 280 }, // 18
            { x: 580, y: 380 }, // 19
            { x: 580, y: 480 }, // 20
            { x: 480, y: 480 }, // 21 - –ø–æ–≤–æ—Ä–æ—Ç –≤–Ω—É—Ç—Ä—å
            { x: 380, y: 480 }, // 22
            { x: 280, y: 480 }, // 23
            { x: 180, y: 480 }, // 24
            { x: 180, y: 380 }, // 25 - –ª–µ–≤—ã–π –∫—Ä–∞–π
            { x: 180, y: 280 }, // 26
            { x: 180, y: 180 }, // 27
            { x: 280, y: 180 }, // 28 - –ø–æ–≤–æ—Ä–æ—Ç –≤–Ω—É—Ç—Ä—å
        ];
        
        // –¢—Ä–µ—Ç–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä (—è—á–µ–π–∫–∏ 29-36) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ø–∏—Ä–∞–ª—å
        const thirdPositions = [
            { x: 380, y: 180 }, // 29
            { x: 480, y: 180 }, // 30
            { x: 480, y: 280 }, // 31 - –ø–æ–≤–æ—Ä–æ—Ç
            { x: 480, y: 380 }, // 32
            { x: 380, y: 380 }, // 33 - –ø–æ–≤–æ—Ä–æ—Ç –≤–Ω—É—Ç—Ä—å
            { x: 280, y: 380 }, // 34
            { x: 280, y: 280 }, // 35 - –ø–æ–≤–æ—Ä–æ—Ç
            { x: 380, y: 280 }, // 36
        ];
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä (—è—á–µ–π–∫–∏ 37-44) - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–∏—Ä–∞–ª—å –∫ —Ü–µ–Ω—Ç—Ä—É
        const innerPositions = [
            { x: 330, y: 230 }, // 37
            { x: 430, y: 230 }, // 38
            { x: 430, y: 330 }, // 39 - –ø–æ–≤–æ—Ä–æ—Ç
            { x: 430, y: 430 }, // 40
            { x: 330, y: 430 }, // 41 - –ø–æ–≤–æ—Ä–æ—Ç –≤–Ω—É—Ç—Ä—å
            { x: 230, y: 430 }, // 42
            { x: 230, y: 330 }, // 43 - –ø–æ–≤–æ—Ä–æ—Ç
            { x: 330, y: 330 }, // 44 - –§–ò–ù–ò–® (—Ü–µ–Ω—Ç—Ä)
        ];
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        positions.push(...outerPositions);
        positions.push(...secondPositions);
        positions.push(...thirdPositions);
        positions.push(...innerPositions);
        
        return positions;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ—Å–∫–∏
     */
    addBoardStyles() {
        if (document.getElementById('board-styles')) return;

        const style = document.createElement('style');
        style.id = 'board-styles';
        style.textContent = `
            .board-container {
                position: relative;
                width: 800px;
                height: 800px;
                margin: 0 auto;
                background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
                border-radius: 50%;
            }

            .outer-circle {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border-radius: 50%;
                display: grid;
                grid-template-columns: repeat(8, 1fr);
                grid-template-rows: repeat(8, 1fr);
                gap: 8px;
                padding: 20px;
            }

            .inner-circle {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 400px;
                height: 400px;
                border-radius: 50%;
                display: grid;
                grid-template-columns: repeat(6, 1fr);
                grid-template-rows: repeat(6, 1fr);
                gap: 6px;
                padding: 15px;
            }

            .board-cell {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                border: 2px solid rgba(255, 255, 255, 0.2);
                border-radius: 20px;
                background: rgba(255, 255, 255, 0.05);
                backdrop-filter: blur(10px);
                transition: all 0.3s ease;
                cursor: pointer;
                z-index: 1;
            }

            .outer-circle .board-cell {
                width: 100px;
                height: 100px;
            }

            .inner-circle .board-cell {
                width: 80px;
                height: 80px;
            }

            .board-cell:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
                border-color: rgba(255, 255, 255, 0.4);
            }

            .board-cell.start {
                background: linear-gradient(135deg, #ffd700, #ffed4e);
                color: #000;
                font-weight: bold;
            }

            .board-cell.dream {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: #fff;
            }

            .board-cell.regular {
                background: rgba(255, 255, 255, 0.1);
                color: #fff;
            }

            .cell-number {
                font-size: 12px;
                font-weight: bold;
                margin-bottom: 2px;
            }

            .cell-icon {
                font-size: 18px;
                margin-bottom: 2px;
            }

            .cell-name {
                font-size: 10px;
                text-align: center;
                line-height: 1.2;
                max-width: 100%;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .cell-players {
                position: absolute;
                top: 2px;
                right: 2px;
                display: flex;
                gap: 2px;
            }

            .player-token {
                width: 16px;
                height: 16px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                font-weight: bold;
                color: white;
                border: 2px solid rgba(255, 255, 255, 0.8);
            }

            /* –¶–≤–µ—Ç–∞ —è—á–µ–µ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó */
            .board-cell.green { background: #31D281; color: #fff; }
            .board-cell.blue { background: #4B7CFF; color: #fff; }
            .board-cell.pink { background: #F23E77; color: #fff; }
            .board-cell.purple { background: #A259FF; color: #fff; }
            .board-cell.yellow { background: #FFD966; color: #000; }
            .board-cell.orange { background: #FF9F43; color: #fff; }
            .board-cell.red { background: #FF3838; color: #fff; }
            .board-cell.teal { background: #20BF6B; color: #fff; }

            .center-element {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 80px;
                height: 80px;
                background: linear-gradient(135deg, #ffd700, #ffed4e);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
                z-index: 10;
            }

            .center-number {
                font-size: 32px;
                font-weight: bold;
                color: #000;
                text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            }
        `;

        document.head.appendChild(style);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        if (this.eventBus) {
            this.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
            this.eventBus.on('playerAdded', this.onPlayerAdded.bind(this));
            this.eventBus.on('playerRemoved', this.onPlayerRemoved.bind(this));
            this.eventBus.on('gameStateUpdated', this.onGameStateUpdated.bind(this));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —è—á–µ–π–∫–∞–º
        const container = document.getElementById(this.containerId);
        if (container) {
            container.addEventListener('click', this.onCellClick.bind(this));
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
     */
    onCellClick(event) {
        const cellElement = event.target.closest('.board-cell');
        if (cellElement) {
            const cellId = parseInt(cellElement.dataset.cellId);
            const cell = this.cells.find(c => c.id === cellId);
            
            if (cell) {
                console.log(`üéØ Cell clicked: ${cell.name} (${cellId})`);
                
                if (this.eventBus) {
                    this.eventBus.emit('cellClicked', { cell, cellId });
                }
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    onPlayerMoved(data) {
        const { playerId, newPosition } = data;
        this.movePlayerToken(playerId, newPosition);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    onPlayerAdded(data) {
        const { player } = data;
        this.addPlayerToken(player);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    onPlayerRemoved(data) {
        const { player } = data;
        this.removePlayerToken(player.id);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    onGameStateUpdated(gameState) {
        console.log('üîÑ Updating board with new game state:', gameState);
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
        if (gameState.players) {
            gameState.players.forEach(player => {
                this.updatePlayerPosition(player);
            });
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     */
    addPlayerToken(player) {
        if (this.players.has(player.id)) return;

        const playerToken = document.createElement('div');
        playerToken.className = 'player-token';
        playerToken.dataset.playerId = player.id;
        playerToken.textContent = player.name.charAt(0).toUpperCase();
        playerToken.style.backgroundColor = this.getPlayerColor(player.id);

        this.players.set(player.id, playerToken);
        this.movePlayerToken(player.id, player.position || 0);
        
        console.log(`‚ûï Player token added: ${player.name}`);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     */
    removePlayerToken(playerId) {
        const playerToken = this.players.get(playerId);
        if (playerToken && playerToken.parentNode) {
            playerToken.parentNode.removeChild(playerToken);
            this.players.delete(playerId);
            console.log(`‚ûñ Player token removed: ${playerId}`);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     */
    movePlayerToken(playerId, newPosition) {
        const playerToken = this.players.get(playerId);
        if (!playerToken) return;

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏
        const currentCell = playerToken.parentNode;
        if (currentCell && currentCell.classList.contains('cell-players')) {
            currentCell.removeChild(playerToken);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –Ω–æ–≤—É—é —è—á–µ–π–∫—É
        const targetCell = document.querySelector(`[data-cell-id="${newPosition + 1}"]`);
        if (targetCell) {
            const playersContainer = targetCell.querySelector('.cell-players');
            if (playersContainer) {
                playersContainer.appendChild(playerToken);
                console.log(`‚û°Ô∏è Player ${playerId} moved to cell ${newPosition + 1}`);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerPosition(player) {
        if (this.players.has(player.id)) {
            this.movePlayerToken(player.id, player.position || 0);
        } else {
            this.addPlayerToken(player);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerColor(playerId) {
        const colors = ['#FF6B6B', '#4ECDC4', '#4F86F7', '#FFC107', '#9C27B0', '#00BCD4', '#8BC34A', '#FF9800'];
        let hash = 0;
        for (let i = 0; i < playerId.length; i++) {
            hash = playerId.charCodeAt(i) + ((hash << 5) - hash);
        }
        const colorIndex = Math.abs(hash) % colors.length;
        return colors[colorIndex];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —è—á–µ–π–∫–∏
     */
    getCellType(cellId) {
        const types = {
            1: 'start',
            2: 'dream', 6: 'dream', 14: 'dream', 16: 'dream', 20: 'dream',
            22: 'dream', 26: 'dream', 27: 'dream', 28: 'dream', 30: 'dream',
            32: 'dream', 36: 'dream', 38: 'dream', 40: 'dream', 42: 'dream', 44: 'dream'
        };
        return types[cellId] || 'regular';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏
     */
    getCellColor(cellId) {
        // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è 76 —è—á–µ–µ–∫
        const colorCycle = ['green', 'blue', 'pink', 'purple', 'yellow', 'orange', 'red', 'teal'];
        const colorIndex = (cellId - 1) % colorCycle.length;
        return colorCycle[colorIndex];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —è—á–µ–π–∫–∏
     */
    getCellIcon(cellId) {
        // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è 76 —è—á–µ–µ–∫
        const iconCycle = [
            'üè†', 'üöó', 'üí°', 'üìà', 'üíº', 'üõçÔ∏è', 'üéØ', '‚ù§Ô∏è',
            'üêº', 'üê∏', 'ü¶â', 'üê±', 'üåü', '‚ö°', 'üé≤', 'üé™',
            'üé®', 'üîÆ', 'üé≠', 'üéµ', 'üé¨', 'üéÆ', 'üìö', 'üåç',
            'üöÄ', '‚≠ê', 'üí∞', 'üèÜ', 'üíé', 'üéÅ', 'üîë', '‚öôÔ∏è'
        ];
        const iconIndex = (cellId - 1) % iconCycle.length;
        return iconCycle[iconIndex];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
     */
    getCellName(cellId) {
        if (cellId === 1) return '–°–¢–ê–†–¢';
        if (cellId === 52) return '–§–ò–ù–ò–®';
        if (cellId <= 52) return `–ö–ª–µ—Ç–∫–∞ ${cellId}`;
        return `–í–Ω—É—Ç—Ä. ${cellId - 52}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —è—á–µ–π–∫–∏
     */
    getCellDescription(cellId) {
        const descriptions = {
            1: '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã',
            2: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 6: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 14: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É',
            16: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 20: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 22: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É',
            26: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 27: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 28: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É',
            30: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 32: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É', 36: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É',
            38: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–π –º–µ—á—Ç—É', 40: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–π –º–µ—á—Ç—É', 42: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–π –º–µ—á—Ç—É', 44: '–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã'
        };
        return descriptions[cellId] || '–û–±—ã—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏
     */
    isSpecialCell(cellId) {
        return [1, 2, 6, 14, 16, 20, 22, 26, 27, 28, 30, 32, 36, 38, 40, 42, 44].includes(cellId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø–æ ID
     */
    getCell(cellId) {
        return this.cells.find(cell => cell.id === cellId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫
     */
    getAllCells() {
        return this.cells;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–æ—Å–∫–∏
     */
    clearBoard() {
        this.players.clear();
        const container = document.getElementById(this.containerId);
        if (container) {
            container.innerHTML = '';
        }
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–∫–∏
     */
    redraw() {
        this.renderBoard();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.Board = Board;