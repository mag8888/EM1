/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ (–ª–µ—Ç–æ–∫) –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–µ—Ç–∫–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
 */

export class CellGenerator {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.cells = [];
        this.cellTypes = {
            PAYDAY: 'payday',
            CHARITY: 'charity', 
            OPPORTUNITY: 'opportunity',
            EXPENSE: 'expense',
            MARKET: 'market',
            DREAM: 'dream',
            NEUTRAL: 'neutral'
        };
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–ª–µ—Ç–æ–∫
     */
    async init() {
        console.log('üéØ CellGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('gameStarted', this.onGameStarted.bind(this));
        this.gameCore.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –∫–ª–µ—Ç–∫–∞–º–∏
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—è
     */
    generateGameBoard(config = {}) {
        const boardConfig = {
            totalCells: 40,
            paydayPositions: [0, 10, 20, 30], // –ü–æ–∑–∏—Ü–∏–∏ PAYDAY
            charityPositions: [5, 15, 25, 35], // –ü–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            opportunityPositions: [2, 7, 12, 17, 22, 27, 32, 37], // –ü–æ–∑–∏—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            expensePositions: [3, 8, 13, 18, 23, 28, 33, 38], // –ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            marketPositions: [1, 6, 11, 16, 21, 26, 31, 36], // –ü–æ–∑–∏—Ü–∏–∏ —Ä—ã–Ω–∫–∞
            dreamPositions: [4, 9, 14, 19, 24, 29, 34, 39], // –ü–æ–∑–∏—Ü–∏–∏ –º–µ—á—Ç
            ...config
        };

        this.cells = [];
        
        for (let i = 0; i < boardConfig.totalCells; i++) {
            const cell = this.generateCell(i, boardConfig);
            this.cells.push(cell);
        }

        console.log(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${this.cells.length} –∫–ª–µ—Ç–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è`);
        this.gameCore.eventBus.emit('boardGenerated', { cells: this.cells });
        
        return this.cells;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –∫–ª–µ—Ç–∫–∏
     * @param {Object} boardConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—è
     */
    generateCell(position, boardConfig) {
        const cellType = this.determineCellType(position, boardConfig);
        const cellData = this.getCellData(cellType, position);
        
        return {
            id: `cell_${position}`,
            position: position,
            type: cellType,
            name: cellData.name,
            description: cellData.description,
            icon: cellData.icon,
            color: cellData.color,
            effects: cellData.effects,
            actions: cellData.actions,
            cost: cellData.cost || 0,
            income: cellData.income || 0,
            generatedAt: Date.now()
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {Object} boardConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—è
     */
    determineCellType(position, boardConfig) {
        if (boardConfig.paydayPositions.includes(position)) {
            return this.cellTypes.PAYDAY;
        }
        if (boardConfig.charityPositions.includes(position)) {
            return this.cellTypes.CHARITY;
        }
        if (boardConfig.opportunityPositions.includes(position)) {
            return this.cellTypes.OPPORTUNITY;
        }
        if (boardConfig.expensePositions.includes(position)) {
            return this.cellTypes.EXPENSE;
        }
        if (boardConfig.marketPositions.includes(position)) {
            return this.cellTypes.MARKET;
        }
        if (boardConfig.dreamPositions.includes(position)) {
            return this.cellTypes.DREAM;
        }
        return this.cellTypes.NEUTRAL;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–∫–∏ –ø–æ —Ç–∏–ø—É
     * @param {string} cellType - –¢–∏–ø –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     */
    getCellData(cellType, position) {
        const cellTemplates = {
            [this.cellTypes.PAYDAY]: {
                name: 'PAYDAY',
                description: '–ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã',
                icon: 'üí∞',
                color: '#00ff96',
                effects: {
                    payday: true,
                    income: 2000
                },
                actions: ['payday', 'payExpenses']
            },
            [this.cellTypes.CHARITY]: {
                name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                description: '–ü–æ–º–æ–≥–∏—Ç–µ –Ω—É–∂–¥–∞—é—â–∏–º—Å—è (10% –æ—Ç –¥–æ—Ö–æ–¥–∞)',
                icon: '‚ù§Ô∏è',
                color: '#ff69b4',
                effects: {
                    charity: true,
                    karma: true
                },
                actions: ['charity', 'skip']
            },
            [this.cellTypes.OPPORTUNITY]: {
                name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
                icon: 'üéØ',
                color: '#ffd65a',
                effects: {
                    opportunity: true
                },
                actions: ['drawCard', 'invest', 'skip']
            },
            [this.cellTypes.EXPENSE]: {
                name: '–†–∞—Å—Ö–æ–¥—ã',
                description: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                icon: 'üí∏',
                color: '#ff3b3b',
                effects: {
                    expense: true
                },
                actions: ['drawCard', 'pay', 'skip']
            },
            [this.cellTypes.MARKET]: {
                name: '–†—ã–Ω–æ–∫',
                description: '–¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∞–º–∏',
                icon: 'üìà',
                color: '#4ecdc4',
                effects: {
                    market: true
                },
                actions: ['buy', 'sell', 'trade']
            },
            [this.cellTypes.DREAM]: {
                name: '–ú–µ—á—Ç–∞',
                description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–∞—à–µ–π –º–µ—á—Ç—ã',
                icon: 'üåü',
                color: '#ff6b6b',
                effects: {
                    dream: true
                },
                actions: ['achieveDream', 'skip']
            },
            [this.cellTypes.NEUTRAL]: {
                name: '–û–±—ã—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞',
                description: '–ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç',
                icon: '‚ö™',
                color: '#6b7280',
                effects: {},
                actions: ['skip']
            }
        };

        const template = cellTemplates[cellType] || cellTemplates[this.cellTypes.NEUTRAL];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
        return this.addVariation(template, position);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ –∫–ª–µ—Ç–∫–µ
     * @param {Object} template - –®–∞–±–ª–æ–Ω –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     */
    addVariation(template, position) {
        const variations = {
            [this.cellTypes.OPPORTUNITY]: [
                { name: '–ú–∞–ª–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', cost: 5000, income: 500 },
                { name: '–°—Ä–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', cost: 15000, income: 1500 },
                { name: '–ë–æ–ª—å—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', cost: 50000, income: 5000 }
            ],
            [this.cellTypes.EXPENSE]: [
                { name: '–ú–∞–ª—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', cost: 2000 },
                { name: '–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', cost: 8000 },
                { name: '–ë–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', cost: 25000 }
            ],
            [this.cellTypes.MARKET]: [
                { name: '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π', description: '–¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ü–∏—è–º–∏' },
                { name: '–†—ã–Ω–æ–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', description: '–¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é' },
                { name: '–†—ã–Ω–æ–∫ –±–∏–∑–Ω–µ—Å–∞', description: '–¢–æ—Ä–≥–æ–≤–ª—è –±–∏–∑–Ω–µ—Å–æ–º' }
            ],
            [this.cellTypes.DREAM]: [
                { name: '–î–æ–º –º–µ—á—Ç—ã', cost: 100000 },
                { name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–µ—á—Ç—ã', cost: 50000 },
                { name: '–ë–∏–∑–Ω–µ—Å –º–µ—á—Ç—ã', cost: 200000 }
            ]
        };

        const cellVariations = variations[template.type];
        if (cellVariations) {
            const variation = cellVariations[position % cellVariations.length];
            return {
                ...template,
                ...variation,
                variationIndex: position % cellVariations.length
            };
        }

        return template;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –∫–ª–µ—Ç–∫–∏
     */
    getCell(position) {
        if (position < 0 || position >= this.cells.length) {
            return null;
        }
        return this.cells[position];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     * @param {string} type - –¢–∏–ø –∫–ª–µ—Ç–∫–∏
     */
    getCellsByType(type) {
        return this.cells.filter(cell => cell.type === type);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} position - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {number} radius - –†–∞–¥–∏—É—Å
     */
    getCellsInRadius(position, radius = 2) {
        const cells = [];
        const totalCells = this.cells.length;
        
        for (let i = -radius; i <= radius; i++) {
            const cellPosition = (position + i + totalCells) % totalCells;
            const cell = this.getCell(cellPosition);
            if (cell) {
                cells.push({
                    ...cell,
                    distance: Math.abs(i)
                });
            }
        }
        
        return cells.sort((a, b) => a.distance - b.distance);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–µ—Ç–æ–∫
     */
    getCellsStats() {
        const stats = {
            total: this.cells.length,
            byType: {},
            byColor: {},
            totalCost: 0,
            totalIncome: 0
        };

        this.cells.forEach(cell => {
            // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
            stats.byType[cell.type] = (stats.byType[cell.type] || 0) + 1;
            
            // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ü–≤–µ—Ç–∞–º
            stats.byColor[cell.color] = (stats.byColor[cell.color] || 0) + 1;
            
            // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –¥–æ—Ö–æ–¥–∞
            stats.totalCost += cell.cost || 0;
            stats.totalIncome += cell.income || 0;
        });

        return stats;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –∫–ª–µ—Ç–∫–∏
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateCell(position, updates) {
        if (position < 0 || position >= this.cells.length) {
            return false;
        }

        const cell = this.cells[position];
        Object.assign(cell, updates, { updatedAt: Date.now() });
        
        this.gameCore.eventBus.emit('cellUpdated', { cell, position });
        return true;
    }

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
     */
    resetCells() {
        this.cells.forEach(cell => {
            cell.resetAt = Date.now();
        });
        
        this.gameCore.eventBus.emit('cellsReset', { cells: this.cells });
        console.log('üéØ –í—Å–µ –∫–ª–µ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–µ
     */
    getBoardInfo() {
        return {
            totalCells: this.cells.length,
            cellTypes: Object.keys(this.cellTypes),
            stats: this.getCellsStats(),
            generatedAt: this.cells[0]?.generatedAt || Date.now()
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onGameStarted(data) {
        console.log('üéØ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è...');
        this.generateGameBoard();
    }

    onPlayerMoved(data) {
        const cell = this.getCell(data.to);
        if (cell) {
            this.gameCore.eventBus.emit('playerLandedOnCell', {
                player: data.playerId,
                cell,
                position: data.to
            });
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    destroy() {
        this.cells = [];
        this.isDestroyed = true;
        console.log('üóëÔ∏è CellGenerator —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default CellGenerator;
