// –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø-–∞–ø–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–ª–µ—Ç–æ–∫
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∫–æ–Ω–æ–∫ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–∞—Ö

class CellPopup {
    constructor() {
        this.currentPopup = null;
        this.iconStyle = localStorage.getItem('iconStyle') || 'emoji';
        this.init();
    }

    init() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ø-–∞–ø–æ–≤
        this.createPopupContainer();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.addEventListeners();
    }

    createPopupContainer() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existing = document.getElementById('cell-popup-container');
        if (existing) {
            existing.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.createElement('div');
        container.id = 'cell-popup-container';
        container.style.display = 'none';
        document.body.appendChild(container);
    }

    addEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('cell-popup-overlay')) {
                this.close();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.currentPopup) {
                this.close();
            }
        });
    }

    show(cellData) {
        if (!cellData) return;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ø-–∞–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
        this.close();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ø-–∞–ø
        const popup = this.createPopup(cellData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
        const container = document.getElementById('cell-popup-container');
        container.innerHTML = '';
        container.appendChild(popup);
        container.style.display = 'block';
        
        this.currentPopup = popup;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            popup.style.opacity = '1';
            popup.style.transform = 'translate(-50%, -50%) scale(1)';
        }, 10);
    }

    createPopup(cellData) {
        const overlay = document.createElement('div');
        overlay.className = 'cell-popup-overlay';

        const popup = document.createElement('div');
        popup.className = `cell-popup ${cellData.type}`;
        popup.style.opacity = '0';
        popup.style.transform = 'translate(-50%, -50%) scale(0.8)';
        popup.style.transition = 'all 0.3s ease';

        // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∏–ª–µ
        const icon = this.getIconForType(cellData.type);
        const iconClass = this.getIconStyleClass();

        popup.innerHTML = `
            <div class="cell-popup-header">
                <div class="cell-popup-icon ${iconClass}">${icon}</div>
                <div>
                    <h3 class="cell-popup-title">${cellData.name}</h3>
                    <div class="cell-popup-type">${this.getTypeDisplayName(cellData.type)}</div>
                </div>
            </div>
            
            <div class="cell-popup-description">
                ${cellData.description}
            </div>
            
            ${this.createDetailsSection(cellData)}
            
            <div class="cell-popup-actions">
                <button class="cell-popup-close" onclick="window.cellPopup.close()">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;

        overlay.appendChild(popup);
        return overlay;
    }

    createDetailsSection(cellData) {
        const details = [];
        
        if (cellData.minCost && cellData.maxCost) {
            details.push({
                label: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                value: `$${cellData.minCost.toLocaleString()} - $${cellData.maxCost.toLocaleString()}`
            });
        } else if (cellData.cost) {
            details.push({
                label: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                value: `$${cellData.cost.toLocaleString()}`
            });
        }

        if (cellData.percentage) {
            details.push({
                label: '–ü—Ä–æ—Ü–µ–Ω—Ç',
                value: `${(cellData.percentage * 100).toFixed(1)}%`
            });
        }

        if (cellData.benefit) {
            details.push({
                label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ',
                value: this.getBenefitDisplayName(cellData.benefit)
            });
        }

        if (details.length === 0) {
            return '';
        }

        const detailsHtml = details.map(detail => `
            <div class="cell-popup-detail">
                <span class="cell-popup-detail-label">${detail.label}:</span>
                <span class="cell-popup-detail-value">${detail.value}</span>
            </div>
        `).join('');

        return `
            <div class="cell-popup-details">
                ${detailsHtml}
            </div>
        `;
    }

    getIconForType(type) {
        if (typeof getIconForType === 'function') {
            return getIconForType(type, this.iconStyle);
        }
        // Fallback –∫ —ç–º–æ–¥–∑–∏
        const emojiIcons = {
            'green_opportunity': 'üíö',
            'pink_expense': 'üõí',
            'orange_charity': '‚ù§Ô∏è',
            'blue_dividend': 'üí∞',
            'purple_business': 'üè™',
            'yellow_baby': 'üë∂',
            'red_downsize': 'üí∏'
        };
        return emojiIcons[type] || '‚¨§';
    }

    getIconStyleClass() {
        if (typeof getIconStyleClass === 'function') {
            return getIconStyleClass(this.iconStyle);
        }
        return '';
    }

    getTypeDisplayName(type) {
        const typeNames = {
            'green_opportunity': '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
            'pink_expense': '–†–æ–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            'orange_charity': '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            'blue_dividend': '–î–∏–≤–∏–¥–µ–Ω–¥—ã',
            'purple_business': '–ë–∏–∑–Ω–µ—Å',
            'yellow_baby': '–°–µ–º—å—è',
            'red_downsize': '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ'
        };
        return typeNames[type] || '–ö–ª–µ—Ç–∫–∞';
    }

    getBenefitDisplayName(benefit) {
        const benefitNames = {
            'double_dice': '–î–≤–æ–π–Ω–æ–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞',
            'extra_turn': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥',
            'bonus_money': '–ë–æ–Ω—É—Å–Ω—ã–µ –¥–µ–Ω—å–≥–∏'
        };
        return benefitNames[benefit] || benefit;
    }

    close() {
        if (this.currentPopup) {
            // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
            this.currentPopup.style.opacity = '0';
            this.currentPopup.style.transform = 'translate(-50%, -50%) scale(0.8)';

            setTimeout(() => {
                const container = document.getElementById('cell-popup-container');
                if (container) {
                    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ,
                    // —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —Ç—ë–º–Ω—É—é –º–∞—Å–∫—É
                    container.innerHTML = '';
                    container.style.display = 'none';
                }

                // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –æ–≤–µ—Ä–ª–µ–∏
                document.querySelectorAll('.cell-popup-overlay').forEach(el => {
                    if (el && el.parentElement) {
                        el.parentElement.removeChild(el);
                    }
                });

                this.currentPopup = null;
            }, 300);
        }
    }

    setIconStyle(style) {
        this.iconStyle = style;
        localStorage.setItem('iconStyle', style);
    }

    getAvailableStyles() {
        if (typeof ICON_STYLES !== 'undefined') {
            return Object.keys(ICON_STYLES).map(key => ({
                key,
                ...ICON_STYLES[key]
            }));
        }
        return [
            { key: 'emoji', name: '–≠–º–æ–¥–∑–∏', description: '–¶–≤–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏' }
        ];
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (typeof window !== 'undefined') {
    window.cellPopup = new CellPopup();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CellPopup;
}
