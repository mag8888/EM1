// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –∏–≥—Ä—ã
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∞–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏

class ProfessionManager {
    constructor() {
        this.professions = [];
        this.initializeProfessions();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    initializeProfessions() {
        console.log('üíº ProfessionManager: Initializing professions...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ professions-data.js
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ window.PROFESSIONS, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (typeof window !== 'undefined' && window.PROFESSIONS && window.PROFESSIONS.length > 0) {
            console.log('üíº ProfessionManager: Using window.PROFESSIONS data');
            this.professions = window.PROFESSIONS.map(prof => ({
                id: prof.id,
                name: prof.name,
                description: prof.description,
                icon: prof.icon,
                salary: prof.salary,
                expenses: prof.expenses,
                cashFlow: prof.cashFlow,
                taxes: { amount: Math.round(prof.salary * 0.13), percentage: 13 },
                otherExpenses: Math.round(prof.expenses * 0.3),
                debts: this.generateDebts(prof.cashFlow),
                totalDebt: this.calculateTotalDebt(prof.cashFlow),
                difficulty: this.getDifficulty(prof.cashFlow),
                category: this.getCategory(prof.name)
            }));
        } else {
            console.log('üíº ProfessionManager: Using fallback data');
            // Fallback –¥–∞–Ω–Ω—ã–µ
            this.professions = [
            {
                id: 'entrepreneur',
                name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
                description: '–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞',
                icon: 'üöÄ',
                salary: 10000,
                expenses: 6200,
                cashFlow: 3800,
                taxes: { amount: 1300, percentage: 13 },
                otherExpenses: 1500,
                debts: [
                    { name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ', monthly: 700, principal: 14000 },
                    { name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', monthly: 500, principal: 10000 },
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 1200, principal: 240000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 1000, principal: 20000 }
                ],
                totalDebt: 284000,
                difficulty: '–°–ª–æ–∂–Ω—ã–π',
                category: 'Business'
            },
            {
                id: 'engineer',
                name: '–ò–Ω–∂–µ–Ω–µ—Ä',
                description: '–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
                icon: '‚öôÔ∏è',
                salary: 8000,
                expenses: 4500,
                cashFlow: 3500,
                taxes: { amount: 1040, percentage: 13 },
                otherExpenses: 1200,
                debts: [
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 800, principal: 160000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ', monthly: 400, principal: 8000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 300, principal: 6000 }
                ],
                totalDebt: 174000,
                difficulty: '–°—Ä–µ–¥–Ω–∏–π',
                category: 'Technical'
            },
            {
                id: 'teacher',
                name: '–£—á–∏—Ç–µ–ª—å',
                description: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —à–∫–æ–ª–µ',
                icon: 'üìö',
                salary: 4000,
                expenses: 3200,
                cashFlow: 800,
                taxes: { amount: 520, percentage: 13 },
                otherExpenses: 800,
                debts: [
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 600, principal: 120000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 200, principal: 4000 }
                ],
                totalDebt: 124000,
                difficulty: '–õ–µ–≥–∫–∏–π',
                category: 'Education'
            },
            {
                id: 'doctor',
                name: '–í—Ä–∞—á',
                description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
                icon: 'üë®‚Äç‚öïÔ∏è',
                salary: 12000,
                expenses: 7500,
                cashFlow: 4500,
                taxes: { amount: 1560, percentage: 13 },
                otherExpenses: 2000,
                debts: [
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 1000, principal: 200000 },
                    { name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', monthly: 800, principal: 16000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ', monthly: 500, principal: 10000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 400, principal: 8000 }
                ],
                totalDebt: 234000,
                difficulty: '–°–ª–æ–∂–Ω—ã–π',
                category: 'Medical'
            },
            {
                id: 'nurse',
                name: '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞',
                description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫',
                icon: 'üë©‚Äç‚öïÔ∏è',
                salary: 3500,
                expenses: 2800,
                cashFlow: 700,
                taxes: { amount: 455, percentage: 13 },
                otherExpenses: 600,
                debts: [
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 500, principal: 100000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 150, principal: 3000 }
                ],
                totalDebt: 103000,
                difficulty: '–õ–µ–≥–∫–∏–π',
                category: 'Medical'
            },
            {
                id: 'lawyer',
                name: '–Æ—Ä–∏—Å—Ç',
                description: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
                icon: '‚öñÔ∏è',
                salary: 9000,
                expenses: 5500,
                cashFlow: 3500,
                taxes: { amount: 1170, percentage: 13 },
                otherExpenses: 1500,
                debts: [
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', monthly: 900, principal: 180000 },
                    { name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', monthly: 600, principal: 12000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ', monthly: 450, principal: 9000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', monthly: 350, principal: 7000 }
                ],
                totalDebt: 208000,
                difficulty: '–°–ª–æ–∂–Ω—ã–π',
                category: 'Legal'
            }
        ];
        
        console.log('‚úÖ ProfessionManager: Professions initialized', this.professions.length);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    getAllProfessions() {
        return this.professions;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ ID
    getProfessionById(id) {
        return this.professions.find(prof => prof.id === id);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    getRandomProfession() {
        const randomIndex = Math.floor(Math.random() * this.professions.length);
        return this.professions[randomIndex];
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getProfessionsByDifficulty(difficulty) {
        return this.professions.filter(prof => prof.difficulty === difficulty);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getProfessionsByCategory(category) {
        return this.professions.filter(prof => prof.category === category);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    generateDebts(cashFlow) {
        const debts = [];
        
        // –ò–ø–æ—Ç–µ–∫–∞ (–µ—Å–ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç)
        if (cashFlow > 2000) {
            debts.push({
                name: '–ò–ø–æ—Ç–µ–∫–∞',
                monthly: Math.round(cashFlow * 0.3),
                principal: Math.round(cashFlow * 0.3 * 240)
            });
        }
        
        // –ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ
        if (cashFlow > 1000) {
            debts.push({
                name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ',
                monthly: Math.round(cashFlow * 0.2),
                principal: Math.round(cashFlow * 0.2 * 60)
            });
        }
        
        // –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        if (cashFlow > 500) {
            debts.push({
                name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç',
                monthly: Math.round(cashFlow * 0.15),
                principal: Math.round(cashFlow * 0.15 * 60)
            });
        }
        
        // –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
        debts.push({
            name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã',
            monthly: Math.round(cashFlow * 0.1),
            principal: Math.round(cashFlow * 0.1 * 24)
        });
        
        return debts;
    }

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞
    calculateTotalDebt(cashFlow) {
        const debts = this.generateDebts(cashFlow);
        return debts.reduce((total, debt) => total + debt.principal, 0);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    getDifficulty(cashFlow) {
        if (cashFlow > 3000) return '–õ–µ–≥–∫–∏–π';
        if (cashFlow > 2000) return '–°—Ä–µ–¥–Ω–∏–π';
        return '–°–ª–æ–∂–Ω—ã–π';
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    getCategory(name) {
        const categories = {
            '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å': 'Business',
            '–í—Ä–∞—á': 'Medical',
            '–ò–Ω–∂–µ–Ω–µ—Ä': 'Technical',
            '–£—á–∏—Ç–µ–ª—å': 'Education',
            '–Æ—Ä–∏—Å—Ç': 'Legal',
            '–•—É–¥–æ–∂–Ω–∏–∫': 'Creative'
        };
        return categories[name] || 'General';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProfessionManager;
} else if (typeof window !== 'undefined') {
    window.ProfessionManager = ProfessionManager;
}
