/**
 * Dice - –º–æ–¥—É–ª—å –∫—É–±–∏–∫–æ–≤
 */
class Dice {
    constructor() {
        this.currentRoll = null;
        this.rollHistory = [];
        this.eventBus = null;
        this.state = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üé≤ Initializing Dice module...');
        
        this.eventBus = window.gameCore?.eventBus;
        this.state = window.gameCore?.state;
        
        this.setupEvents();
        
        console.log('‚úÖ Dice module initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    setupEvents() {
        if (this.eventBus) {
            this.eventBus.on('rollDice', this.roll.bind(this));
            this.eventBus.on('gameStarted', this.onGameStarted.bind(this));
            this.eventBus.on('gameStopped', this.onGameStopped.bind(this));
        }
    }

    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     */
    roll() {
        const result = Math.floor(Math.random() * 6) + 1;
        this.currentRoll = result;
        this.rollHistory.push({
            value: result,
            timestamp: Date.now()
        });

        console.log(`üé≤ Rolled: ${result}`);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        if (this.eventBus) {
            this.eventBus.emit('diceRolled', result);
        }

        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ—Å–∫–∞
     */
    getCurrentRoll() {
        return this.currentRoll;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
     */
    getRollHistory() {
        return this.rollHistory;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        this.rollHistory = [];
        this.currentRoll = null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
     */
    onGameStarted() {
        this.clearHistory();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
     */
    onGameStopped() {
        this.clearHistory();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.Dice = Dice;
