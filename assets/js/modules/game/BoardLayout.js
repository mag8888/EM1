// –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–µ—Ç–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ game.html
// –†–∏—Å—É–µ–º 44 –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏ 24 –∫–ª–µ—Ç–∫–∏ –≤ –∫—Ä—É–≥–ª–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ç—Ä–µ–∫–µ

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–µ—Ç–æ–∫
let SMALL_CIRCLE_CELLS = [];
if (typeof SMALL_CIRCLE_CELLS !== 'undefined') {
    SMALL_CIRCLE_CELLS = window.SMALL_CIRCLE_CELLS || [];
} else {
    // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    SMALL_CIRCLE_CELLS = [
        { id: 1, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 2, type: 'pink_expense', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', description: '–ö–ª–µ—Ç–∫–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –æ—Ç 100 –¥–æ 4000$', color: 'pink', icon: 'üõí', action: 'mandatory_expense', minCost: 100, maxCost: 4000 },
        { id: 3, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 4, type: 'orange_charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', description: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞', color: 'orange', icon: '‚ù§Ô∏è', action: 'charity_donation', percentage: 0.1, benefit: 'double_dice' },
        { id: 5, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 6, type: 'blue_dividend', name: '–î–∏–≤–∏–¥–µ–Ω–¥—ã', description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: 'blue', icon: 'üí∞', action: 'receive_dividends' },
        { id: 7, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 8, type: 'purple_business', name: '–ë–∏–∑–Ω–µ—Å', description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å', color: 'purple', icon: 'üè™', action: 'business_opportunity' },
        { id: 9, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 10, type: 'pink_expense', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', description: '–ö–ª–µ—Ç–∫–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –æ—Ç 100 –¥–æ 4000$', color: 'pink', icon: 'üõí', action: 'mandatory_expense', minCost: 100, maxCost: 4000 },
        { id: 11, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 12, type: 'yellow_baby', name: '–°–µ–º—å—è', description: '–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', color: 'yellow', icon: 'üë∂', action: 'family_expense', cost: 5000 },
        { id: 13, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 14, type: 'blue_dividend', name: '–î–∏–≤–∏–¥–µ–Ω–¥—ã', description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: 'blue', icon: 'üí∞', action: 'receive_dividends' },
        { id: 15, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 16, type: 'purple_business', name: '–ë–∏–∑–Ω–µ—Å', description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å', color: 'purple', icon: 'üè™', action: 'business_opportunity' },
        { id: 17, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 18, type: 'pink_expense', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', description: '–ö–ª–µ—Ç–∫–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ –æ—Ç 100 –¥–æ 4000$', color: 'pink', icon: 'üõí', action: 'mandatory_expense', minCost: 100, maxCost: 4000 },
        { id: 19, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 20, type: 'red_downsize', name: '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ', description: '–ü–æ—Ç–µ—Ä—è —Ä–∞–±–æ—Ç—ã - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤', color: 'red', icon: 'üí∏', action: 'downsize', cost: 10000 },
        { id: 21, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 22, type: 'blue_dividend', name: '–î–∏–≤–∏–¥–µ–Ω–¥—ã', description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: 'blue', icon: 'üí∞', action: 'receive_dividends' },
        { id: 23, type: 'green_opportunity', name: '–ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è (–Ω–∞ –≤—ã–±–æ—Ä)', color: 'green', icon: 'üíö', action: 'choose_opportunity' },
        { id: 24, type: 'purple_business', name: '–ë–∏–∑–Ω–µ—Å', description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å', color: 'purple', icon: 'üè™', action: 'business_opportunity' }
    ];
}

function createCellElement(index, sizeClass, isInner = false) {
    const el = document.createElement('div');
    el.className = `track-cell ${sizeClass}`;
    el.style.cursor = 'pointer';
    
    const num = document.createElement('div');
    num.className = 'cell-number';
    num.textContent = String(index + 1);
    
    const icon = document.createElement('div');
    icon.className = 'cell-icon';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ –∏–∫–æ–Ω–∫—É
    let cellData = null;
    let iconText = '‚¨§';
    let iconClass = '';
    let isSelectedDream = false;
    
    console.log('üîç BoardLayout: Creating cell', index, 'isInner:', isInner, 'SMALL_CIRCLE_CELLS length:', SMALL_CIRCLE_CELLS.length);
    
    if (isInner && index < SMALL_CIRCLE_CELLS.length) {
        cellData = SMALL_CIRCLE_CELLS[index];
        iconText = getIconForType ? getIconForType(cellData.type) : cellData.icon;
        iconClass = getIconStyleClass ? getIconStyleClass() : '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—á—Ç–æ–π
        if (window.currentRoom?.currentPlayer?.selectedDream) {
            isSelectedDream = cellData.id === window.currentRoom.currentPlayer.selectedDream;
            console.log('üîç BoardLayout: Checking dream match:', {
                cellId: cellData.id,
                selectedDream: window.currentRoom.currentPlayer.selectedDream,
                isSelectedDream
            });
        }
        
        console.log('üîç BoardLayout: Cell data:', cellData, 'iconText:', iconText, 'iconClass:', iconClass, 'isSelectedDream:', isSelectedDream);
    }
    
    icon.textContent = iconText;
    if (iconClass) {
        icon.className += ` ${iconClass}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–¥–µ—á–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—á—Ç—ã
    if (isSelectedDream) {
        const heart = document.createElement('div');
        heart.className = 'dream-heart';
        heart.textContent = '‚ù§Ô∏è';
        heart.style.cssText = `
            position: absolute;
            top: -8px;
            right: -8px;
            font-size: 16px;
            z-index: 20;
            animation: heartbeat 1.5s ease-in-out infinite;
            filter: drop-shadow(0 2px 4px rgba(255, 0, 0, 0.3));
        `;
        el.appendChild(heart);
        console.log('üîç BoardLayout: Added heart for selected dream:', cellData.id);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    el.addEventListener('click', () => {
        if (cellData && window.cellPopup) {
            window.cellPopup.show(cellData);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
    el.addEventListener('mouseenter', () => {
        el.style.transform = 'scale(1.1)';
        el.style.zIndex = '10';
    });
    
    el.addEventListener('mouseleave', () => {
        el.style.transform = 'scale(1)';
        el.style.zIndex = '1';
    });
    
    el.appendChild(num);
    el.appendChild(icon);
    return el;
}

function placeAlongPerimeter(container, total, insetPx, isInner) {
    const size = container.clientWidth; // –∫–≤–∞–¥—Ä–∞—Ç
    
    if (isInner) {
        // –î–ª—è –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞ —Å–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
        return placeInCircle(container, total, insetPx);
    } else {
        // –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
        const step = (size - insetPx * 2) / 11; // 11 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É
        const cellsPerSide = 11; // 11 –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É, 44 –≤—Å–µ–≥–æ —Å —É–≥–ª–∞–º–∏
        const positions = [];
        for (let side = 0; side < 4; side++) {
            for (let i = 0; i < cellsPerSide; i++) {
                const idx = side * cellsPerSide + i;
                if (idx >= total) break;
                let x = 0; let y = 0;
                const offset = insetPx;
                if (side === 0) { // top ‚Üí left‚Üíright
                    x = offset + i * step;
                    y = offset;
                } else if (side === 1) { // right side top‚Üíbottom
                    x = size - offset;
                    y = offset + i * step;
                } else if (side === 2) { // bottom right‚Üíleft
                    x = size - offset - i * step;
                    y = size - offset;
                } else { // left side bottom‚Üítop
                    x = offset;
                    y = size - offset - i * step;
                }
                positions.push({ x, y });
            }
        }
        return positions.slice(0, total);
    }
}

function placeInCircle(container, total, insetPx) {
    const size = container.clientWidth;
    const centerX = size / 2;
    const centerY = size / 2;
    const radius = (size - insetPx * 2) / 2;
    
    const positions = [];
    for (let i = 0; i < total; i++) {
        const angle = (i / total) * 2 * Math.PI - Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–∞
        const x = centerX + radius * Math.cos(angle);
        const y = centerY + radius * Math.sin(angle);
        positions.push({ x, y });
    }
    return positions;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
window.currentRoom = null;

function renderTracks(room = null) {
    console.log('üéØ renderTracks called');
    console.log('üîç BoardLayout: SMALL_CIRCLE_CELLS available:', typeof SMALL_CIRCLE_CELLS, 'length:', SMALL_CIRCLE_CELLS?.length);
    console.log('üîç BoardLayout: getIconForType available:', typeof getIconForType);
    console.log('üîç BoardLayout: getIconStyleClass available:', typeof getIconStyleClass);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    if (room) {
        window.currentRoom = room;
        console.log('üîç BoardLayout: Room data saved:', {
            currentPlayer: room.currentPlayer,
            selectedDream: room.currentPlayer?.selectedDream
        });
    }
    
    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∂–¥–µ–º (–Ω–æ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    if (typeof SMALL_CIRCLE_CELLS === 'undefined' || SMALL_CIRCLE_CELLS.length === 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if (!window.renderTracksAttempts) {
            window.renderTracksAttempts = 0;
        }
        window.renderTracksAttempts++;
        
        if (window.renderTracksAttempts > 20) {
            console.error('‚ùå BoardLayout: Too many retry attempts, giving up');
            console.log('üîç BoardLayout: Available globals:', Object.keys(window).filter(k => k.includes('CELLS') || k.includes('CONFIG')));
            return;
        }
        
        console.log(`‚è≥ BoardLayout: Configs not loaded, retrying in 100ms (attempt ${window.renderTracksAttempts}/20)`);
        setTimeout(() => renderTracks(room), 100);
        return;
    }
    
    const outer = document.getElementById('outerTrack');
    const inner = document.getElementById('innerTrack');
    
    console.log('üéØ outerTrack found:', !!outer);
    console.log('üéØ innerTrack found:', !!inner);
    
    if (!outer || !inner) {
        console.log('‚ùå Track elements not found, retrying in 100ms');
        setTimeout(renderTracks, 100);
        return;
    }

    // –û—á–∏—Å—Ç–∏–º
    outer.innerHTML = '';
    inner.innerHTML = '';

    // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    outer.style.position = 'absolute';
    inner.style.position = 'absolute';

    const outerCount = 44;
    const innerCount = 24; // –ú–∞–ª—ã–π –∫—Ä—É–≥ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç 24 –∫–ª–µ—Ç–∫–∏

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ layout
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Ä—ã –±—ã–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã
    requestAnimationFrame(() => {
        console.log('üéØ Creating track cells...');
        const outerPositions = placeAlongPerimeter(outer.parentElement, outerCount, 18, false);
        const innerPositions = placeInCircle(inner.parentElement, innerCount, 110);

        console.log('üéØ Outer positions:', outerPositions.length);
        console.log('üéØ Inner positions:', innerPositions.length);

        outerPositions.forEach((pos, i) => {
            const el = createCellElement(i, '');
            el.style.position = 'absolute';
            el.style.transform = 'translate(-50%, -50%)';
            el.style.left = `${pos.x}px`;
            el.style.top = `${pos.y}px`;
            outer.appendChild(el);
        });

        innerPositions.forEach((pos, i) => {
            const el = createCellElement(i, '', true); // isInner = true –¥–ª—è –∏–∫–æ–Ω–æ–∫
            el.style.position = 'absolute';
            el.style.transform = 'translate(-50%, -50%)';
            el.style.left = `${pos.x}px`;
            el.style.top = `${pos.y}px`;
            inner.appendChild(el);
        });
        
        console.log('‚úÖ Track cells created');
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
if (typeof window !== 'undefined') {
    window.renderTracks = renderTracks;
    
    // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    window.addEventListener('DOMContentLoaded', () => {
        const hasTracks = document.getElementById('outerTrack') && document.getElementById('innerTrack');
        if (hasTracks) {
            renderTracks();
        }
    });
}


