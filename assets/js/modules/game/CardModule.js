/**
 * –ú–æ–¥—É–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–¥–∞–º–∏ –∫–∞—Ä—Ç, —Å–¥–µ–ª–∫–∞–º–∏ –∏ –∞–∫—Ç–∏–≤–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 */

export class CardModule {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.decks = {
            bigDeals: [],
            smallDeals: [],
            market: [],
            expenses: []
        };
        this.discardPiles = {
            bigDeals: [],
            smallDeals: [],
            market: [],
            expenses: []
        };
        this.playerAssets = new Map(); // playerId -> [cards]
        this.currentCard = null;
        this.isDestroyed = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    async init() {
        console.log('üÉè CardModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
        await this.initializeDecks();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å –∑–∞—â–∏—Ç–æ–π, –µ—Å–ª–∏ gameCore/eventBus –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const hasEventBus = !!(this.gameCore && this.gameCore.eventBus && typeof this.gameCore.eventBus.on === 'function');
        if (hasEventBus) {
            this.gameCore.eventBus.on('playerTurnStarted', this.onPlayerTurnStarted.bind(this));
            this.gameCore.eventBus.on('playerTurnEnded', this.onPlayerTurnEnded.bind(this));
            this.gameCore.eventBus.on('cellEvent', this.onCellEvent.bind(this));
            console.log('üÉè CardModule: –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ gameCore.eventBus');
        } else {
            // Fallback –Ω–∞ DOM-—Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
            document.addEventListener('cellEvent', (e) => this.onCellEvent(e.detail || e));
            document.addEventListener('playerTurnStarted', (e) => this.onPlayerTurnStarted(e.detail || e));
            document.addEventListener('playerTurnEnded', (e) => this.onPlayerTurnEnded(e.detail || e));
            console.warn('üÉè CardModule: eventBus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º DOM-—Å–æ–±—ã—Ç–∏—è');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥ –∫–∞—Ä—Ç
     */
    async initializeDecks() {
        // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏
        this.decks.bigDeals = this.createBigDealsDeck();
        
        // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏
        this.decks.smallDeals = this.createSmallDealsDeck();
        
        // –†—ã–Ω–æ–∫
        this.decks.market = this.createMarketDeck();
        
        // –†–∞—Å—Ö–æ–¥—ã
        this.decks.expenses = this.createExpensesDeck();
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–¥—ã
        Object.keys(this.decks).forEach(deckType => {
            this.shuffleDeck(deckType);
        });
        
        console.log('üÉè –ö–æ–ª–æ–¥—ã –∫–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
            bigDeals: this.decks.bigDeals.length,
            smallDeals: this.decks.smallDeals.length,
            market: this.decks.market.length,
            expenses: this.decks.expenses.length
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –±–æ–ª—å—à–∏—Ö —Å–¥–µ–ª–æ–∫
     */
    createBigDealsDeck() {
        return [
            {
                id: 'big_1',
                type: 'big_deal',
                name: '–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ',
                description: '–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
                cost: 50000,
                downPayment: 10000,
                cashFlow: 2000,
                category: 'real_estate',
                icon: 'üè¢',
                color: '#2196F3'
            },
            {
                id: 'big_2',
                type: 'big_deal',
                name: '–ê–ø—Ç–µ–∫–∞',
                description: '–ü–æ–∫—É–ø–∫–∞ –∞–ø—Ç–µ–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º –±–∏–∑–Ω–µ—Å–æ–º',
                cost: 80000,
                downPayment: 15000,
                cashFlow: 3000,
                category: 'business',
                icon: 'üíä',
                color: '#4CAF50'
            },
            {
                id: 'big_3',
                type: 'big_deal',
                name: '–ê–≤—Ç–æ–º–æ–π–∫–∞',
                description: '–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–π–∫–∏ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
                cost: 120000,
                downPayment: 20000,
                cashFlow: 4000,
                category: 'business',
                icon: 'üöó',
                color: '#FF9800'
            },
            {
                id: 'big_4',
                type: 'big_deal',
                name: '–°–∫–ª–∞–¥',
                description: '–ü–æ–∫—É–ø–∫–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è',
                cost: 200000,
                downPayment: 30000,
                cashFlow: 6000,
                category: 'real_estate',
                icon: 'üè≠',
                color: '#9C27B0'
            },
            {
                id: 'big_5',
                type: 'big_deal',
                name: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
                description: '–ü–æ–∫—É–ø–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
                cost: 150000,
                downPayment: 25000,
                cashFlow: 5000,
                category: 'business',
                icon: 'üçΩÔ∏è',
                color: '#F44336'
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –º–∞–ª—ã—Ö —Å–¥–µ–ª–æ–∫
     */
    createSmallDealsDeck() {
        return [
            {
                id: 'small_1',
                type: 'small_deal',
                name: '–ê–∫—Ü–∏–∏ Apple',
                description: '–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π Apple',
                cost: 1000,
                downPayment: 1000,
                cashFlow: 50,
                category: 'stocks',
                icon: 'üìà',
                color: '#4CAF50'
            },
            {
                id: 'small_2',
                type: 'small_deal',
                name: '–û–±–ª–∏–≥–∞—Ü–∏–∏',
                description: '–ü–æ–∫—É–ø–∫–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π',
                cost: 5000,
                downPayment: 5000,
                cashFlow: 200,
                category: 'bonds',
                icon: 'üìä',
                color: '#2196F3'
            },
            {
                id: 'small_3',
                type: 'small_deal',
                name: '–ó–æ–ª–æ—Ç–æ',
                description: '–ü–æ–∫—É–ø–∫–∞ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–æ–≤',
                cost: 3000,
                downPayment: 3000,
                cashFlow: 100,
                category: 'precious_metals',
                icon: 'ü•á',
                color: '#FFD700'
            },
            {
                id: 'small_4',
                type: 'small_deal',
                name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
                description: '–ü–æ–∫—É–ø–∫–∞ Bitcoin',
                cost: 2000,
                downPayment: 2000,
                cashFlow: 80,
                category: 'crypto',
                icon: '‚Çø',
                color: '#FF9800'
            },
            {
                id: 'small_5',
                type: 'small_deal',
                name: '–§–æ–Ω–¥—ã',
                description: '–ü–æ–∫—É–ø–∫–∞ –ø–∞–µ–≤—ã—Ö —Ñ–æ–Ω–¥–æ–≤',
                cost: 4000,
                downPayment: 4000,
                cashFlow: 150,
                category: 'funds',
                icon: 'üìã',
                color: '#9C27B0'
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã —Ä—ã–Ω–∫–∞
     */
    createMarketDeck() {
        return [
            {
                id: 'market_1',
                type: 'market',
                name: '–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π',
                description: '–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ',
                sellPrice: 1200,
                originalCost: 1000,
                profit: 200,
                category: 'stocks',
                icon: 'üí∞',
                color: '#4CAF50'
            },
            {
                id: 'market_2',
                type: 'market',
                name: '–ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç–∞',
                description: '–ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç–∞ –Ω–∞ –ø–∏–∫–µ —Ü–µ–Ω—ã',
                sellPrice: 3500,
                originalCost: 3000,
                profit: 500,
                category: 'precious_metals',
                icon: 'ü•á',
                color: '#FFD700'
            },
            {
                id: 'market_3',
                type: 'market',
                name: '–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
                description: '–ü—Ä–æ–¥–∞–∂–∞ Bitcoin –ø–æ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–µ',
                sellPrice: 2500,
                originalCost: 2000,
                profit: 500,
                category: 'crypto',
                icon: '‚Çø',
                color: '#FF9800'
            }
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
     */
    createExpensesDeck() {
        return [
            {
                id: 'expense_1',
                type: 'expense',
                name: '–†–µ–º–æ–Ω—Ç –¥–æ–º–∞',
                description: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ–º–æ–Ω—Ç –¥–æ–º–∞',
                cost: 5000,
                category: 'home',
                icon: 'üî®',
                color: '#F44336'
            },
            {
                id: 'expense_2',
                type: 'expense',
                name: '–õ–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤',
                description: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ',
                cost: 3000,
                category: 'health',
                icon: 'ü¶∑',
                color: '#E91E63'
            },
            {
                id: 'expense_3',
                type: 'expense',
                name: '–ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞',
                description: '–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                cost: 25000,
                category: 'transport',
                icon: 'üöó',
                color: '#2196F3'
            },
            {
                id: 'expense_4',
                type: 'expense',
                name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                description: '–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ',
                cost: 15000,
                category: 'education',
                icon: 'üéì',
                color: '#9C27B0'
            }
        ];
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
     */
    shuffleDeck(deckType) {
        const deck = this.decks[deckType];
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
    }

    /**
     * –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
     */
    drawCard(deckType) {
        if (this.isDestroyed) {
            console.warn('CardModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞');
            return null;
        }

        const deck = this.decks[deckType];
        
        if (deck.length === 0) {
            // –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–±–æ–π
            this.reshuffleDeck(deckType);
        }
        
        if (deck.length === 0) {
            console.warn(`–ö–æ–ª–æ–¥–∞ ${deckType} –ø—É—Å—Ç–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è`);
            return null;
        }
        
        const card = deck.pop();
        console.log(`üÉè –í–∑—è—Ç–∞ –∫–∞—Ä—Ç–∞ –∏–∑ ${deckType}:`, card.name);
        
        return card;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç–±–æ—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–ª–æ–¥—É
     */
    reshuffleDeck(deckType) {
        const discardPile = this.discardPiles[deckType];
        if (discardPile.length === 0) {
            console.warn(`–û—Ç–±–æ–π ${deckType} –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å`);
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–±–æ—è –≤ –∫–æ–ª–æ–¥—É
        this.decks[deckType] = [...discardPile];
        this.discardPiles[deckType] = [];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        this.shuffleDeck(deckType);
        
        console.log(`üÉè –û—Ç–±–æ–π ${deckType} –ø–µ—Ä–µ–º–µ—à–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–ª–æ–¥—É (${this.decks[deckType].length} –∫–∞—Ä—Ç)`);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã –≤ –æ—Ç–±–æ–π
     */
    discardCard(card, deckType) {
        if (card) {
            this.discardPiles[deckType].push(card);
            console.log(`üÉè –ö–∞—Ä—Ç–∞ ${card.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–±–æ–π ${deckType}`);
        }
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–º
     */
    buyCard(playerId, card) {
        if (!card) {
            return { success: false, message: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
        }

        const playerManager = this.gameCore.getModule('playerManager');
        const player = playerManager.getPlayer(playerId);
        
        if (!player) {
            return { success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (player.cash < card.downPayment) {
            return { 
                success: false, 
                message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: $${card.downPayment}, –µ—Å—Ç—å: $${player.cash}` 
            };
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        playerManager.updateBalance(playerId, -card.downPayment, `–ü–æ–∫—É–ø–∫–∞: ${card.name}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∞–∫—Ç–∏–≤—ã –∏–≥—Ä–æ–∫–∞
        if (!this.playerAssets.has(playerId)) {
            this.playerAssets.set(playerId, []);
        }
        
        this.playerAssets.get(playerId).push({
            ...card,
            purchaseDate: Date.now(),
            owner: playerId
        });

        console.log(`üÉè –ò–≥—Ä–æ–∫ ${player.name} –∫—É–ø–∏–ª –∫–∞—Ä—Ç—É: ${card.name} –∑–∞ $${card.downPayment}`);
        
        return {
            success: true,
            message: `–ö–∞—Ä—Ç–∞ ${card.name} –∫—É–ø–ª–µ–Ω–∞ –∑–∞ $${card.downPayment}`,
            card: card,
            newBalance: player.cash
        };
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
     */
    transferCard(fromPlayerId, toPlayerId, cardId) {
        const fromAssets = this.playerAssets.get(fromPlayerId) || [];
        const cardIndex = fromAssets.findIndex(card => card.id === cardId);
        
        if (cardIndex === -1) {
            return { success: false, message: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –∏–≥—Ä–æ–∫–∞' };
        }

        const card = fromAssets.splice(cardIndex, 1)[0];
        
        if (!this.playerAssets.has(toPlayerId)) {
            this.playerAssets.set(toPlayerId, []);
        }
        
        this.playerAssets.get(toPlayerId).push({
            ...card,
            owner: toPlayerId,
            transferDate: Date.now()
        });

        console.log(`üÉè –ö–∞—Ä—Ç–∞ ${card.name} –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${fromPlayerId} –∫ –∏–≥—Ä–æ–∫—É ${toPlayerId}`);
        
        return {
            success: true,
            message: `–ö–∞—Ä—Ç–∞ ${card.name} –ø–µ—Ä–µ–¥–∞–Ω–∞`,
            card: card
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerAssets(playerId) {
        return this.playerAssets.get(playerId) || [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    getCurrentCard() {
        return this.currentCard;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    setCurrentCard(card) {
        this.currentCard = card;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    clearCurrentCard() {
        this.currentCard = null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥
     */
    getDeckStats() {
        return {
            bigDeals: {
                deck: this.decks.bigDeals.length,
                discard: this.discardPiles.bigDeals.length
            },
            smallDeals: {
                deck: this.decks.smallDeals.length,
                discard: this.discardPiles.smallDeals.length
            },
            market: {
                deck: this.decks.market.length,
                discard: this.discardPiles.market.length
            },
            expenses: {
                deck: this.decks.expenses.length,
                discard: this.discardPiles.expenses.length
            }
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onPlayerTurnStarted(data) {
        console.log(`üÉè –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${data.playerId} –Ω–∞—á–∞—Ç, –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É`);
        this.clearCurrentCard();
    }

    onPlayerTurnEnded(data) {
        console.log(`üÉè –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${data.playerId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤ –æ—Ç–±–æ–π
        if (this.currentCard) {
            this.discardCard(this.currentCard, this.currentCard.type);
            this.clearCurrentCard();
        }
    }

    onCellEvent(data) {
        console.log('üé¥ CardModule: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏:', data);
        
        if (data.cellType === 'green_opportunity' || data.cellType === 'deal') {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å–¥–µ–ª–æ–∫
            this.activateDealsModule(data.playerId);
        } else if (data.cellType === 'blue_market') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä—ã–Ω–∫–∞
            this.showMarketCard(data.playerId);
        } else if (data.cellType === 'pink_expense') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            this.showExpenseCard(data.playerId);
        } else if (data.cellType === 'yellow_payday') {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã
            this.processPayday(data.playerId);
        } else if (data.cellType === 'orange_charity' || data.cellType === 'charity') {
            // –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10% –æ—Ç (–∑–∞—Ä–ø–ª–∞—Ç–∞ + –ø–∞—Å—Å. –¥–æ—Ö–æ–¥), 3 —Ö–æ–¥–∞ ‚Äî –≤—ã–±–æ—Ä 1 –∏–ª–∏ 2 –∫—É–±–∏–∫–∞
            this.showCharityModal(data.playerId);
        } else if (data.cellType === 'purple_baby') {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
            this.processBaby(data.playerId);
        }
    }

    // UI: –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    showCharityModal(playerId) {
        try {
            const modal = document.createElement('div');
            modal.className = 'charity-modal';

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const snapshot = window.gameState?.getSnapshot?.() || {};
            const meId = String(playerId || window.gameState?.getUserId?.() || '');
            const me = (snapshot.players || []).find(p => String(p.userId) === meId) || {};
            const salary = Number(me?.profession?.salary || 0);
            const passive = Number(me?.passiveIncome || 0);
            const income = salary + passive;
            const donation = Math.floor(income * 0.10);

            modal.innerHTML = `
                <div class="modal-overlay">
                    <div class="modal-content">
                        <h3 style="margin-top:0;">–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                        <p>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å <strong>10%</strong> –æ—Ç –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å <strong>3 —Ö–æ–¥–∞</strong>, –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å <strong>1 –∏–ª–∏ 2</strong> –∫—É–±–∏–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä.</p>
                        <div class="charity-stats">
                            <div><span>–ó–∞—Ä–ø–ª–∞—Ç–∞:</span><span>$${salary.toLocaleString()}</span></div>
                            <div><span>–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥:</span><span>$${passive.toLocaleString()}</span></div>
                            <div class="sum"><span>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ (10%):</span><span>$${donation.toLocaleString()}</span></div>
                        </div>
                        <div class="charity-actions">
                            <button class="btn btn-primary pay-btn">–û–ø–ª–∞—Ç–∏—Ç—å</button>
                            <button class="btn btn-secondary cancel-btn">–û—Ç–∫–∞–∑–∞—Ç—å—Å—è</button>
                        </div>
                    </div>
                </div>`;

            // –°—Ç–∏–ª–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥–∞–ª–∫–∏)
            const style = document.createElement('style');
            style.textContent = `
                .charity-modal .modal-overlay{position:fixed;inset:0;background:rgba(0,0,0,.7);display:flex;align-items:center;justify-content:center;z-index:10002}
                .charity-modal .modal-content{background:#121a2b;color:#fff;border-radius:14px;box-shadow:0 20px 40px rgba(0,0,0,.5);padding:22px;max-width:480px;width:90%}
                .charity-stats{margin:14px 0 8px 0;display:grid;grid-template-columns:1fr auto;gap:8px 12px}
                .charity-stats .sum{font-weight:700}
                .charity-actions{display:grid;grid-template-columns:1fr 1fr;gap:12px;margin-top:14px}
                .charity-modal .btn{padding:12px 16px;border:none;border-radius:12px;font-weight:700;cursor:pointer}
                .charity-modal .btn-primary{background:linear-gradient(135deg,#16f79e 0%,#0ecf82 100%);color:#0b1729}
                .charity-modal .btn-secondary{background:linear-gradient(135deg,#1f2937 0%,#111827 100%);color:#e5e7eb}
            `;

            document.head.appendChild(style);
            document.body.appendChild(modal);

            const close = () => { try { modal.remove(); style.remove(); } catch(_){} };
            modal.querySelector('.cancel-btn')?.addEventListener('click', close);
            modal.querySelector('.modal-overlay')?.addEventListener('click', (e) => { if (e.target === modal.querySelector('.modal-overlay')) close(); });

            // –û–ø–ª–∞—Ç–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            modal.querySelector('.pay-btn')?.addEventListener('click', async () => {
                try {
                    const roomId = window.gameState?.roomId;
                    const userId = window.gameState?.getUserId?.();
                    const res = await fetch(`/api/rooms/${roomId}/charity`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'x-user-id': userId },
                        body: JSON.stringify({})
                    });
                    const data = await res.json();
                    if (res.ok && data?.success) {
                        this.showNotification(`–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ $${donation.toLocaleString()} –ø—Ä–∏–Ω—è—Ç–æ. 3 —Ö–æ–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º 1/2 –∫—É–±–∏–∫–∞.`, 'success');
                        try { await window.gameState?.refresh?.(); } catch(_){}
                        close();
                    } else {
                        this.showNotification(data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'error');
                    }
                } catch (e) {
                    this.showNotification('–û—à–∏–±–∫–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 'error');
                }
            });
        } catch (e) {
            console.warn('Charity UI error', e);
        }
    }
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–¥–µ–ª–æ–∫
    activateDealsModule(playerId) {
        console.log('üé¥ CardModule: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞', playerId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ DealsModule
        if (window.dealsModule) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à DealsModule
            window.dealsModule.showDealChoice(playerId);
        } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            this.showDealTypeSelection(playerId);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç—ã
    processPayday(playerId) {
        console.log('üí∞ CardModule: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞', playerId);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
    processBaby(playerId) {
        console.log('üë∂ CardModule: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', playerId);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–±–µ–Ω–∫–∞
    }

    /**
     * –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
     */
    showDealTypeSelection(playerId) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
        const modal = document.createElement('div');
        modal.className = 'deal-type-modal';
        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏</h3>
                    <div class="deal-type-buttons">
                        <button class="deal-type-btn big-deal" onclick="window.cardModule.selectDealType('big_deal', '${playerId}')">
                            <div class="deal-icon">üè¢</div>
                            <div class="deal-name">–ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-description">–î–æ—Ä–æ–≥–∏–µ –∞–∫—Ç–∏–≤—ã —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º</div>
                        </button>
                        <button class="deal-type-btn small-deal" onclick="window.cardModule.selectDealType('small_deal', '${playerId}')">
                            <div class="deal-icon">üìà</div>
                            <div class="deal-name">–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-description">–ù–µ–¥–æ—Ä–æ–≥–∏–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö</div>
                        </button>
                    </div>
                    <button class="modal-close" onclick="this.closest('.deal-type-modal').remove()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .deal-type-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 10000;
            }
            
            .modal-overlay {
                position: relative;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .modal-content {
                background: white;
                padding: 30px;
                border-radius: 15px;
                text-align: center;
                max-width: 500px;
                width: 90%;
            }
            
            .deal-type-buttons {
                display: flex;
                gap: 20px;
                margin: 20px 0;
            }
            
            .deal-type-btn {
                flex: 1;
                padding: 20px;
                border: 2px solid #ddd;
                border-radius: 10px;
                background: white;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .deal-type-btn:hover {
                border-color: #2196F3;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }
            
            .deal-icon {
                font-size: 2rem;
                margin-bottom: 10px;
            }
            
            .deal-name {
                font-size: 1.2rem;
                font-weight: bold;
                margin-bottom: 5px;
            }
            
            .deal-description {
                font-size: 0.9rem;
                color: #666;
            }
            
            .modal-close {
                background: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                margin-top: 20px;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(modal);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (modal.parentNode) {
                modal.remove();
            }
            if (style.parentNode) {
                style.remove();
            }
        }, 30000);
    }

    /**
     * –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
     */
    selectDealType(dealType, playerId) {
        const card = this.drawCard(dealType === 'big_deal' ? 'bigDeals' : 'smallDeals');
        
        if (card) {
            this.setCurrentCard(card);
            this.showCardDetails(card, playerId);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.querySelector('.deal-type-modal');
        if (modal) {
            modal.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã
     */
    showCardDetails(card, playerId) {
        const modal = document.createElement('div');
        modal.className = 'card-details-modal';
        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="card-header">
                        <div class="card-icon" style="color: ${card.color}">${card.icon}</div>
                        <div class="card-info">
                            <h3>${card.name}</h3>
                            <p>${card.description}</p>
                        </div>
                    </div>
                    
                    <div class="card-details">
                        <div class="detail-row">
                            <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span>$${card.cost.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å:</span>
                            <span>$${card.downPayment.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫:</span>
                            <span>$${card.cashFlow.toLocaleString()}/–º–µ—Å</span>
                        </div>
                    </div>
                    
                    <div class="card-actions">
                        <button class="btn-buy" onclick="window.cardModule.buyCurrentCard('${playerId}')">
                            –ö—É–ø–∏—Ç—å –∑–∞ $${card.downPayment.toLocaleString()}
                        </button>
                        <button class="btn-cancel" onclick="window.cardModule.cancelCurrentCard()">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .card-details-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 10001;
            }
            
            .card-header {
                display: flex;
                align-items: center;
                margin-bottom: 20px;
            }
            
            .card-icon {
                font-size: 3rem;
                margin-right: 20px;
            }
            
            .card-details {
                background: #f5f5f5;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            
            .detail-row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
            }
            
            .card-actions {
                display: flex;
                gap: 10px;
                justify-content: center;
            }
            
            .btn-buy {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
            }
            
            .btn-cancel {
                background: #f44336;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 5px;
                cursor: pointer;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(modal);
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    buyCurrentCard(playerId) {
        if (!this.currentCard) {
            console.warn('–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
            return;
        }

        const result = this.buyCard(playerId, this.currentCard);
        
        if (result.success) {
            this.clearCurrentCard();
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.querySelector('.card-details-modal');
            if (modal) {
                modal.remove();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(result.message, 'success');
        } else {
            this.showNotification(result.message, 'error');
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
     */
    cancelCurrentCard() {
        if (this.currentCard) {
            this.discardCard(this.currentCard, this.currentCard.type);
            this.clearCurrentCard();
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.querySelector('.card-details-modal');
        if (modal) {
            modal.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                z-index: 10002;
                animation: slideIn 0.3s ease;
            }
            
            .notification.success {
                background: #4CAF50;
            }
            
            .notification.error {
                background: #f44336;
            }
            
            .notification.info {
                background: #2196F3;
            }
            
            @keyframes slideIn {
                from { transform: translateX(100%); }
                to { transform: translateX(0); }
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
            if (style.parentNode) {
                style.remove();
            }
        }, 3000);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        this.decks = {};
        this.discardPiles = {};
        this.playerAssets.clear();
        this.currentCard = null;
        this.isDestroyed = true;
        console.log('üóëÔ∏è CardModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (typeof window !== 'undefined') {
    window.cardModule = new CardModule(window.gameCore || {});
}

export default CardModule;
