// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–¥–∞–º–∏, –æ—Ç–±–æ–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç

class CardManager {
    constructor() {
        this.decks = {
            bigDeal: [],      // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏
            smallDeal: [],    // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏
            expenses: [],     // –†–∞—Å—Ö–æ–¥—ã
            market: []        // –†—ã–Ω–æ–∫
        };
        
        this.discardPiles = {
            bigDeal: [],
            smallDeal: [],
            expenses: [],
            market: []
        };
        
        this.initializeCards();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
    initializeCards() {
        console.log('üÉè CardManager: Initializing cards...');
        
        // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏ (24 –∫–∞—Ä—Ç—ã)
        this.decks.bigDeal = this.createBigDealCards();
        
        // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏ (32 –∫–∞—Ä—Ç—ã)
        this.decks.smallDeal = this.createSmallDealCards();
        
        // –†–∞—Å—Ö–æ–¥—ã (24 –∫–∞—Ä—Ç—ã)
        this.decks.expenses = this.createExpenseCards();
        
        // –†—ã–Ω–æ–∫ (24 –∫–∞—Ä—Ç—ã)
        this.decks.market = this.createMarketCards();
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–¥—ã
        Object.keys(this.decks).forEach(deckType => {
            this.shuffleDeck(deckType);
        });
        
        console.log('‚úÖ CardManager: Cards initialized', {
            bigDeal: this.decks.bigDeal.length,
            smallDeal: this.decks.smallDeal.length,
            expenses: this.decks.expenses.length,
            market: this.decks.market.length
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç –±–æ–ª—å—à–∏—Ö —Å–¥–µ–ª–æ–∫
    createBigDealCards() {
        const cards = [];
        const types = [
            { name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', icon: 'üè†', cost: 50000, income: 5000, description: '–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' },
            { name: '–ë–∏–∑–Ω–µ—Å', icon: 'üè¢', cost: 100000, income: 10000, description: '–ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞' },
            { name: '–ê–∫—Ü–∏–∏', icon: 'üìà', cost: 25000, income: 2500, description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∞–∫—Ü–∏–∏' },
            { name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', icon: 'üìä', cost: 15000, income: 1500, description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏' },
            { name: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á', cost: 30000, income: 3000, description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–æ–ª–æ—Ç–æ' },
            { name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', icon: '‚Çø', cost: 20000, income: 2000, description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É' }
        ];
        
        // –°–æ–∑–¥–∞–µ–º 24 –∫–∞—Ä—Ç—ã (–ø–æ 4 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
        for (let i = 0; i < 24; i++) {
            const type = types[i % types.length];
            cards.push({
                id: `big_deal_${i + 1}`,
                type: 'bigDeal',
                name: type.name,
                icon: type.icon,
                cost: type.cost + Math.floor(Math.random() * 10000), // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                income: type.income + Math.floor(Math.random() * 1000),
                description: type.description,
                used: false
            });
        }
        
        return cards;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç –º–∞–ª—ã—Ö —Å–¥–µ–ª–æ–∫
    createSmallDealCards() {
        const cards = [];
        const types = [
            { name: '–ê–∫—Ü–∏–∏', icon: 'üìà', cost: 1000, income: 100, description: '–ú–∞–ª—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∞–∫—Ü–∏–∏' },
            { name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', icon: 'üìä', cost: 500, income: 50, description: '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏' },
            { name: '–î–µ–ø–æ–∑–∏—Ç', icon: 'üí∞', cost: 2000, income: 200, description: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç' },
            { name: '–§–æ–Ω–¥', icon: 'üè¶', cost: 1500, income: 150, description: '–ü–∞–µ–≤–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥' },
            { name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', icon: '‚Çø', cost: 800, income: 80, description: '–ú–∞–ª—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É' },
            { name: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á', cost: 1200, income: 120, description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–æ–ª–æ—Ç–æ' },
            { name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', icon: 'üè†', cost: 3000, income: 300, description: '–ú–∞–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å' },
            { name: '–ë–∏–∑–Ω–µ—Å', icon: 'üè™', cost: 2500, income: 250, description: '–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å' }
        ];
        
        // –°–æ–∑–¥–∞–µ–º 32 –∫–∞—Ä—Ç—ã (–ø–æ 4 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
        for (let i = 0; i < 32; i++) {
            const type = types[i % types.length];
            cards.push({
                id: `small_deal_${i + 1}`,
                type: 'smallDeal',
                name: type.name,
                icon: type.icon,
                cost: type.cost + Math.floor(Math.random() * 500), // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                income: type.income + Math.floor(Math.random() * 50),
                description: type.description,
                used: false
            });
        }
        
        return cards;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
    createExpenseCards() {
        const cards = [];
        const types = [
            { name: '–ù–∞–ª–æ–≥–∏', icon: 'üìã', cost: 2000, description: '–ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥' },
            { name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', icon: 'üõ°Ô∏è', cost: 1500, description: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏' },
            { name: '–ú–µ–¥–∏—Ü–∏–Ω–∞', icon: 'üè•', cost: 1000, description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' },
            { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üéì', cost: 3000, description: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π' },
            { name: '–†–µ–º–æ–Ω—Ç', icon: 'üîß', cost: 2500, description: '–†–µ–º–æ–Ω—Ç –¥–æ–º–∞' },
            { name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', icon: 'üöó', cost: 4000, description: '–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' }
        ];
        
        // –°–æ–∑–¥–∞–µ–º 24 –∫–∞—Ä—Ç—ã (–ø–æ 4 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
        for (let i = 0; i < 24; i++) {
            const type = types[i % types.length];
            cards.push({
                id: `expense_${i + 1}`,
                type: 'expenses',
                name: type.name,
                icon: type.icon,
                cost: type.cost + Math.floor(Math.random() * 1000), // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                description: type.description,
                used: false
            });
        }
        
        return cards;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç —Ä—ã–Ω–∫–∞
    createMarketCards() {
        const cards = [];
        const types = [
            { name: '–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', icon: 'üéØ', cost: 5000, income: 500, description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' },
            { name: '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞', icon: 'üè∑Ô∏è', cost: 3000, income: 300, description: '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–æ–≤' },
            { name: '–ë–æ–Ω—É—Å', icon: 'üéÅ', cost: 0, income: 1000, description: '–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞' },
            { name: '–°–∫–∏–¥–∫–∞', icon: 'üí∏', cost: 2000, income: 200, description: '–°–∫–∏–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞' },
            { name: '–ü–æ–¥–∞—Ä–æ–∫', icon: 'üéÅ', cost: 0, income: 500, description: '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞' },
            { name: '–ö—ç—à–±—ç–∫', icon: 'üí≥', cost: 1000, income: 100, description: '–ö—ç—à–±—ç–∫ –∫–∞—Ä—Ç–∞' }
        ];
        
        // –°–æ–∑–¥–∞–µ–º 24 –∫–∞—Ä—Ç—ã (–ø–æ 4 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
        for (let i = 0; i < 24; i++) {
            const type = types[i % types.length];
            cards.push({
                id: `market_${i + 1}`,
                type: 'market',
                name: type.name,
                icon: type.icon,
                cost: type.cost + Math.floor(Math.random() * 500), // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                income: type.income + Math.floor(Math.random() * 100),
                description: type.description,
                used: false
            });
        }
        
        return cards;
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck(deckType) {
        if (!this.decks[deckType]) return;
        
        const deck = this.decks[deckType];
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
        
        console.log(`üîÄ CardManager: Shuffled ${deckType} deck (${deck.length} cards)`);
    }
    
    // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
    drawCard(deckType) {
        if (!this.decks[deckType] || this.decks[deckType].length === 0) {
            // –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–±–æ–π
            this.reshuffleFromDiscard(deckType);
        }
        
        if (this.decks[deckType].length === 0) {
            console.warn(`‚ö†Ô∏è CardManager: No cards available in ${deckType} deck`);
            return null;
        }
        
        const card = this.decks[deckType].pop();
        console.log(`üÉè CardManager: Drew card from ${deckType}:`, card.name);
        return card;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—Ç–±–æ–π
    discardCard(card) {
        if (!card || !card.type) return;
        
        const deckType = card.type;
        if (!this.discardPiles[deckType]) {
            this.discardPiles[deckType] = [];
        }
        
        card.used = true;
        this.discardPiles[deckType].push(card);
        
        console.log(`üóëÔ∏è CardManager: Discarded card to ${deckType}:`, card.name);
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç–±–æ—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–ª–æ–¥—É
    reshuffleFromDiscard(deckType) {
        if (!this.discardPiles[deckType] || this.discardPiles[deckType].length === 0) {
            console.warn(`‚ö†Ô∏è CardManager: No cards in ${deckType} discard pile to reshuffle`);
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–±–æ—è –≤ –∫–æ–ª–æ–¥—É
        this.decks[deckType] = [...this.discardPiles[deckType]];
        this.discardPiles[deckType] = [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ used
        this.decks[deckType].forEach(card => {
            card.used = false;
        });
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        this.shuffleDeck(deckType);
        
        console.log(`üîÑ CardManager: Reshuffled ${deckType} from discard pile (${this.decks[deckType].length} cards)`);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–∞—Ö
    getDeckInfo() {
        return {
            decks: Object.keys(this.decks).reduce((acc, key) => {
                acc[key] = {
                    remaining: this.decks[key].length,
                    discarded: this.discardPiles[key] ? this.discardPiles[key].length : 0
                };
                return acc;
            }, {}),
            totalCards: Object.values(this.decks).reduce((sum, deck) => sum + deck.length, 0),
            totalDiscarded: Object.values(this.discardPiles).reduce((sum, pile) => sum + pile.length, 0)
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        const info = this.getDeckInfo();
        return {
            ...info,
            bigDeal: {
                remaining: this.decks.bigDeal.length,
                discarded: this.discardPiles.bigDeal.length,
                total: 24
            },
            smallDeal: {
                remaining: this.decks.smallDeal.length,
                discarded: this.discardPiles.smallDeal.length,
                total: 32
            },
            expenses: {
                remaining: this.decks.expenses.length,
                discarded: this.discardPiles.expenses.length,
                total: 24
            },
            market: {
                remaining: this.decks.market.length,
                discarded: this.discardPiles.market.length,
                total: 24
            }
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CardManager;
} else if (typeof window !== 'undefined') {
    window.CardManager = CardManager;
}
