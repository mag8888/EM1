/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞, –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
 */

export class GameFlowController {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.isProcessing = false;
        this.currentAction = null;
        this.actionHistory = [];
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    async init() {
        console.log('üéØ GameFlowController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('turnStarted', this.onTurnStarted.bind(this));
        this.gameCore.eventBus.on('diceRolled', this.onDiceRolled.bind(this));
        this.gameCore.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
        this.gameCore.eventBus.on('playerLandedOnCell', this.onPlayerLandedOnCell.bind(this));
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–¥–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    async executeTurn(playerId) {
        if (this.isProcessing) {
            console.warn('–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return false;
        }

        try {
            this.isProcessing = true;
            this.currentAction = {
                playerId,
                startTime: Date.now(),
                steps: []
            };

            console.log(`üéØ –ù–∞—á–∞–ª–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);

            // 1. –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
            const diceResult = await this.rollDice(playerId);
            if (!diceResult) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫');
            }

            // 2. –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            const moveResult = await this.movePlayer(playerId, diceResult.total);
            if (!moveResult) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞');
            }

            // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫–µ
            const cellEvent = await this.processCellEvent(playerId, moveResult.cell);
            
            // 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
            const turnResult = {
                diceResult,
                moveResult,
                cellEvent,
                duration: Date.now() - this.currentAction.startTime
            };

            this.saveActionHistory(turnResult);
            console.log(`üéØ –ò–≥—Ä–æ–≤–æ–π —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);

            this.gameCore.eventBus.emit('turnCompleted', {
                playerId,
                result: turnResult
            });

            return turnResult;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–¥–∞:', error);
            this.gameCore.eventBus.emit('turnError', {
                playerId,
                error: error.message
            });
            return null;
        } finally {
            this.isProcessing = false;
            this.currentAction = null;
        }
    }

    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    async rollDice(playerId) {
        const diceModule = this.gameCore.getModule('diceModule');
        if (!diceModule) {
            throw new Error('–ú–æ–¥—É–ª—å –∫—É–±–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log(`üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
        
        const result = await diceModule.roll();
        if (result) {
            this.currentAction.steps.push({
                type: 'diceRoll',
                result,
                timestamp: Date.now()
            });
        }

        return result;
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     */
    async movePlayer(playerId, steps) {
        const movementModule = this.gameCore.getModule('movementModule');
        if (!movementModule) {
            throw new Error('–ú–æ–¥—É–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log(`üö∂ –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–∞ ${steps} —à–∞–≥–æ–≤`);
        
        const result = await movementModule.movePlayer(playerId, steps);
        if (result) {
            this.currentAction.steps.push({
                type: 'movement',
                result,
                timestamp: Date.now()
            });
        }

        return result;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫–µ
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} cell - –ö–ª–µ—Ç–∫–∞
     */
    async processCellEvent(playerId, cell) {
        if (!cell) {
            console.warn('–ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è');
            return null;
        }

        console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–ª–µ—Ç–∫–µ "${cell.name}" –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);

        const eventModule = this.gameCore.getModule('eventModule');
        if (!eventModule) {
            console.warn('–ú–æ–¥—É–ª—å —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
            return null;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
        const eventType = this.getEventTypeFromCell(cell);
        const eventData = {
            type: eventType,
            playerId,
            cell,
            position: cell.position
        };

        const result = await eventModule.queueEvent(eventData);
        
        if (result) {
            this.currentAction.steps.push({
                type: 'cellEvent',
                cell: cell.name,
                eventType,
                result,
                timestamp: Date.now()
            });
        }

        return result;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª–µ—Ç–∫–µ
     * @param {Object} cell - –ö–ª–µ—Ç–∫–∞
     */
    getEventTypeFromCell(cell) {
        switch (cell.type) {
            case 'payday':
            case 'yellow_payday':
                return 'receive_salary';
            case 'charity':
            case 'orange_charity':
                return 'charity';
            case 'opportunity':
            case 'green_opportunity':
                return 'card_draw';
            case 'expense':
            case 'pink_expense':
                return 'card_draw';
            case 'market':
            case 'blue_market':
                return 'market_action';
            case 'dream':
                return 'dream_action';
            case 'purple_baby':
                return 'baby_born';
            case 'black_loss':
                return 'job_loss';
            default:
                return 'neutral';
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
     * @param {Object} action - –î–µ–π—Å—Ç–≤–∏–µ
     */
    saveActionHistory(action) {
        this.actionHistory.push({
            ...action,
            id: `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            timestamp: Date.now()
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.actionHistory.length > 100) {
            this.actionHistory.shift();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getActionHistory(limit = 10) {
        return this.actionHistory.slice(-limit);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    getGameFlowStats() {
        const totalActions = this.actionHistory.length;
        const averageDuration = totalActions > 0 
            ? this.actionHistory.reduce((sum, action) => sum + action.duration, 0) / totalActions
            : 0;

        const actionsByType = {};
        this.actionHistory.forEach(action => {
            action.steps.forEach(step => {
                actionsByType[step.type] = (actionsByType[step.type] || 0) + 1;
            });
        });

        return {
            totalActions,
            averageDuration: Math.round(averageDuration),
            actionsByType,
            isProcessing: this.isProcessing,
            currentAction: this.currentAction
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onTurnStarted(data) {
        console.log(`üéØ –ù–∞—á–∞–ª–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ${data.playerName}`);
    }

    onDiceRolled(data) {
        console.log(`üé≤ –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω: ${data.result.values.join(' + ')} = ${data.result.total}`);
    }

    onPlayerMoved(data) {
        console.log(`üö∂ –ò–≥—Ä–æ–∫ ${data.playerId} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Å ${data.from} –Ω–∞ ${data.to}`);
    }

    onPlayerLandedOnCell(data) {
        console.log(`‚ö° –ò–≥—Ä–æ–∫ ${data.player} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É "${data.cell.name}"`);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    destroy() {
        this.actionHistory = [];
        this.isProcessing = false;
        this.currentAction = null;
        this.isDestroyed = true;
        console.log('üóëÔ∏è GameFlowController —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default GameFlowController;
