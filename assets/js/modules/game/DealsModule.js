// –ú–∏–∫—Ä–æ–º–æ–¥—É–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–¥–µ–ª–æ–∫
class DealsModule {
    constructor() {
        this.decks = {
            bigDeal: [],      // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏
            smallDeal: [],    // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏
            market: [],       // –†—ã–Ω–æ–∫
            expenses: []      // –†–∞—Å—Ö–æ–¥—ã
        };
        
        this.discardPiles = {
            bigDeal: [],
            smallDeal: [],
            market: [],
            expenses: []
        };
        
        this.playerAssets = new Map(); // –ö–∞—Ä—Ç–æ—á–∫–∏ —É –∏–≥—Ä–æ–∫–æ–≤
        this.currentDeal = null;       // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏
        this.isDealActive = false;     // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–¥–µ–ª–∫–∞
        this.dealChosenThisTurn = false; // –§–ª–∞–≥, —á—Ç–æ —Å–¥–µ–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ö–æ–¥—É
        this.viewOnlyMode = false;     // –†–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–º
        
        this.init();
    }
    
    init() {
        console.log('üé¥ DealsModule: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫');
        this.loadDealsData();
        this.setupEventListeners();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    loadDealsData() {
        console.log('üé¥ DealsModule: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const extendedLoaded = this.loadExtendedCardsData();
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        if (!extendedLoaded) {
            console.log('üé¥ DealsModule: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ');
            this.loadBasicCardsData();
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã
        this.shuffleDeck('bigDeal');
        this.shuffleDeck('smallDeal');
        this.shuffleDeck('market');
        this.shuffleDeck('expenses');
        
        console.log('üé¥ DealsModule: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏:', {
            bigDeal: this.decks.bigDeal.length,
            smallDeal: this.decks.smallDeal.length,
            market: this.decks.market.length,
            expenses: this.decks.expenses.length
        });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    loadExtendedCardsData() {
        try {
            console.log('üé¥ DealsModule: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            console.log('üé¥ DealsModule: window.FULL_SMALL_DEALS:', typeof window.FULL_SMALL_DEALS, window.FULL_SMALL_DEALS?.length);
            console.log('üé¥ DealsModule: window.FULL_BIG_DEALS:', typeof window.FULL_BIG_DEALS, window.FULL_BIG_DEALS?.length);
            console.log('üé¥ DealsModule: window.MARKET_CARDS:', typeof window.MARKET_CARDS, window.MARKET_CARDS?.length);
            console.log('üé¥ DealsModule: window.EXPENSE_CARDS:', typeof window.EXPENSE_CARDS, window.EXPENSE_CARDS?.length);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
            if (typeof window !== 'undefined' && window.FULL_SMALL_DEALS && window.FULL_BIG_DEALS) {
                this.decks.smallDeal = window.FULL_SMALL_DEALS.map(card => ({
                    ...card,
                    type: 'smallDeal',
                    downPayment: card.cost,
                    monthlyPayment: 0
                }));
                
                this.decks.bigDeal = window.FULL_BIG_DEALS.map(card => ({
                    ...card,
                    type: 'bigDeal',
                    downPayment: Math.floor(card.cost * 0.2), // 20% –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å
                    monthlyPayment: Math.floor(card.cost * 0.1) // 10% –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                }));
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã —Ä—ã–Ω–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if (window.MARKET_CARDS) {
                    this.decks.market = window.MARKET_CARDS.map(card => ({
                        ...card,
                        type: 'market'
                    }));
                }
                
                if (window.EXPENSE_CARDS) {
                    this.decks.expenses = window.EXPENSE_CARDS.map(card => ({
                        ...card,
                        type: 'expenses'
                    }));
                }
                
                console.log('üé¥ DealsModule: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–µ–∫:', {
                    smallDeal: this.decks.smallDeal.length,
                    bigDeal: this.decks.bigDeal.length,
                    market: this.decks.market.length,
                    expenses: this.decks.expenses.length
                });
                return true;
            }
            
            console.log('üé¥ DealsModule: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ fetch
            this.loadCardsFromServer();
            return false;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è DealsModule: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
            return false;
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadCardsFromServer() {
        try {
            const response = await fetch('/game-board/config/full-cards-config.js');
            if (response.ok) {
                const text = await response.text();
                // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON)
                console.log('üé¥ DealsModule: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è DealsModule: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    loadBasicCardsData() {
        // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏ (24 –∫–∞—Ä—Ç—ã)
        this.decks.bigDeal = [
            {
                id: 'big_1',
                type: 'bigDeal',
                name: '–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ',
                description: '–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
                cost: 50000,
                income: 5000,
                downPayment: 10000,
                monthlyPayment: 2000,
                icon: 'üè¢',
                category: 'realEstate'
            },
            {
                id: 'big_2',
                type: 'bigDeal',
                name: '–°–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                description: '–§—Ä–∞–Ω—à–∏–∑–∞ —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                cost: 80000,
                income: 8000,
                downPayment: 15000,
                monthlyPayment: 3000,
                icon: 'üçΩÔ∏è',
                category: 'business'
            },
            {
                id: 'big_3',
                type: 'bigDeal',
                name: '–ê–∫—Ü–∏–∏ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                description: '–ü–∞–∫–µ—Ç –∞–∫—Ü–∏–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                cost: 30000,
                income: 3000,
                downPayment: 30000,
                monthlyPayment: 0,
                icon: 'üìà',
                category: 'stocks'
            }
        ];
        
        // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏ (32 –∫–∞—Ä—Ç—ã)
        this.decks.smallDeal = [
            {
                id: 'small_1',
                type: 'smallDeal',
                name: '–ê–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞',
                description: '–ê–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                cost: 5000,
                income: 500,
                downPayment: 5000,
                monthlyPayment: 0,
                icon: 'üìä',
                category: 'stocks'
            },
            {
                id: 'small_2',
                type: 'smallDeal',
                name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Å–¥–∞—á–∏',
                description: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∞—Ä–µ–Ω–¥—É',
                cost: 15000,
                income: 1500,
                downPayment: 3000,
                monthlyPayment: 600,
                icon: 'üè†',
                category: 'realEstate'
            },
            {
                id: 'small_3',
                type: 'smallDeal',
                name: '–ú–∞–ª–µ–Ω—å–∫–∏–π –±–∏–∑–Ω–µ—Å',
                description: '–ù–µ–±–æ–ª—å—à–æ–π –º–∞–≥–∞–∑–∏–Ω',
                cost: 10000,
                income: 1000,
                downPayment: 2000,
                monthlyPayment: 400,
                icon: 'üè™',
                category: 'business'
            }
        ];
        
        // –†—ã–Ω–æ–∫ (24 –∫–∞—Ä—Ç—ã)
        this.decks.market = [
            {
                id: 'market_1',
                type: 'market',
                name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                description: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤—ã',
                discount: 0.2,
                icon: 'üéØ',
                category: 'special'
            },
            {
                id: 'market_2',
                type: 'market',
                name: '–ê–∫—Ü–∏–∏ —É–ø–∞–ª–∏',
                description: '–í—Å–µ –∞–∫—Ü–∏–∏ –¥–µ—à–µ–≤–ª–µ –Ω–∞ 30%',
                discount: 0.3,
                icon: 'üìâ',
                category: 'special'
            }
        ];
        
        // –†–∞—Å—Ö–æ–¥—ã (24 –∫–∞—Ä—Ç—ã)
        this.decks.expenses = [
            {
                id: 'expense_1',
                type: 'expenses',
                name: '–ù–∞–ª–æ–≥–∏',
                description: '–£–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤',
                cost: 2000,
                icon: 'üìã',
                category: 'mandatory'
            },
            {
                id: 'expense_2',
                type: 'expenses',
                name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                description: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞',
                cost: 1500,
                icon: 'üõ°Ô∏è',
                category: 'mandatory'
            }
        ];
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck(deckType) {
        const deck = this.decks[deckType];
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–µ—Ç–∫–∏ "—Å–¥–µ–ª–∫–∞"
        document.addEventListener('cellDealActivated', (event) => {
            this.showDealChoice(event.detail.playerId);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤—ã"
        document.addEventListener('assetsButtonClicked', () => {
            this.showAssetsCatalog();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–¥–µ–ª–æ–∫ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const dealsButtons = document.querySelectorAll('#dealsButton, #dealsBtn');
        dealsButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.showAssetsCatalog();
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–¥–µ–ª–æ–∫ –≤ –ø–æ–ª–æ—Å–µ
        const bigDealCards = document.querySelectorAll('.special-card.big-deal, .big-deal');
        const smallDealCards = document.querySelectorAll('.special-card.small-deal, .small-deal');
        
        bigDealCards.forEach(card => {
            card.addEventListener('click', () => {
                const currentPlayerId = this.getCurrentPlayerId();
                if (currentPlayerId) {
                    this.drawCard('bigDeal', currentPlayerId);
                }
            });
        });
        
        smallDealCards.forEach(card => {
            card.addEventListener('click', () => {
                const currentPlayerId = this.getCurrentPlayerId();
                if (currentPlayerId) {
                    this.drawCard('smallDeal', currentPlayerId);
                }
            });
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ —Å–¥–µ–ª–∫–∞—Ö
        document.addEventListener('dealOfferReceived', (event) => {
            const { playerId } = event.detail;
            this.showDealChoice(playerId);
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç GameFlowController
        document.addEventListener('cellEvent', (event) => {
            const { cellType, playerId } = event.detail;
            if (cellType === 'green_opportunity' || cellType === 'deal') {
                this.showDealChoice(playerId);
            }
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
        if (window.io) {
            window.io.on('cellEvent', (data) => {
                if (data.cellType === 'green_opportunity') {
                    this.showDealChoice(data.playerId);
                }
            });
        }
        
        // –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É —Ö–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
        document.addEventListener('playerTurnStarted', () => {
            this.dealChosenThisTurn = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ö–æ–¥—É
            console.log('üé¥ DealsModule: –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞');
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ä—Ç –≤ UI
        this.updateDeckCounters();
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    showDealChoice(playerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ –≤ —ç—Ç–æ–º —Ö–æ–¥—É
        if (this.dealChosenThisTurn) {
            console.log('üé¥ DealsModule: –°–¥–µ–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ö–æ–¥—É');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
        if (document.querySelector('.deals-modal')) {
            console.log('üé¥ DealsModule: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ');
            return;
        }
        
        const modal = this.createDealChoiceModal();
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞
        modal.querySelector('.big-deal-btn').addEventListener('click', () => {
            this.dealChosenThisTurn = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
            this.drawCard('bigDeal', playerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.small-deal-btn').addEventListener('click', () => {
            this.dealChosenThisTurn = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
            this.drawCard('smallDeal', playerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.cancel-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
    createDealChoiceModal() {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content">
                <div class="deals-modal-header">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="deals-modal-body">
                    <div class="deal-options">
                        <button class="deal-btn big-deal-btn">
                            <div class="deal-icon">üíº</div>
                            <div class="deal-title">–ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-count">${this.decks.bigDeal.length} –∫–∞—Ä—Ç</div>
                        </button>
                        <button class="deal-btn small-deal-btn">
                            <div class="deal-icon">üì¶</div>
                            <div class="deal-title">–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-count">${this.decks.smallDeal.length} –∫–∞—Ä—Ç</div>
                        </button>
                    </div>
                    <button class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addModalStyles();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal(modal);
            }
        });
        
        return modal;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    addModalStyles() {
        if (document.getElementById('deals-modal-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'deals-modal-styles';
        styles.textContent = `
            .deals-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
                opacity: 1;
                transition: opacity 0.3s ease;
            }
            
            .deals-modal.modal-closing {
                opacity: 0;
                pointer-events: none;
            }
            
            .deals-modal-content {
                transform: scale(1);
                transition: transform 0.3s ease;
            }
            
            .deals-modal.modal-closing .deals-modal-content {
                transform: scale(0.9);
            }
            
            .deals-modal-content {
                background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                border-radius: 20px;
                padding: 24px 24px 20px 24px;
                max-width: 500px;
                width: 90%;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            }
            
            .deals-modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 30px;
            }
            
            .deals-modal-header h3 {
                color: #ffffff;
                font-size: 24px;
                font-weight: 700;
            }
            
            .close-btn {
                background: none;
                border: none;
                color: #ffffff;
                font-size: 24px;
                cursor: pointer;
                padding: 5px;
            }
            
            .deal-options {
                display: flex;
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .deal-btn {
                flex: 1;
                background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
                border: 2px solid #4a5568;
                border-radius: 15px;
                padding: 20px;
                cursor: pointer;
                transition: all 0.3s ease;
                color: #ffffff;
                text-align: center;
            }
            
            .deal-btn:hover {
                border-color: #48bb78;
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(72, 187, 120, 0.3);
            }
            
            .deal-icon {
                font-size: 32px;
                margin-bottom: 10px;
            }
            .deal-card-content { display:flex; flex-direction:column; gap:14px; }
            .deal-card-details { display:grid; grid-template-columns:1fr 1fr; gap:6px 12px; margin-bottom:6px; }
            .deal-card-actions { display:grid; grid-template-columns:1fr; gap:12px; margin-top:8px; }
            .btn-warning { background: linear-gradient(135deg, #ffd166 0%, #fcbf49 100%); color:#1f2937; }
            
            .deal-title {
                font-size: 18px;
                font-weight: 600;
                margin-bottom: 5px;
            }
            
            .deal-count {
                font-size: 14px;
                color: #a0a0a0;
            }
            
            .cancel-btn {
                width: 100%;
                background: #e53e3e;
                border: none;
                border-radius: 10px;
                padding: 15px;
                color: #ffffff;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: background 0.3s ease;
            }
            
            .cancel-btn:hover {
                background: #c53030;
            }
            .action-btn, .deal-btn, .cancel-btn, .player-btn, .btn { width:100%; padding:14px 18px; border-radius:14px; border:none; font-weight:700; letter-spacing:.2px; cursor:pointer; transition:all .2s ease-in-out; outline:none; }
            .btn-primary { background: linear-gradient(135deg, #16f79e 0%, #0ecf82 100%); color:#0b1729; }
            .btn-secondary { background: linear-gradient(135deg, #1f2937 0%, #111827 100%); color:#e5e7eb; }
            .btn-danger { background: linear-gradient(135deg, #ff6b6b 0%, #f14646 100%); color:#fff; }
            .btn[disabled] { opacity:.55; cursor:not-allowed; }
            @media (max-width: 480px) { .deals-modal-content { padding:18px; } .action-btn, .deal-btn, .cancel-btn, .player-btn, .btn { padding:12px 14px; } }
        `;
        
        document.head.appendChild(styles);
    }
    
    // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
    drawCard(deckType, playerId) {
        if (this.decks[deckType].length === 0) {
            this.reshuffleDeck(deckType);
        }
        
        const card = this.decks[deckType].shift();
        this.currentDeal = card;
        this.isDealActive = true;

        console.log(`üé¥ DealsModule: –ò–≥—Ä–æ–∫ ${playerId} –≤–∑—è–ª –∫–∞—Ä—Ç—É ${card.name} –∏–∑ ${deckType}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        this.updateDeckCounters();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
        this.showDealCard(card, playerId);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–¥–µ–ª–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    showDealCard(card, playerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
        const existingModal = document.querySelector('.deals-modal .deal-card-modal');
        if (existingModal) {
            console.log('üé¥ DealsModule: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç—ã —Å–¥–µ–ª–∫–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ');
            return;
        }
        
        const myId = String(this.getCurrentPlayerId());
        const isOwner = myId === String(playerId);
        const modal = this.createDealCardModal(card, { isOwner: isOwner && !this.viewOnlyMode, originalOwnerId: playerId });
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        modal.querySelector('.buy-btn').addEventListener('click', () => {
            // –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            const currentPlayerId = this.getCurrentPlayerId();
            this.buyCard(card, currentPlayerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.pass-btn').addEventListener('click', () => {
            const deckType = card.type === 'bigDeal' ? 'bigDeal' : (card.type === 'smallDeal' ? 'smallDeal' : 'market');
            this.passCard(card, deckType);
            this.closeModal(modal);
        });
        
        modal.querySelector('.transfer-btn').addEventListener('click', () => {
            this.showTransferOptions(card, playerId);
        });

        // –ö—Ä–µ–¥–∏—Ç ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–ª–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –æ–∫–Ω–æ
        const creditBtn = modal.querySelector('.credit-btn');
        if (creditBtn) {
            creditBtn.addEventListener('click', () => {
                this.showCreditModal(card);
            });
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º "–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏" –¥–ª—è –≤—Å–µ—Ö, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (this.viewOnlyMode && !isOwner) {
            this.applyDisabledState(modal, true);
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ä—Ç—ã —Å–¥–µ–ª–∫–∏
    createDealCardModal(card, { isOwner = true, originalOwnerId = null } = {}) {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content deal-card-modal">
                <div class="deals-modal-header">
                    <h3>${card.name}</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="deal-card-content">
                    <div class="deal-card-icon">${card.icon}</div>
                    <div class="deal-card-description">${card.description}</div>
                    <div class="deal-card-details">
                        <div class="detail-row">
                            <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span class="cost">$${card.cost.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–î–æ—Ö–æ–¥:</span>
                            <span class="income">$${card.income.toLocaleString()}/–º–µ—Å</span>
                        </div>
                        <div class="detail-row">
                            <span>–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å:</span>
                            <span class="down-payment">$${card.downPayment.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</span>
                            <span class="monthly-payment">$${card.monthlyPayment.toLocaleString()}</span>
                        </div>
                        ${card.category === 'stocks' ? `
                        <div class="detail-row stock-quantity">
                            <label for="stock-quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π:</label>
                            <input type="number" id="stock-quantity" min="1" max="100000" value="1" class="stock-quantity-input">
                            <div class="quantity-info">
                                <span class="total-cost">–ò—Ç–æ–≥–æ: $<span class="total-amount">${card.cost.toLocaleString()}</span></span>
                                <span class="monthly-income">–î–æ—Ö–æ–¥: $<span class="monthly-amount">${card.income.toLocaleString()}</span>/–º–µ—Å</span>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                    <div class="deal-card-actions">
                        <button class="btn btn-primary buy-btn" ${isOwner ? '' : 'disabled'} title="${isOwner ? '' : '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞'}">–ö—É–ø–∏—Ç—å</button>
                        <button class="btn btn-secondary transfer-btn" ${isOwner ? '' : 'disabled'} title="${isOwner ? '' : '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞'}">–ü–µ—Ä–µ–¥–∞—Ç—å</button>
                        <button class="btn btn-warning credit-btn">–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç</button>
                        <button class="btn btn-danger pass-btn">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal(modal);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ü–∏–π
        if (card.category === 'stocks') {
            const quantityInput = modal.querySelector('#stock-quantity');
            const totalAmountSpan = modal.querySelector('.total-amount');
            const monthlyAmountSpan = modal.querySelector('.monthly-amount');
            
            if (quantityInput && totalAmountSpan && monthlyAmountSpan) {
                quantityInput.addEventListener('input', (e) => {
                    const quantity = Math.max(1, Math.min(100000, parseInt(e.target.value) || 1));
                    e.target.value = quantity;
                    
                    const totalCost = card.cost * quantity;
                    const totalIncome = card.income * quantity;
                    
                    totalAmountSpan.textContent = totalCost.toLocaleString();
                    monthlyAmountSpan.textContent = totalIncome.toLocaleString();
                });
            }
        }
        
        return modal;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–æ–¥–∞–ª–∫–µ —Å–¥–µ–ª–∫–∏
    applyDisabledState(modal, disabled) {
        try {
            const buy = modal.querySelector('.buy-btn');
            const transfer = modal.querySelector('.transfer-btn');
            if (buy) { buy.disabled = !!disabled; if (disabled) buy.title = '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'; }
            if (transfer) { transfer.disabled = !!disabled; if (disabled) transfer.title = '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'; }
        } catch (_) {}
    }

    // –ü—É–±–ª–∏—á–Ω–æ–µ API: –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏" –¥–ª—è –≤—Å–µ—Ö
    setViewOnlyMode(flag) {
        this.viewOnlyMode = !!flag;
    }
    
    // –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç—ã
    async buyCard(card, playerId) {
        try {
            const roomId = window.gameState?.roomId;
            const gameState = window.gameState?.state;
            
            if (roomId && gameState) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                const player = gameState.players?.find(p => p.userId === playerId);
                if (!player) {
                    console.error('üé¥ DealsModule: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
                const currentBalance = player.cash || 0;
                
                // –î–ª—è –∞–∫—Ü–∏–π –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                let quantity = 1;
                let cardCost = card.cost || 0;
                let cardIncome = card.income || 0;
                
                if (card.category === 'stocks') {
                    const quantityInput = document.querySelector('#stock-quantity');
                    if (quantityInput) {
                        quantity = Math.max(1, Math.min(100000, parseInt(quantityInput.value) || 1));
                        cardCost = card.cost * quantity;
                        cardIncome = card.income * quantity;
                    }
                }
                
                if (currentBalance < cardCost) {
                    alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: $${cardCost}, –¥–æ—Å—Ç—É–ø–Ω–æ: $${currentBalance}`);
                    return;
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                const requestData = { 
                    action: 'buy', 
                    deal: { 
                        id: card.id, 
                        name: card.name, 
                        amount: cardCost, 
                        income: cardIncome,
                        type: card.type || 'smallDeal',
                        quantity: quantity,
                        category: card.category
                    } 
                };
                
                console.log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:`, {
                    url: `/api/rooms/${roomId}/deals/resolve`,
                    data: requestData,
                    playerBalance: currentBalance,
                    cardCost: cardCost
                });
                
                const response = await fetch(`/api/rooms/${roomId}/deals/resolve`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                if (response.ok) {
                    const responseData = await response.json();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    if (responseData.player) {
                        Object.assign(player, responseData.player);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞)
                    if (responseData.player && responseData.player.cash !== undefined) {
                        player.cash = responseData.player.cash;
                    } else {
                        // Fallback: —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                        player.cash = Math.max(0, currentBalance - cardCost);
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
                    const asset = {
                        id: card.id,
                        cardId: card.id,
                        name: card.name,
                        type: card.type || 'smallDeal',
                        size: 'small', // –∏–ª–∏ 'big' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
                        purchasePrice: cardCost,
                        monthlyIncome: card.income || 0,
                        acquiredAt: Date.now(),
                        icon: card.icon || 'üìà'
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∞–∫—Ç–∏–≤—ã –∏–≥—Ä–æ–∫–∞
                    if (!player.assets) {
                        player.assets = [];
                    }
                    player.assets.push(asset);

                    console.log(`üé¥ DealsModule: –ò–≥—Ä–æ–∫ ${playerId} –∫—É–ø–∏–ª –∫–∞—Ä—Ç—É ${card.name} –∑–∞ $${cardCost}`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                    if (responseData.state && window.gameState?.applyState) {
                        window.gameState.applyState(responseData.state);
                    } else if (window.gameState?.refresh) {
                        window.gameState.refresh();
                    }

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –∞–∫—Ç–∏–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if (window.assetsManager) {
                        window.assetsManager.render(window.gameState?.getSnapshot?.());
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∞–∫—Ç–∏–≤–∞
                    if (window.notificationService) {
                        await window.notificationService.notifyBalanceChange(
                            player.name || player.username,
                            -cardCost,
                            '–ø–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∞'
                        );
                    }
                } else {
                    console.error('üé¥ DealsModule: –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                    console.error('üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
                    
                    try {
                        const errorData = await response.json();
                        console.error('üîç –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', errorData);
                    } catch (e) {
                        console.error('üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏');
                    }
                    return;
                }
            }
        } catch (error) {
            console.error('üé¥ DealsModule: –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ã:', error);
            return;
        }

        // –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∞–∫—Ç–∏–≤—ã
        if (!this.playerAssets.has(playerId)) {
            this.playerAssets.set(playerId, []);
        }
        this.playerAssets.get(playerId).push(card);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–±–æ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        const deckType = card.type === 'bigDeal' ? 'bigDeal' : (card.type === 'smallDeal' ? 'smallDeal' : 'market');
        this.passCard(card, deckType);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–¥–µ–ª–∫—É
        this.currentDeal = null;
        this.isDealActive = false;

        this.notifyCardBought(card, playerId);
    }
    
    // –û—Ç–∫–∞–∑ –æ—Ç –∫–∞—Ä—Ç—ã (–∫–∞—Ä—Ç–∞ –∏–¥–µ—Ç –≤ –æ—Ç–±–æ–π)
    passCard(card, deckType) {
        this.discardPiles[deckType].push(card);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–¥–µ–ª–∫—É
        this.currentDeal = null;
        this.isDealActive = false;

        console.log(`üé¥ DealsModule: –ö–∞—Ä—Ç–∞ ${card.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–±–æ–π ${deckType}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        this.updateDeckCounters();
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏–∑ –æ—Ç–±–æ—è
    reshuffleDeck(deckType) {
        if (this.discardPiles[deckType].length === 0) {
            console.warn(`üé¥ DealsModule: –ù–µ—Ç –∫–∞—Ä—Ç –≤ –æ—Ç–±–æ–µ –¥–ª—è ${deckType}`);
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–±–æ—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–æ–¥—É
        this.decks[deckType] = [...this.discardPiles[deckType]];
        this.discardPiles[deckType] = [];

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        this.shuffleDeck(deckType);

        console.log(`üé¥ DealsModule: –ö–æ–ª–æ–¥–∞ ${deckType} –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞ –∏–∑ –æ—Ç–±–æ—è`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        this.updateDeckCounters();
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–æ–≤
    showAssetsCatalog() {
        const modal = this.createAssetsCatalogModal();
        document.body.appendChild(modal);
    }
    
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
    moveAssetToCatalog(asset, playerId) {
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤ —É –∏–≥—Ä–æ–∫–∞
        const playerAssets = this.playerAssets.get(playerId) || [];
        const assetIndex = playerAssets.findIndex(a => a.id === asset.id);
        if (assetIndex !== -1) {
            playerAssets.splice(assetIndex, 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        if (!this.catalogAssets) {
            this.catalogAssets = [];
        }
        this.catalogAssets.push({
            ...asset,
            originalOwnerId: playerId,
            addedToCatalogAt: Date.now()
        });
        
        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (!window.globalCatalogAssets) {
            window.globalCatalogAssets = [];
        }
        window.globalCatalogAssets.push({
            ...asset,
            originalOwnerId: playerId,
            addedToCatalogAt: Date.now()
        });
        
        console.log(`üé¥ –ê–∫—Ç–∏–≤ ${asset.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä–æ–∫–æ–º ${playerId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (window.gameState) {
            window.gameState.refresh();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –∞–∫—Ç–∏–≤–æ–≤
        if (window.assetsManager) {
            window.assetsManager.render(window.gameState?.getSnapshot?.());
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–æ–≤
    createAssetsCatalogModal() {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        let allAssets = [];
        this.playerAssets.forEach((assets, playerId) => {
            assets.forEach(asset => {
                allAssets.push({...asset, ownerId: playerId, type: 'player'});
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        if (this.catalogAssets) {
            this.catalogAssets.forEach(asset => {
                allAssets.push({...asset, ownerId: 'catalog', type: 'catalog'});
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        if (window.globalCatalogAssets) {
            window.globalCatalogAssets.forEach(asset => {
                allAssets.push({...asset, ownerId: 'catalog', type: 'catalog'});
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (—Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if (window.gameState?.state?.room?.catalogAssets) {
            window.gameState.state.room.catalogAssets.forEach(asset => {
                allAssets.push({...asset, ownerId: 'catalog', type: 'catalog'});
            });
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID –∞–∫—Ç–∏–≤–∞
        const uniqueAssets = [];
        const seenIds = new Set();
        allAssets.forEach(asset => {
            if (!seenIds.has(asset.id)) {
                seenIds.add(asset.id);
                uniqueAssets.push(asset);
            }
        });
        
        modal.innerHTML = `
            <div class="deals-modal-content assets-catalog-modal">
                <div class="deals-modal-header">
                    <h3>–ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–æ–≤</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="assets-catalog-content">
                    <div class="assets-stats">
                        <div class="stat-item">
                            <span>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤:</span>
                            <span>${uniqueAssets.length}</span>
                        </div>
                        <div class="stat-item">
                            <span>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span>$${uniqueAssets.reduce((sum, asset) => sum + (asset.cost || asset.purchasePrice || 0), 0).toLocaleString()}</span>
                        </div>
                    </div>
                    <div class="assets-list">
                        ${uniqueAssets.map(asset => `
                            <div class="asset-item">
                                <div class="asset-icon">${asset.icon}</div>
                                <div class="asset-info">
                                    <div class="asset-name">${asset.name}</div>
                                    <div class="asset-owner">–í–ª–∞–¥–µ–ª–µ—Ü: ${asset.ownerId}</div>
                                    <div class="asset-details">
                                        <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: $${(asset.cost || asset.purchasePrice || 0).toLocaleString()}</span>
                                        <span>–î–æ—Ö–æ–¥: $${(asset.income || asset.monthlyIncome || 0).toLocaleString()}/–º–µ—Å</span>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal(modal);
            }
        });
        
        return modal;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ª–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –æ–∫–Ω–æ
    async showCreditModal(card) {
        const modal = this.createCreditModal(card);
        document.body.appendChild(modal);

        const snapshot = window.gameState?.getSnapshot?.() || {};
        const roomId = snapshot?.roomId || window.gameState?.roomId;
        const currentPlayerId = this.getCurrentPlayerId();
        const currentPlayer = snapshot?.players?.find?.(p => String(p.userId) === String(currentPlayerId));
        const username = currentPlayer?.name || currentPlayer?.username;

        if (!roomId || !username) {
            console.warn('‚ö†Ô∏è DealsModule: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞');
            return;
        }

        try {
            const res = await fetch(`/api/bank/credit/status/${encodeURIComponent(username)}/${encodeURIComponent(roomId)}`);
            const data = await res.json();

            const step = Number(data?.step || 1000);
            const ratePerStep = Number(data?.ratePerStep || 100);
            const maxAvailable = Number(data?.maxAvailable || 0);

            const creditInput = modal.querySelector('#credit-amount');
            const maxLimitEl = modal.querySelector('.max-limit');
            const monthlyPaymentEl = modal.querySelector('.monthly-payment');
            const takeBtn = modal.querySelector('.take-credit-btn');

            if (creditInput) {
                creditInput.dataset.step = step;
                creditInput.dataset.rate = ratePerStep;
                creditInput.dataset.max = maxAvailable;
                creditInput.max = Math.max(step, maxAvailable || step);

                if (maxAvailable > 0) {
                    creditInput.value = Math.min(Number(creditInput.value || step), maxAvailable);
                    if (takeBtn) takeBtn.disabled = false;
                } else {
                    creditInput.value = 0;
                    if (takeBtn) takeBtn.disabled = true;
                }

                creditInput.addEventListener('input', () => {
                    const amount = Number(creditInput.value || 0);
                    if (maxAvailable && amount > maxAvailable) {
                        creditInput.value = maxAvailable;
                    }
                    this.updateMonthlyPaymentDisplay(creditInput, monthlyPaymentEl);
                    if (takeBtn) {
                        takeBtn.disabled = (maxAvailable <= 0) || Number(creditInput.value || 0) < step;
                    }
                });
            }

            if (maxLimitEl) {
                maxLimitEl.textContent = `$${maxAvailable.toLocaleString()}`;
            }

            this.updateMonthlyPaymentDisplay(creditInput, monthlyPaymentEl);
        } catch (error) {
            console.error('‚ùå DealsModule: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞', error);
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ª–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
    createCreditModal(card) {
        const modal = document.createElement('div');
        modal.className = 'deals-modal credit-modal';
        modal.innerHTML = `
            <div class="deals-modal-content credit-modal-content">
                <div class="deals-modal-header">
                    <h3>–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –¥–ª—è ${card.name}</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="credit-modal-body">
                    <div class="card-info">
                        <div class="card-icon">${card.icon}</div>
                        <div class="card-details">
                            <div class="card-name">${card.name}</div>
                            <div class="card-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: $${card.cost.toLocaleString()}</div>
                        </div>
                    </div>
                    <div class="credit-form">
                        <div class="form-group">
                            <label for="credit-amount">–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:</label>
                            <input type="number" id="credit-amount" min="1000" max="100000" value="${card.cost}" class="credit-input">
                        </div>
                        <div class="credit-info">
                            <div class="info-item">
                                <span>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç:</span>
                                <span class="max-limit">$0</span>
                            </div>
                            <div class="info-item">
                                <span>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</span>
                                <span class="monthly-payment">$0</span>
                            </div>
                        </div>
                        <div class="credit-actions">
                            <button class="btn btn-primary take-credit-btn">–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç</button>
                            <button class="btn btn-secondary cancel-credit-btn">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.addCreditModalStyles();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        modal.querySelector('.cancel-credit-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        modal.querySelector('.take-credit-btn').addEventListener('click', () => {
            this.takeCredit(card, modal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal(modal);
            }
        });
        
        return modal;
    }

    updateMonthlyPaymentDisplay(inputEl, outputEl) {
        if (!inputEl || !outputEl) return;
        const amount = Number(inputEl.value || 0);
        const step = Number(inputEl.dataset.step || 1000);
        const rate = Number(inputEl.dataset.rate || 100);
        if (amount <= 0 || step <= 0) {
            outputEl.textContent = '$0';
            return;
        }
        const monthly = Math.max(0, Math.ceil(amount / step) * rate);
        outputEl.textContent = `$${monthly.toLocaleString()}`;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
    addCreditModalStyles() {
        if (document.getElementById('credit-modal-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'credit-modal-styles';
        styles.textContent = `
            .credit-modal-content {
                max-width: 400px;
                width: 90%;
            }
            
            .credit-modal-body {
                display: flex;
                flex-direction: column;
                gap: 20px;
            }
            
            .card-info {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 15px;
                background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
                border-radius: 10px;
                border: 1px solid #4a5568;
            }
            
            .card-icon {
                font-size: 32px;
            }
            
            .card-details {
                flex: 1;
            }
            
            .card-name {
                font-size: 18px;
                font-weight: 600;
                color: #ffffff;
                margin-bottom: 5px;
            }
            
            .card-cost {
                font-size: 14px;
                color: #a0a0a0;
            }
            
            .credit-form {
                display: flex;
                flex-direction: column;
                gap: 15px;
            }
            
            .form-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
            }
            
            .form-group label {
                color: #ffffff;
                font-weight: 600;
                font-size: 14px;
            }
            
            .credit-input {
                padding: 12px;
                border: 2px solid #4a5568;
                border-radius: 8px;
                background: #1a202c;
                color: #ffffff;
                font-size: 16px;
                font-weight: 600;
            }
            
            .credit-input:focus {
                outline: none;
                border-color: #48bb78;
            }
            
            .credit-info {
                display: flex;
                flex-direction: column;
                gap: 8px;
                padding: 15px;
                background: linear-gradient(135deg, #1a202c 0%, #111827 100%);
                border-radius: 8px;
                border: 1px solid #374151;
            }
            
            .info-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                color: #e5e7eb;
                font-size: 14px;
            }
            
            .info-item span:first-child {
                color: #9ca3af;
            }
            
            .info-item span:last-child {
                font-weight: 600;
                color: #48bb78;
            }
            
            .credit-actions {
                display: flex;
                gap: 10px;
            }
            
            .credit-actions .btn {
                flex: 1;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    // –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
    async takeCredit(card, modal) {
        try {
            const creditInput = modal.querySelector('#credit-amount');
            if (!creditInput) {
                alert('–û—à–∏–±–∫–∞: –ø–æ–ª–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const step = Number(creditInput.dataset.step || 1000);
            const maxAvailable = Number(creditInput.dataset.max || 0);
            const creditAmount = parseInt(creditInput.value, 10) || 0;

            if (creditAmount < step) {
                alert(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: $${step.toLocaleString()}`);
                return;
            }

            if (maxAvailable && creditAmount > maxAvailable) {
                alert(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: $${maxAvailable.toLocaleString()}`);
                return;
            }

            const roomId = window.gameState?.roomId;
            const playerId = this.getCurrentPlayerId();
            const snapshot = window.gameState?.getSnapshot?.();
            const player = snapshot?.players?.find?.(p => String(p.userId) === String(playerId));
            const username = player?.name || player?.username;

            if (!roomId || !playerId || !username) {
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞
            const response = await fetch(`/api/bank/credit/take`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    roomId,
                    username,
                    amount: creditAmount
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç —É—Å–ø–µ—à–Ω–æ:', result);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.closeModal(modal);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if (window.gameState && window.gameState.refresh) {
                    window.gameState.refresh();
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (this.notifier) {
                    this.notifier.show(`–ö—Ä–µ–¥–∏—Ç $${creditAmount.toLocaleString()} –æ—Ñ–æ—Ä–º–ª–µ–Ω`, { type: 'success' });
                } else {
                    alert(`–ö—Ä–µ–¥–∏—Ç –Ω–∞ —Å—É–º–º—É $${creditAmount.toLocaleString()} –≤–∑—è—Ç —É—Å–ø–µ—à–Ω–æ!`);
                }

            } else {
                const errorData = await response.json();
                const message = errorData.error || errorData.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç';
                if (this.notifier) {
                    this.notifier.show(message, { type: 'error' });
                } else {
                    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞: ${message}`);
                }
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞:', error);
            if (this.notifier) {
                this.notifier.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞', { type: 'error' });
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞');
            }
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç—ã
    showTransferOptions(card, fromPlayerId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        let otherPlayers = [];
        try {
            const players = window.gameState?.state?.players || [];
            otherPlayers = players
                .map(p => ({ id: String(p.userId), name: p.name || p.userId }))
                .filter(p => p.id !== String(fromPlayerId));
        } catch (_) {
            otherPlayers = [];
        }
        
        if (!otherPlayers.length) {
            alert('–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç—ã');
            return;
        }
        
        const modal = this.createTransferModal(card, fromPlayerId, otherPlayers);
        document.body.appendChild(modal);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏
    createTransferModal(card, fromPlayerId, otherPlayers) {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content transfer-modal">
                <div class="deals-modal-header">
                    <h3>–ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="transfer-content">
                    <div class="card-preview">
                        <div class="card-icon">${card.icon}</div>
                        <div class="card-name">${card.name}</div>
                    </div>
                    <div class="players-list">
                        <h4>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:</h4>
                        ${otherPlayers.map(p => `
                            <button class="btn btn-secondary player-btn" data-player-id="${p.id}">
                                ${p.name}
                            </button>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏
        modal.querySelectorAll('.player-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const toPlayerId = btn.dataset.playerId;
                this.transferCard(card, fromPlayerId, toPlayerId);
                this.closeModal(modal);
            });
        });
        
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal(modal);
            }
        });
        
        return modal;
    }
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
    async transferCard(card, fromPlayerId, toPlayerId) {
        try {
            const roomId = window.gameState?.roomId;
            const currentUserId = this.getCurrentPlayerId();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            console.log(`üîç –ü–µ—Ä–µ–¥–∞—á–∞ –∞–∫—Ç–∏–≤–∞:`, {
                cardId: card.id,
                cardName: card.name,
                fromPlayerId,
                toPlayerId
            });
            
            const response = await fetch(`/api/rooms/${roomId}/assets/transfer`, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'X-User-ID': currentUserId
                },
                body: JSON.stringify({ 
                    assetId: card.id, 
                    assetName: card.name, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    targetUserId: toPlayerId 
                })
            });

            const result = await response.json();
            
            if (result.success) {
                console.log(`üé¥ DealsModule: –ö–∞—Ä—Ç–∞ ${card.name} –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç ${fromPlayerId} –∫ ${toPlayerId}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                this.playerAssets.set(fromPlayerId, (this.playerAssets.get(fromPlayerId) || []).filter(asset => asset.id !== card.id));
                
                if (!this.playerAssets.has(toPlayerId)) {
                    this.playerAssets.set(toPlayerId, []);
                }
                this.playerAssets.get(toPlayerId).push(card);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
                this.updateModalForTransfer(card, toPlayerId);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–¥–∞—á–µ
                this.notifyCardTransferred(card, fromPlayerId, toPlayerId);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if (window.gameState) {
                    window.gameState.refresh();
                }
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∞:', result.message);
                alert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∞: ${result.message}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∞–∫—Ç–∏–≤–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∞–∫—Ç–∏–≤–∞');
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    updateModalForTransfer(card, newOwnerId) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
        const modals = document.querySelectorAll('.deals-modal');
        modals.forEach(modal => {
            const modalTitle = modal.querySelector('h3');
            if (modalTitle && modalTitle.textContent === card.name) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
                const myId = String(this.getCurrentPlayerId());
                const isNewOwner = myId === String(newOwnerId);
                
                const buyBtn = modal.querySelector('.buy-btn');
                const transferBtn = modal.querySelector('.transfer-btn');
                
                if (isNewOwner) {
                    // –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
                    buyBtn.disabled = false;
                    buyBtn.title = '';
                    transferBtn.disabled = false;
                    transferBtn.title = '';
                } else {
                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
                    buyBtn.disabled = true;
                    buyBtn.title = '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É';
                    transferBtn.disabled = true;
                    transferBtn.title = '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É';
                }
            }
        });
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifyCardBought(card, playerId) {
        const event = new CustomEvent('cardBought', {
            detail: { card, playerId }
        });
        document.dispatchEvent(event);
    }
    
    notifyCardTransferred(card, fromPlayerId, toPlayerId) {
        const event = new CustomEvent('cardTransferred', {
            detail: { card, fromPlayerId, toPlayerId }
        });
        document.dispatchEvent(event);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ç–∏–≤–∞
        if (window.notificationService && card.price) {
            try {
                const gameState = window.gameState?.state;
                if (gameState) {
                    const fromPlayer = gameState.players?.find(p => p.userId === fromPlayerId);
                    const toPlayer = gameState.players?.find(p => p.userId === toPlayerId);
                    
                    if (fromPlayer && toPlayer) {
                        window.notificationService.notifyBalanceChange(
                            fromPlayer.name || fromPlayer.username,
                            card.price,
                            '–ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞'
                        );
                    }
                }
            } catch (error) {
                console.error('üîî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ç–∏–≤–∞:', error);
            }
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal(modal) {
        if (modal && modal.parentNode) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è
            modal.classList.add('modal-closing');
            
            // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (modal && modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
            }, 300);
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥
    getDeckStats() {
        return {
            bigDeal: {
                deck: this.decks.bigDeal.length,
                discard: this.discardPiles.bigDeal.length
            },
            smallDeal: {
                deck: this.decks.smallDeal.length,
                discard: this.discardPiles.smallDeal.length
            },
            market: {
                deck: this.decks.market.length,
                discard: this.discardPiles.market.length
            },
            expenses: {
                deck: this.decks.expenses.length,
                discard: this.discardPiles.expenses.length
            }
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞
    getPlayerAssets(playerId) {
        return this.playerAssets.get(playerId) || [];
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    getCurrentPlayerId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ GameState)
        try {
            if (window.gameState && typeof window.gameState.getUserId === 'function') {
                const id = window.gameState.getUserId();
                if (id) return String(id);
            }
        } catch (_) {}
        if (window.state && window.state.getCurrentPlayer) {
            const player = window.state.getCurrentPlayer();
            return player?.userId || player?.id;
        }
        
        if (window.playersManager && window.playersManager.getCurrentPlayer) {
            const player = window.playersManager.getCurrentPlayer();
            return player?.userId || player?.id;
        }
        
        // Fallback - –±–µ—Ä–µ–º –∏–∑ localStorage –∏–ª–∏ cookie
        const currentRoom = JSON.parse(localStorage.getItem('currentRoom') || '{}');
        return currentRoom.userId || localStorage.getItem('userId') || 'player1';
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ä—Ç –≤ UI
    updateDeckCounters() {
        setTimeout(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –ø–æ–ª–æ—Å–µ —Å–¥–µ–ª–æ–∫
            const bigDealCounters = document.querySelectorAll('.special-card.big-deal .special-metric');
            const smallDealCounters = document.querySelectorAll('.special-card.small-deal .special-metric');
            const marketCounters = document.querySelectorAll('.special-card.market .special-metric');
            const expenseCounters = document.querySelectorAll('.special-card.expense .special-metric');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–¥
            bigDealCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.bigDeal.length} –∫–∞—Ä—Ç`;
                }
            });
            
            smallDealCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.smallDeal.length} –∫–∞—Ä—Ç`;
                }
            });
            
            marketCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.market.length} –∫–∞—Ä—Ç`;
                }
            });
            
            expenseCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.expenses.length} –∫–∞—Ä—Ç`;
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–±–æ—è
            const bigDealDiscard = document.getElementById('bigDealDiscardCount');
            const smallDealDiscard = document.getElementById('smallDealDiscardCount');
            const marketDiscard = document.getElementById('marketDiscardCount');
            const expenseDiscard = document.getElementById('expenseDiscardCount');
            
            if (bigDealDiscard) bigDealDiscard.textContent = this.discardPiles.bigDeal.length;
            if (smallDealDiscard) smallDealDiscard.textContent = this.discardPiles.smallDeal.length;
            if (marketDiscard) marketDiscard.textContent = this.discardPiles.market.length;
            if (expenseDiscard) expenseDiscard.textContent = this.discardPiles.expenses.length;
            
            console.log('üé¥ DealsModule: –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç:', {
                bigDeal: this.decks.bigDeal.length,
                smallDeal: this.decks.smallDeal.length,
                market: this.decks.market.length,
                expenses: this.decks.expenses.length,
                discard: {
                    bigDeal: this.discardPiles.bigDeal.length,
                    smallDeal: this.discardPiles.smallDeal.length,
                    market: this.discardPiles.market.length,
                    expenses: this.discardPiles.expenses.length
                }
            });
        }, 100);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.DealsModule = DealsModule;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé¥ DealsModule: DOM loaded, initializing...');
    if (!window.dealsModule) {
        console.log('üé¥ DealsModule: Creating new instance...');
        window.dealsModule = new DealsModule();
    } else {
        console.log('üé¥ DealsModule: Already exists, skipping initialization');
    }
});
