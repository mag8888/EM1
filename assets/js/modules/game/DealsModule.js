// –ú–∏–∫—Ä–æ–º–æ–¥—É–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–¥–µ–ª–æ–∫
class DealsModule {
    constructor() {
        this.decks = {
            bigDeal: [],      // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏
            smallDeal: [],    // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏
            market: [],       // –†—ã–Ω–æ–∫
            expenses: []      // –†–∞—Å—Ö–æ–¥—ã
        };
        
        this.discardPiles = {
            bigDeal: [],
            smallDeal: [],
            market: [],
            expenses: []
        };
        
        this.playerAssets = new Map(); // –ö–∞—Ä—Ç–æ—á–∫–∏ —É –∏–≥—Ä–æ–∫–æ–≤
        this.currentDeal = null;       // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏
        this.isDealActive = false;     // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–¥–µ–ª–∫–∞
        
        this.init();
    }
    
    init() {
        console.log('üé¥ DealsModule: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫');
        this.loadDealsData();
        this.setupEventListeners();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    loadDealsData() {
        // –ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏ (24 –∫–∞—Ä—Ç—ã)
        this.decks.bigDeal = [
            {
                id: 'big_1',
                type: 'bigDeal',
                name: '–û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ',
                description: '–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
                cost: 50000,
                income: 5000,
                downPayment: 10000,
                monthlyPayment: 2000,
                icon: 'üè¢',
                category: 'realEstate'
            },
            {
                id: 'big_2',
                type: 'bigDeal',
                name: '–°–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                description: '–§—Ä–∞–Ω—à–∏–∑–∞ —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤',
                cost: 80000,
                income: 8000,
                downPayment: 15000,
                monthlyPayment: 3000,
                icon: 'üçΩÔ∏è',
                category: 'business'
            },
            {
                id: 'big_3',
                type: 'bigDeal',
                name: '–ê–∫—Ü–∏–∏ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                description: '–ü–∞–∫–µ—Ç –∞–∫—Ü–∏–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                cost: 30000,
                income: 3000,
                downPayment: 30000,
                monthlyPayment: 0,
                icon: 'üìà',
                category: 'stocks'
            }
            // –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 21 –∫–∞—Ä—Ç—É...
        ];
        
        // –ú–∞–ª—ã–µ —Å–¥–µ–ª–∫–∏ (32 –∫–∞—Ä—Ç—ã)
        this.decks.smallDeal = [
            {
                id: 'small_1',
                type: 'smallDeal',
                name: '–ê–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞',
                description: '–ê–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                cost: 5000,
                income: 500,
                downPayment: 5000,
                monthlyPayment: 0,
                icon: 'üìä',
                category: 'stocks'
            },
            {
                id: 'small_2',
                type: 'smallDeal',
                name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Å–¥–∞—á–∏',
                description: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∞—Ä–µ–Ω–¥—É',
                cost: 15000,
                income: 1500,
                downPayment: 3000,
                monthlyPayment: 600,
                icon: 'üè†',
                category: 'realEstate'
            },
            {
                id: 'small_3',
                type: 'smallDeal',
                name: '–ú–∞–ª–µ–Ω—å–∫–∏–π –±–∏–∑–Ω–µ—Å',
                description: '–ù–µ–±–æ–ª—å—à–æ–π –º–∞–≥–∞–∑–∏–Ω',
                cost: 10000,
                income: 1000,
                downPayment: 2000,
                monthlyPayment: 400,
                icon: 'üè™',
                category: 'business'
            }
            // –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 29 –∫–∞—Ä—Ç...
        ];
        
        // –†—ã–Ω–æ–∫ (24 –∫–∞—Ä—Ç—ã)
        this.decks.market = [
            {
                id: 'market_1',
                type: 'market',
                name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                description: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤—ã',
                discount: 0.2,
                icon: 'üéØ',
                category: 'special'
            },
            {
                id: 'market_2',
                type: 'market',
                name: '–ê–∫—Ü–∏–∏ —É–ø–∞–ª–∏',
                description: '–í—Å–µ –∞–∫—Ü–∏–∏ –¥–µ—à–µ–≤–ª–µ –Ω–∞ 30%',
                discount: 0.3,
                icon: 'üìâ',
                category: 'special'
            }
            // –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 22 –∫–∞—Ä—Ç—ã...
        ];
        
        // –†–∞—Å—Ö–æ–¥—ã (24 –∫–∞—Ä—Ç—ã)
        this.decks.expenses = [
            {
                id: 'expense_1',
                type: 'expenses',
                name: '–ù–∞–ª–æ–≥–∏',
                description: '–£–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤',
                cost: 2000,
                icon: 'üìã',
                category: 'mandatory'
            },
            {
                id: 'expense_2',
                type: 'expenses',
                name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                description: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞',
                cost: 1500,
                icon: 'üõ°Ô∏è',
                category: 'mandatory'
            }
            // –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 22 –∫–∞—Ä—Ç—ã...
        ];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã
        this.shuffleDeck('bigDeal');
        this.shuffleDeck('smallDeal');
        this.shuffleDeck('market');
        this.shuffleDeck('expenses');
        
        console.log('üé¥ DealsModule: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏:', {
            bigDeal: this.decks.bigDeal.length,
            smallDeal: this.decks.smallDeal.length,
            market: this.decks.market.length,
            expenses: this.decks.expenses.length
        });
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck(deckType) {
        const deck = this.decks[deckType];
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–µ—Ç–∫–∏ "—Å–¥–µ–ª–∫–∞"
        document.addEventListener('cellDealActivated', (event) => {
            this.showDealChoice(event.detail.playerId);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤—ã"
        document.addEventListener('assetsButtonClicked', () => {
            this.showAssetsCatalog();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–¥–µ–ª–æ–∫ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const dealsButtons = document.querySelectorAll('#dealsButton, #dealsBtn');
        dealsButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.showAssetsCatalog();
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–¥–µ–ª–æ–∫ –≤ –ø–æ–ª–æ—Å–µ
        const bigDealCards = document.querySelectorAll('.special-card.big-deal, .big-deal');
        const smallDealCards = document.querySelectorAll('.special-card.small-deal, .small-deal');
        
        bigDealCards.forEach(card => {
            card.addEventListener('click', () => {
                const currentPlayerId = this.getCurrentPlayerId();
                if (currentPlayerId) {
                    this.drawCard('bigDeal', currentPlayerId);
                }
            });
        });
        
        smallDealCards.forEach(card => {
            card.addEventListener('click', () => {
                const currentPlayerId = this.getCurrentPlayerId();
                if (currentPlayerId) {
                    this.drawCard('smallDeal', currentPlayerId);
                }
            });
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ —Å–¥–µ–ª–∫–∞—Ö
        document.addEventListener('dealOfferReceived', (event) => {
            const { playerId } = event.detail;
            this.showDealChoice(playerId);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ä—Ç –≤ UI
        this.updateDeckCounters();
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    showDealChoice(playerId) {
        const modal = this.createDealChoiceModal();
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞
        modal.querySelector('.big-deal-btn').addEventListener('click', () => {
            this.drawCard('bigDeal', playerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.small-deal-btn').addEventListener('click', () => {
            this.drawCard('smallDeal', playerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.cancel-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–¥–µ–ª–∫–∏
    createDealChoiceModal() {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content">
                <div class="deals-modal-header">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="deals-modal-body">
                    <div class="deal-options">
                        <button class="deal-btn big-deal-btn">
                            <div class="deal-icon">üíº</div>
                            <div class="deal-title">–ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-count">${this.decks.bigDeal.length} –∫–∞—Ä—Ç</div>
                        </button>
                        <button class="deal-btn small-deal-btn">
                            <div class="deal-icon">üì¶</div>
                            <div class="deal-title">–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞</div>
                            <div class="deal-count">${this.decks.smallDeal.length} –∫–∞—Ä—Ç</div>
                        </button>
                    </div>
                    <button class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addModalStyles();
        
        return modal;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    addModalStyles() {
        if (document.getElementById('deals-modal-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'deals-modal-styles';
        styles.textContent = `
            .deals-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            }
            
            .deals-modal-content {
                background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                border-radius: 20px;
                padding: 30px;
                max-width: 500px;
                width: 90%;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            }
            
            .deals-modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 30px;
            }
            
            .deals-modal-header h3 {
                color: #ffffff;
                font-size: 24px;
                font-weight: 700;
            }
            
            .close-btn {
                background: none;
                border: none;
                color: #ffffff;
                font-size: 24px;
                cursor: pointer;
                padding: 5px;
            }
            
            .deal-options {
                display: flex;
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .deal-btn {
                flex: 1;
                background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
                border: 2px solid #4a5568;
                border-radius: 15px;
                padding: 20px;
                cursor: pointer;
                transition: all 0.3s ease;
                color: #ffffff;
                text-align: center;
            }
            
            .deal-btn:hover {
                border-color: #48bb78;
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(72, 187, 120, 0.3);
            }
            
            .deal-icon {
                font-size: 32px;
                margin-bottom: 10px;
            }
            
            .deal-title {
                font-size: 18px;
                font-weight: 600;
                margin-bottom: 5px;
            }
            
            .deal-count {
                font-size: 14px;
                color: #a0a0a0;
            }
            
            .cancel-btn {
                width: 100%;
                background: #e53e3e;
                border: none;
                border-radius: 10px;
                padding: 15px;
                color: #ffffff;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: background 0.3s ease;
            }
            
            .cancel-btn:hover {
                background: #c53030;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
    drawCard(deckType, playerId) {
        if (this.decks[deckType].length === 0) {
            this.reshuffleDeck(deckType);
        }
        
        const card = this.decks[deckType].shift();
        this.currentDeal = card;
        this.isDealActive = true;
        
        console.log(`üé¥ DealsModule: –ò–≥—Ä–æ–∫ ${playerId} –≤–∑—è–ª –∫–∞—Ä—Ç—É ${card.name} –∏–∑ ${deckType}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
        this.showDealCard(card, playerId);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–¥–µ–ª–∫–∏
    showDealCard(card, playerId) {
        const modal = this.createDealCardModal(card);
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        modal.querySelector('.buy-btn').addEventListener('click', () => {
            this.buyCard(card, playerId);
            this.closeModal(modal);
        });
        
        modal.querySelector('.pass-btn').addEventListener('click', () => {
            this.passCard(card, deckType);
            this.closeModal(modal);
        });
        
        modal.querySelector('.transfer-btn').addEventListener('click', () => {
            this.showTransferOptions(card, playerId);
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ä—Ç—ã —Å–¥–µ–ª–∫–∏
    createDealCardModal(card) {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content deal-card-modal">
                <div class="deals-modal-header">
                    <h3>${card.name}</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="deal-card-content">
                    <div class="deal-card-icon">${card.icon}</div>
                    <div class="deal-card-description">${card.description}</div>
                    <div class="deal-card-details">
                        <div class="detail-row">
                            <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span class="cost">$${card.cost.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–î–æ—Ö–æ–¥:</span>
                            <span class="income">$${card.income.toLocaleString()}/–º–µ—Å</span>
                        </div>
                        <div class="detail-row">
                            <span>–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å:</span>
                            <span class="down-payment">$${card.downPayment.toLocaleString()}</span>
                        </div>
                        <div class="detail-row">
                            <span>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:</span>
                            <span class="monthly-payment">$${card.monthlyPayment.toLocaleString()}</span>
                        </div>
                    </div>
                    <div class="deal-card-actions">
                        <button class="action-btn buy-btn">–ö—É–ø–∏—Ç—å</button>
                        <button class="action-btn transfer-btn">–ü–µ—Ä–µ–¥–∞—Ç—å</button>
                        <button class="action-btn pass-btn">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            </div>
        `;
        
        return modal;
    }
    
    // –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç—ã
    buyCard(card, playerId) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∞–∫—Ç–∏–≤—ã –∏–≥—Ä–æ–∫–∞
        if (!this.playerAssets.has(playerId)) {
            this.playerAssets.set(playerId, []);
        }
        
        this.playerAssets.get(playerId).push(card);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–¥–µ–ª–∫—É
        this.currentDeal = null;
        this.isDealActive = false;
        
        console.log(`üé¥ DealsModule: –ò–≥—Ä–æ–∫ ${playerId} –∫—É–ø–∏–ª –∫–∞—Ä—Ç—É ${card.name}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∫—É–ø–∫–µ
        this.notifyCardBought(card, playerId);
    }
    
    // –û—Ç–∫–∞–∑ –æ—Ç –∫–∞—Ä—Ç—ã (–∫–∞—Ä—Ç–∞ –∏–¥–µ—Ç –≤ –æ—Ç–±–æ–π)
    passCard(card, deckType) {
        this.discardPiles[deckType].push(card);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–¥–µ–ª–∫—É
        this.currentDeal = null;
        this.isDealActive = false;
        
        console.log(`üé¥ DealsModule: –ö–∞—Ä—Ç–∞ ${card.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–±–æ–π ${deckType}`);
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏–∑ –æ—Ç–±–æ—è
    reshuffleDeck(deckType) {
        if (this.discardPiles[deckType].length === 0) {
            console.warn(`üé¥ DealsModule: –ù–µ—Ç –∫–∞—Ä—Ç –≤ –æ—Ç–±–æ–µ –¥–ª—è ${deckType}`);
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–±–æ—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–æ–¥—É
        this.decks[deckType] = [...this.discardPiles[deckType]];
        this.discardPiles[deckType] = [];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        this.shuffleDeck(deckType);
        
        console.log(`üé¥ DealsModule: –ö–æ–ª–æ–¥–∞ ${deckType} –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞ –∏–∑ –æ—Ç–±–æ—è`);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–æ–≤
    showAssetsCatalog() {
        const modal = this.createAssetsCatalogModal();
        document.body.appendChild(modal);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–æ–≤
    createAssetsCatalogModal() {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        let allAssets = [];
        this.playerAssets.forEach((assets, playerId) => {
            assets.forEach(asset => {
                allAssets.push({...asset, ownerId: playerId});
            });
        });
        
        modal.innerHTML = `
            <div class="deals-modal-content assets-catalog-modal">
                <div class="deals-modal-header">
                    <h3>–ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–æ–≤</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="assets-catalog-content">
                    <div class="assets-stats">
                        <div class="stat-item">
                            <span>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤:</span>
                            <span>${allAssets.length}</span>
                        </div>
                        <div class="stat-item">
                            <span>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span>$${allAssets.reduce((sum, asset) => sum + asset.cost, 0).toLocaleString()}</span>
                        </div>
                    </div>
                    <div class="assets-list">
                        ${allAssets.map(asset => `
                            <div class="asset-item">
                                <div class="asset-icon">${asset.icon}</div>
                                <div class="asset-info">
                                    <div class="asset-name">${asset.name}</div>
                                    <div class="asset-owner">–í–ª–∞–¥–µ–ª–µ—Ü: ${asset.ownerId}</div>
                                    <div class="asset-details">
                                        <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: $${asset.cost.toLocaleString()}</span>
                                        <span>–î–æ—Ö–æ–¥: $${asset.income.toLocaleString()}/–º–µ—Å</span>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        return modal;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç—ã
    showTransferOptions(card, fromPlayerId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        const otherPlayers = Array.from(this.playerAssets.keys()).filter(id => id !== fromPlayerId);
        
        if (otherPlayers.length === 0) {
            alert('–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç—ã');
            return;
        }
        
        const modal = this.createTransferModal(card, fromPlayerId, otherPlayers);
        document.body.appendChild(modal);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏
    createTransferModal(card, fromPlayerId, otherPlayers) {
        const modal = document.createElement('div');
        modal.className = 'deals-modal';
        modal.innerHTML = `
            <div class="deals-modal-content transfer-modal">
                <div class="deals-modal-header">
                    <h3>–ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="transfer-content">
                    <div class="card-preview">
                        <div class="card-icon">${card.icon}</div>
                        <div class="card-name">${card.name}</div>
                    </div>
                    <div class="players-list">
                        <h4>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:</h4>
                        ${otherPlayers.map(playerId => `
                            <button class="player-btn" data-player-id="${playerId}">
                                –ò–≥—Ä–æ–∫ ${playerId}
                            </button>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏
        modal.querySelectorAll('.player-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const toPlayerId = btn.dataset.playerId;
                this.transferCard(card, fromPlayerId, toPlayerId);
                this.closeModal(modal);
            });
        });
        
        modal.querySelector('.close-btn').addEventListener('click', () => {
            this.closeModal(modal);
        });
        
        return modal;
    }
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
    transferCard(card, fromPlayerId, toPlayerId) {
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const fromAssets = this.playerAssets.get(fromPlayerId) || [];
        const cardIndex = fromAssets.findIndex(asset => asset.id === card.id);
        if (cardIndex !== -1) {
            fromAssets.splice(cardIndex, 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if (!this.playerAssets.has(toPlayerId)) {
            this.playerAssets.set(toPlayerId, []);
        }
        this.playerAssets.get(toPlayerId).push(card);
        
        console.log(`üé¥ DealsModule: –ö–∞—Ä—Ç–∞ ${card.name} –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç ${fromPlayerId} –∫ ${toPlayerId}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–¥–∞—á–µ
        this.notifyCardTransferred(card, fromPlayerId, toPlayerId);
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifyCardBought(card, playerId) {
        const event = new CustomEvent('cardBought', {
            detail: { card, playerId }
        });
        document.dispatchEvent(event);
    }
    
    notifyCardTransferred(card, fromPlayerId, toPlayerId) {
        const event = new CustomEvent('cardTransferred', {
            detail: { card, fromPlayerId, toPlayerId }
        });
        document.dispatchEvent(event);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal(modal) {
        if (modal && modal.parentNode) {
            modal.parentNode.removeChild(modal);
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–¥
    getDeckStats() {
        return {
            bigDeal: {
                deck: this.decks.bigDeal.length,
                discard: this.discardPiles.bigDeal.length
            },
            smallDeal: {
                deck: this.decks.smallDeal.length,
                discard: this.discardPiles.smallDeal.length
            },
            market: {
                deck: this.decks.market.length,
                discard: this.discardPiles.market.length
            },
            expenses: {
                deck: this.decks.expenses.length,
                discard: this.discardPiles.expenses.length
            }
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞
    getPlayerAssets(playerId) {
        return this.playerAssets.get(playerId) || [];
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    getCurrentPlayerId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (window.state && window.state.getCurrentPlayer) {
            const player = window.state.getCurrentPlayer();
            return player?.userId || player?.id;
        }
        
        if (window.playersManager && window.playersManager.getCurrentPlayer) {
            const player = window.playersManager.getCurrentPlayer();
            return player?.userId || player?.id;
        }
        
        // Fallback - –±–µ—Ä–µ–º –∏–∑ localStorage –∏–ª–∏ cookie
        const currentRoom = JSON.parse(localStorage.getItem('currentRoom') || '{}');
        return currentRoom.userId || 'player1';
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ä—Ç –≤ UI
    updateDeckCounters() {
        setTimeout(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –ø–æ–ª–æ—Å–µ —Å–¥–µ–ª–æ–∫
            const bigDealCounters = document.querySelectorAll('.special-card.big-deal .special-metric');
            const smallDealCounters = document.querySelectorAll('.special-card.small-deal .special-metric');
            
            bigDealCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.bigDeal.length} –∫–∞—Ä—Ç`;
                }
            });
            
            smallDealCounters.forEach(counter => {
                if (counter.textContent.includes('–∫–∞—Ä—Ç')) {
                    counter.textContent = `${this.decks.smallDeal.length} –∫–∞—Ä—Ç`;
                }
            });
        }, 100);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.DealsModule = DealsModule;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé¥ DealsModule: DOM loaded, initializing...');
    if (!window.dealsModule) {
        console.log('üé¥ DealsModule: Creating new instance...');
        window.dealsModule = new DealsModule();
    } else {
        console.log('üé¥ DealsModule: Already exists, skipping initialization');
    }
});
