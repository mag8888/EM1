/**
 * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏, –∫—Ä–µ–¥–∏—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 */

export class BankModule {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.isOpen = false;
        this.transactionHistory = [];
        this.maxHistorySize = 100;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üè¶ BankModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('playerBalanceChanged', this.onPlayerBalanceChanged.bind(this));
        this.gameCore.eventBus.on('playerBankrupted', this.onPlayerBankrupted.bind(this));
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    openBank() {
        if (this.isDestroyed) {
            console.warn('BankModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
            return false;
        }

        if (this.isOpen) {
            console.log('–ë–∞–Ω–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç');
            return true;
        }

        this.isOpen = true;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–∞–Ω–∫–∞
        this.createBankModal();
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.emit('bankOpened', {
            timestamp: Date.now()
        });
        
        console.log('üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫—Ä—ã—Ç');
        return true;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    closeBank() {
        if (!this.isOpen) {
            return true;
        }

        this.isOpen = false;
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.removeBankModal();
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.emit('bankClosed', {
            timestamp: Date.now()
        });
        
        console.log('üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–∫—Ä—ã—Ç');
        return true;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–∞–Ω–∫–∞
     */
    createBankModal() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (document.getElementById('bankModal')) {
            return;
        }

        const modal = document.createElement('div');
        modal.id = 'bankModal';
        modal.className = 'bank-modal';
        modal.innerHTML = this.getBankModalHTML();
        
        document.body.appendChild(modal);
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.bindBankModalEvents(modal);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
            modal.style.display = 'flex';
            modal.classList.add('show');
        }, 10);
    }

    /**
     * HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–∞–Ω–∫–∞
     */
    getBankModalHTML() {
        return `
            <div class="bank-modal-content">
                <div class="bank-modal-header">
                    <div class="bank-header-left">
                        <div class="bank-icon">üè¶</div>
                        <h2 class="bank-modal-title">–ë–∞–Ω–∫ "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"</h2>
                    </div>
                    <button class="bank-modal-close" id="closeBankBtn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="bank-modal-body">
                    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                    <div class="bank-info-column">
                        <!-- –°—Ç–∞—Ç—É—Å –±–∞–Ω–∫–∞ -->
                        <div class="bank-status-section">
                            <div class="bank-status-header">
                                <div class="bank-icon-small">üè¶</div>
                                <span class="bank-status-label">–°—Ç–∞—Ç—É—Å</span>
                            </div>
                            <div class="bank-status-badge active">
                                <i class="fas fa-check-circle"></i>
                                –ê–∫—Ç–∏–≤–µ–Ω
                            </div>
                        </div>
                        
                        <!-- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å -->
                        <div class="bank-balance-section">
                            <div class="balance-header">
                                <i class="fas fa-wallet"></i>
                                <span>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</span>
                            </div>
                            <div id="bankCurrentBalance" class="balance-amount">$0</div>
                        </div>
                        
                        <!-- –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ -->
                        <div class="financial-summary">
                            <h3>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞</h3>
                            <div class="summary-item">
                                <span class="summary-label">–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:</span>
                                <span id="bankMonthlyIncome" class="summary-value income">$0</span>
                            </div>
                            <div class="summary-item">
                                <span class="summary-label">–ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</span>
                                <span id="bankMonthlyExpenses" class="summary-value expense">$0</span>
                            </div>
                            <div class="summary-item">
                                <span class="summary-label">–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥:</span>
                                <span id="bankPassiveIncome" class="summary-value income">$0</span>
                            </div>
                        </div>
                        
                        <!-- –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                        <div class="credit-section">
                            <h3>–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                            <div class="credit-info">
                                <div class="credit-item">
                                    <span class="credit-label">–¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç:</span>
                                    <span id="bankCreditAmount" class="credit-value">$0</span>
                                </div>
                                <div class="credit-item">
                                    <span class="credit-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç:</span>
                                    <span id="bankMaxCredit" class="credit-value">$0</span>
                                </div>
                                <div class="credit-item">
                                    <span class="credit-label">–°—Ç–∞—Ç—É—Å:</span>
                                    <span id="bankCreditStatus" class="credit-status">–ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û–ø–µ—Ä–∞—Ü–∏–∏ -->
                    <div class="bank-operations-column">
                        <!-- –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -->
                        <div class="credit-operations">
                            <h3>–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
                            <div class="operation-group">
                                <label for="creditAmount">–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:</label>
                                <input type="number" id="creditAmount" min="1000" step="1000" placeholder="1000">
                                <button id="requestCreditBtn" class="btn btn-primary">
                                    <i class="fas fa-hand-holding-usd"></i>
                                    –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
                                </button>
                            </div>
                            <div class="operation-group">
                                <label for="payoffAmount">–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è:</label>
                                <input type="number" id="payoffAmount" min="1000" step="1000" placeholder="1000">
                                <button id="payoffCreditBtn" class="btn btn-success">
                                    <i class="fas fa-check"></i>
                                    –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
                                </button>
                            </div>
                        </div>
                        
                        <!-- –ü–µ—Ä–µ–≤–æ–¥—ã -->
                        <div class="transfer-operations">
                            <h3>–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏</h3>
                            <div class="operation-group">
                                <label for="transferRecipient">–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</label>
                                <select id="transferRecipient">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                </select>
                            </div>
                            <div class="operation-group">
                                <label for="transferAmount">–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:</label>
                                <input type="number" id="transferAmount" min="1" placeholder="100">
                            </div>
                            <div class="operation-group">
                                <label for="transferDescription">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                                <input type="text" id="transferDescription" placeholder="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞">
                            </div>
                            <button id="transferMoneyBtn" class="btn btn-warning">
                                <i class="fas fa-exchange-alt"></i>
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                            </button>
                        </div>
                        
                        <!-- –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π -->
                        <div class="transactions-history">
                            <h3>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
                            <div id="transactionsList" class="transactions-list">
                                <!-- –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @param {HTMLElement} modal - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    bindBankModalEvents(modal) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.querySelector('#closeBankBtn').addEventListener('click', () => {
            this.closeBank();
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeBank();
            }
        });
        
        // –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        modal.querySelector('#requestCreditBtn').addEventListener('click', () => {
            this.handleCreditRequest();
        });
        
        modal.querySelector('#payoffCreditBtn').addEventListener('click', () => {
            this.handleCreditPayoff();
        });
        
        // –ü–µ—Ä–µ–≤–æ–¥—ã
        modal.querySelector('#transferMoneyBtn').addEventListener('click', () => {
            this.handleTransfer();
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.updateBankData();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±–∞–Ω–∫–∞
     */
    removeBankModal() {
        const modal = document.getElementById('bankModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
     */
    updateBankData() {
        const playerManager = this.gameCore.getModule('playerManager');
        const currentPlayer = playerManager.getCurrentPlayer();
        
        if (!currentPlayer) {
            return;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        const balanceElement = document.getElementById('bankCurrentBalance');
        if (balanceElement) {
            balanceElement.textContent = `$${currentPlayer.balance.toLocaleString()}`;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
        const incomeElement = document.getElementById('bankMonthlyIncome');
        if (incomeElement) {
            incomeElement.textContent = `$${currentPlayer.monthlyIncome.toLocaleString()}`;
        }

        const expensesElement = document.getElementById('bankMonthlyExpenses');
        if (expensesElement) {
            expensesElement.textContent = `$${currentPlayer.monthlyExpenses.toLocaleString()}`;
        }

        const passiveElement = document.getElementById('bankPassiveIncome');
        if (passiveElement) {
            passiveElement.textContent = `$${currentPlayer.passiveIncome.toLocaleString()}`;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const creditElement = document.getElementById('bankCreditAmount');
        if (creditElement) {
            creditElement.textContent = `$${currentPlayer.creditAmount.toLocaleString()}`;
        }

        const maxCreditElement = document.getElementById('bankMaxCredit');
        if (maxCreditElement) {
            const maxCredit = currentPlayer.monthlyIncome * 10; // 10x –æ—Ç PAYDAY
            maxCreditElement.textContent = `$${maxCredit.toLocaleString()}`;
        }

        const statusElement = document.getElementById('bankCreditStatus');
        if (statusElement) {
            if (currentPlayer.isBankrupt) {
                statusElement.textContent = '–ö—Ä–µ–¥–∏—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)';
                statusElement.className = 'credit-status blocked';
            } else if (currentPlayer.creditAmount > 0) {
                statusElement.textContent = '–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç';
                statusElement.className = 'credit-status active';
            } else {
                statusElement.textContent = '–ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç';
                statusElement.className = 'credit-status available';
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        this.updateTransferRecipients();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        this.updateTransactionsHistory();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
     */
    updateTransferRecipients() {
        const selectElement = document.getElementById('transferRecipient');
        if (!selectElement) {
            return;
        }

        const playerManager = this.gameCore.getModule('playerManager');
        const players = playerManager.getActivePlayers();
        const currentPlayer = playerManager.getCurrentPlayer();

        // –û—á–∏—Å—Ç–∫–∞ –æ–ø—Ü–∏–π
        selectElement.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>';

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
        players.forEach(player => {
            if (player.id !== currentPlayer.id) {
                const option = document.createElement('option');
                option.value = player.id;
                option.textContent = player.name;
                selectElement.appendChild(option);
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞
     */
    handleCreditRequest() {
        const amountInput = document.getElementById('creditAmount');
        const amount = parseInt(amountInput.value);

        if (!amount || amount < 1000) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: $1,000');
            return;
        }

        if (amount % 1000 !== 0) {
            alert('–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ $1,000');
            return;
        }

        const playerManager = this.gameCore.getModule('playerManager');
        const currentPlayer = playerManager.getCurrentPlayer();

        if (!currentPlayer) {
            alert('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
        if (currentPlayer.isBankrupt) {
            alert('–ö—Ä–µ–¥–∏—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ (10x –æ—Ç PAYDAY)
        const maxCredit = currentPlayer.monthlyIncome * 10;
        if (amount > maxCredit) {
            alert(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $${maxCredit.toLocaleString()}`);
            return;
        }

        // –í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–∞
        playerManager.updateBalance(currentPlayer.id, amount, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞');
        playerManager.updatePlayer(currentPlayer.id, {
            creditAmount: currentPlayer.creditAmount + amount
        });

        // –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addTransaction({
            type: 'credit_request',
            amount: amount,
            description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞',
            timestamp: Date.now()
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this.updateBankData();
        
        alert(`–ö—Ä–µ–¥–∏—Ç $${amount.toLocaleString()} –ø–æ–ª—É—á–µ–Ω`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
     */
    handleCreditPayoff() {
        const amountInput = document.getElementById('payoffAmount');
        const amount = parseInt(amountInput.value);

        if (!amount || amount < 1000) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: $1,000');
            return;
        }

        if (amount % 1000 !== 0) {
            alert('–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ $1,000');
            return;
        }

        const playerManager = this.gameCore.getModule('playerManager');
        const currentPlayer = playerManager.getCurrentPlayer();

        if (!currentPlayer) {
            alert('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (currentPlayer.creditAmount <= 0) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞');
            return;
        }

        if (amount > currentPlayer.creditAmount) {
            alert(`–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ ($${currentPlayer.creditAmount.toLocaleString()})`);
            return;
        }

        if (amount > currentPlayer.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è');
            return;
        }

        // –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
        playerManager.updateBalance(currentPlayer.id, -amount, '–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞');
        playerManager.updatePlayer(currentPlayer.id, {
            creditAmount: currentPlayer.creditAmount - amount
        });

        // –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addTransaction({
            type: 'credit_payoff',
            amount: -amount,
            description: '–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞',
            timestamp: Date.now()
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this.updateBankData();
        
        alert(`–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω –Ω–∞ —Å—É–º–º—É $${amount.toLocaleString()}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    handleTransfer() {
        const recipientSelect = document.getElementById('transferRecipient');
        const amountInput = document.getElementById('transferAmount');
        const descriptionInput = document.getElementById('transferDescription');

        const recipientId = recipientSelect.value;
        const amount = parseInt(amountInput.value);
        const description = descriptionInput.value.trim();

        if (!recipientId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
            return;
        }

        if (!amount || amount <= 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        if (!description) {
            alert('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞');
            return;
        }

        const playerManager = this.gameCore.getModule('playerManager');
        const currentPlayer = playerManager.getCurrentPlayer();
        const recipient = playerManager.getPlayer(recipientId);

        if (!currentPlayer || !recipient) {
            alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
            return;
        }

        if (amount > currentPlayer.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            return;
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        playerManager.updateBalance(currentPlayer.id, -amount, `–ü–µ—Ä–µ–≤–æ–¥: ${description}`);
        playerManager.updateBalance(recipientId, amount, `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç ${currentPlayer.name}: ${description}`);

        // –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addTransaction({
            type: 'transfer',
            amount: -amount,
            description: `–ü–µ—Ä–µ–≤–æ–¥ ${recipient.name}: ${description}`,
            timestamp: Date.now()
        });

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        recipientSelect.value = '';
        amountInput.value = '';
        descriptionInput.value = '';

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this.updateBankData();
        
        alert(`–ü–µ—Ä–µ–≤–æ–¥ $${amount.toLocaleString()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É ${recipient.name}`);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {Object} transaction - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
     */
    addTransaction(transaction) {
        this.transactionHistory.push({
            ...transaction,
            id: this.generateTransactionId()
        });

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.transactionHistory.length > this.maxHistorySize) {
            this.transactionHistory.shift();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    updateTransactionsHistory() {
        const listElement = document.getElementById('transactionsList');
        if (!listElement) {
            return;
        }

        listElement.innerHTML = '';

        if (this.transactionHistory.length === 0) {
            listElement.innerHTML = '<div class="no-transactions">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
            return;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
        const recentTransactions = this.transactionHistory.slice(-10).reverse();

        recentTransactions.forEach(transaction => {
            const transactionElement = document.createElement('div');
            transactionElement.className = 'transaction-item';
            
            const amountClass = transaction.amount > 0 ? 'positive' : 'negative';
            const amountText = transaction.amount > 0 ? 
                `+$${transaction.amount.toLocaleString()}` : 
                `-$${Math.abs(transaction.amount).toLocaleString()}`;
            
            transactionElement.innerHTML = `
                <div class="transaction-info">
                    <div class="transaction-description">${transaction.description}</div>
                    <div class="transaction-time">${this.formatTime(transaction.timestamp)}</div>
                </div>
                <div class="transaction-amount ${amountClass}">${amountText}</div>
            `;
            
            listElement.appendChild(transactionElement);
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
     */
    formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    generateTransactionId() {
        return `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getTransactionHistory(limit = 10) {
        return this.transactionHistory.slice(-limit);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        const totalTransactions = this.transactionHistory.length;
        const transactionTypes = {};
        
        this.transactionHistory.forEach(transaction => {
            const type = transaction.type;
            transactionTypes[type] = (transactionTypes[type] || 0) + 1;
        });
        
        return {
            totalTransactions,
            transactionTypes,
            isOpen: this.isOpen
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onPlayerBalanceChanged(data) {
        if (this.isOpen) {
            this.updateBankData();
        }
    }

    onPlayerBankrupted(data) {
        if (this.isOpen) {
            this.updateBankData();
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è
     */
    destroy() {
        this.closeBank();
        this.transactionHistory = [];
        this.isDestroyed = true;
        console.log('üóëÔ∏è BankModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default BankModule;
