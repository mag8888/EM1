// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
class GameDataApi {
    constructor() {
        this.baseUrl = window.location.origin;
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    }

    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        } catch (error) {
            console.error(`‚ùå API Error for ${endpoint}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    async getPlayersData(roomId = null) {
        const cacheKey = `players_${roomId || 'default'}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìä GameDataApi: Using cached players data');
                return cached.data;
            }
        }

        try {
            const endpoint = roomId ? `/api/rooms/${roomId}/players` : '/api/players';
            const data = await this.request(endpoint);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            console.log('üìä GameDataApi: Loaded players data from server:', data.length, 'players');
            return data;
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataApi: Failed to load players data, using fallback');
            return this.getFallbackPlayersData();
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    async getProfessionsData() {
        const cacheKey = 'professions';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìä GameDataApi: Using cached professions data');
                return cached.data;
            }
        }

        try {
            const data = await this.request('/api/professions');
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            console.log('üìä GameDataApi: Loaded professions data from server:', data.length, 'professions');
            return data;
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataApi: Failed to load professions data, using fallback');
            return this.getFallbackProfessionsData();
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫
    async getDealsData() {
        const cacheKey = 'deals';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìä GameDataApi: Using cached deals data');
                return cached.data;
            }
        }

        try {
            const data = await this.request('/api/deals');
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            console.log('üìä GameDataApi: Loaded deals data from server:', data);
            return data;
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataApi: Failed to load deals data, using fallback');
            return this.getFallbackDealsData();
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    async getBankData(playerId = null) {
        const cacheKey = `bank_${playerId || 'default'}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìä GameDataApi: Using cached bank data');
                return cached.data;
            }
        }

        try {
            const endpoint = playerId ? `/api/players/${playerId}/bank` : '/api/bank';
            const data = await this.request(endpoint);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            console.log('üìä GameDataApi: Loaded bank data from server:', data);
            return data;
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataApi: Failed to load bank data, using fallback');
            return this.getFallbackBankData();
        }
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    getFallbackPlayersData() {
        return [
            {
                id: 'player_1',
                name: '–ê–ª–µ–∫—Å–µ–π',
                profession: { name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', salary: 10000, expenses: 6200 },
                cash: 10000,
                assets: 0,
                income: 10000,
                expenses: 6200,
                isHost: true,
                isReady: true
            },
            {
                id: 'player_2',
                name: '–ú–∞—Ä–∏—è',
                profession: { name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', salary: 10000, expenses: 6200 },
                cash: 10000,
                assets: 0,
                income: 10000,
                expenses: 6200,
                isHost: false,
                isReady: true
            }
        ];
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    getFallbackProfessionsData() {
        return [
            {
                id: 'entrepreneur',
                name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
                description: '–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
                salary: 10000,
                expenses: 6200,
                cashFlow: 3800,
                color: '#00ff96',
                icon: 'üöÄ'
            },
            {
                id: 'doctor',
                name: '–í—Ä–∞—á',
                description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—ã',
                salary: 8000,
                expenses: 4500,
                cashFlow: 3500,
                color: '#ff6b6b',
                icon: 'üë®‚Äç‚öïÔ∏è'
            }
        ];
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–æ–∫
    getFallbackDealsData() {
        return {
            big: [
                { id: 1, name: '–û—Ç–µ–ª—å –Ω–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è', cost: 500000, income: 25000, type: 'real_estate', icon: 'üè®' }
            ],
            small: [
                { id: 1, name: '–ö–æ—Ñ–µ–π–Ω—è', cost: 50000, income: 3000, type: 'business', icon: '‚òï' }
            ],
            market: [
                { id: 1, name: '–ê–∫—Ü–∏–∏ Apple', cost: 10000, income: 500, type: 'stocks', icon: 'üìà' }
            ],
            expenses: [
                { id: 1, name: '–ù–∞–ª–æ–≥–∏', cost: 1300, type: 'tax', icon: 'üìä' }
            ]
        };
    }

    // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞
    getFallbackBankData() {
        return {
            credits: [
                { type: 'personal', amount: 50000, rate: 15, term: 36 },
                { type: 'business', amount: 100000, rate: 12, term: 60 }
            ],
            investments: [
                { type: 'stocks', minAmount: 1000, expectedReturn: 12, risk: 'high' },
                { type: 'bonds', minAmount: 5000, expectedReturn: 6, risk: 'low' }
            ]
        };
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
    clearCache() {
        this.cache.clear();
        console.log('üìä GameDataApi: Cache cleared');
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    clearCacheKey(key) {
        this.cache.delete(key);
        console.log('üìä GameDataApi: Cache cleared for key:', key);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys()),
            entries: Array.from(this.cache.entries()).map(([key, value]) => ({
                key,
                age: Date.now() - value.timestamp,
                size: JSON.stringify(value.data).length
            }))
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.GameDataApi = GameDataApi;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìä GameDataApi: DOM loaded, initializing...');
    if (!window.gameDataApi) {
        console.log('üìä GameDataApi: Creating new instance...');
        window.gameDataApi = new GameDataApi();
    } else {
        console.log('üìä GameDataApi: Already exists, skipping initialization');
    }
});
