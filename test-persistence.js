#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–≥—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const Database = require('./database-sqlite');
const roomState = require('./services/room-state');

async function testPersistence() {
    console.log('üß™ === –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = new Database();
    await db.init();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑—É –≤ room-state
    const { setDatabase, forceSaveAllRooms, rooms, users } = roomState;
    setDatabase(db);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await roomState.loadUsersFromDatabase(db);
    await roomState.loadRoomsFromDatabase();
    
    console.log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: ${users.size}`);
    console.log(`   - –ö–æ–º–Ω–∞—Ç –≤ –ø–∞–º—è—Ç–∏: ${rooms.size}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    const dbUsers = await db.getAllUsers();
    const dbRooms = await db.getAllRooms();
    
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${dbUsers.length}`);
    console.log(`   - –ö–æ–º–Ω–∞—Ç –≤ –±–∞–∑–µ: ${dbRooms.length}`);
    
    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (dbUsers.length > 0) {
        console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
        for (const user of dbUsers) {
            console.log(`   - ${user.email} (${user.first_name} ${user.last_name})`);
        }
    }
    
    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–Ω–∞—Ç
    if (dbRooms.length > 0) {
        console.log('\nüè† –ö–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ:');
        for (const room of dbRooms) {
            console.log(`   - ${room.name} (ID: ${room.id}, –°—Ç–∞—Ç—É—Å: ${room.status})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
            const roomWithPlayers = await db.getRoomWithPlayers(room.id);
            if (roomWithPlayers.players) {
                console.log(`     –ò–≥—Ä–æ–∫–∏ (${roomWithPlayers.players.length}):`);
                for (const player of roomWithPlayers.players) {
                    console.log(`       - ${player.name} (${player.is_host ? '–•–æ—Å—Ç' : '–ò–≥—Ä–æ–∫'})`);
                    if (player.selected_dream) {
                        console.log(`         –ú–µ—á—Ç–∞: ${player.selected_dream}`);
                    }
                    if (player.selected_token) {
                        console.log(`         –§–∏—à–∫–∞: ${player.selected_token}`);
                    }
                }
            }
        }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    console.log('\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
    const saveResult = await forceSaveAllRooms();
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saveResult ? '–£—Å–ø–µ—à–Ω–æ' : '–° –æ—à–∏–±–∫–∞–º–∏'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const [roomId, room] of rooms) {
        const dbRoom = await db.getRoomWithPlayers(roomId);
        if (!dbRoom.room) {
            console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${room.name} (${roomId}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        } else {
            console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} (${roomId}) –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            const memoryPlayers = room.players;
            const dbPlayers = dbRoom.players || [];
            
            if (memoryPlayers.length !== dbPlayers.length) {
                console.log(`‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name}: –ø–∞–º—è—Ç—å=${memoryPlayers.length}, –±–∞–∑–∞=${dbPlayers.length}`);
            } else {
                console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room.name} —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${memoryPlayers.length}`);
            }
        }
    }
    
    console.log('\nüéØ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPersistence().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
});
