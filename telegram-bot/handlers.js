const config = require('./config');
const Keyboards = require('./keyboards');
const Database = require('./database');

class Handlers {
    constructor(bot, db) {
        this.bot = bot;
        this.db = db;
        this.setupHandlers();
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start(.*)/, (msg, match) => {
            this.handleStart(msg, match);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
        this.bot.on('callback_query', (callbackQuery) => {
            this.handleCallbackQuery(callbackQuery);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => {
            this.handleMessage(msg);
        });
    }

    async handleStart(msg, match) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;
        const username = msg.from.username;
        const firstName = msg.from.first_name;
        const lastName = msg.from.last_name;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        const referralCode = match[1] ? match[1].trim() : null;
        let referredBy = null;

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await this.db.getUser(telegramId);
        let justRegistered = false;
        if (!user) {
            try {
                const userReferralCode = this.db.generateReferralCode(telegramId);
                await this.db.createUser({
                    telegramId,
                    username,
                    firstName,
                    lastName,
                    referralCode: userReferralCode,
                    referredBy
                });
                user = await this.db.getUser(telegramId);
                justRegistered = true;
            } catch (error) {
                if (error.code === 'SQLITE_CONSTRAINT') {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                    user = await this.db.getUser(telegramId);
                } else {
                    throw error;
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if (referralCode && referralCode !== user.referral_code) {
            const referrer = await this.findUserByReferralCode(referralCode);
            if (referrer && !user.referred_by) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.db.db.run(
                    'UPDATE users SET referred_by = ? WHERE telegram_id = ?',
                    [referrer.telegram_id, telegramId]
                );

                // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
                await this.db.createReferral(referrer.telegram_id, telegramId, config.REFERRAL_BONUS);
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                await this.db.updateUserBalance(referrer.telegram_id, config.REFERRAL_BONUS);
                
                // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await this.db.createTransaction(
                    referrer.telegram_id,
                    'referral_bonus',
                    config.REFERRAL_BONUS,
                    `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${firstName || username}`
                );

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                this.bot.sendMessage(
                    referrer.telegram_id,
                    `üéâ –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${config.REFERRAL_BONUS}$!\n` +
                    `üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: ${firstName || username}\n` +
                    `üéÆ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É –∏ —Ç—Ä–∞—Ç—å—Ç–µ –±–æ–Ω—É—Å—ã!`
                );
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ
        this.bot.sendPhoto(
            chatId,
            config.MEDIA.WELCOME_PHOTO,
            {
                caption: config.MESSAGES.WELCOME,
                ...Keyboards.getMainMenu()
            }
        );

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        if (justRegistered) {
            setTimeout(() => {
                this.bot.sendMessage(
                    chatId,
                    '–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 10$ ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ 10$, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∏–≥—Ä—É'
                ).catch(() => {});
            }, 30000);
        }
    }

    async handleCallbackQuery(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;
        const telegramId = callbackQuery.from.id;

        try {
            await this.bot.answerCallbackQuery(callbackQuery.id);

            switch (data) {
                case 'main_menu':
                    await this.showMainMenu(chatId, messageId);
                    break;

                case 'about_project':
                    await this.showAboutProject(chatId, messageId);
                    break;

                case 'get_clients':
                    await this.showGetClients(chatId, messageId);
                    break;

                case 'earn_money':
                    await this.showEarnMoney(chatId, messageId);
                    break;

                case 'play_game':
                    await this.showPlayGame(chatId, messageId, telegramId);
                    break;

                case 'community':
                    await this.showCommunity(chatId, messageId);
                    break;

                case 'become_master':
                    await this.handleBecomeMaster(chatId, messageId);
                    break;

                case 'invite_friend':
                    await this.showInviteFriend(chatId, messageId);
                    break;

                case 'my_partners':
                    await this.showMyPartners(chatId, messageId);
                    break;

                case 'partner_stats':
                    await this.showPartnerStats(chatId, messageId);
                    break;

                case 'partner_list':
                    await this.showPartnerList(chatId, messageId);
                    break;

                case 'watch_about_video':
                    await this.showAboutVideo(chatId, messageId);
                    break;

                case 'watch_community_video':
                    await this.showCommunityVideo(chatId, messageId);
                    break;

                case 'watch_game_video':
                    await this.showGameVideo(chatId, messageId);
                    break;

                case 'close':
                    await this.bot.deleteMessage(chatId, messageId);
                    break;

                default:
                    if (data.startsWith('copy_link_')) {
                        const referralCode = data.replace('copy_link_', '');
                        await this.copyReferralLink(chatId, referralCode);
                    } else if (data.startsWith('copy_code_')) {
                        const referralCode = data.replace('copy_code_', '');
                        await this.copyReferralCode(chatId, referralCode);
                    }
                    break;
            }
        } catch (error) {
            console.error('Error handling callback query:', error);
        }
    }

    async handleMessage(msg) {
        if (!msg || !msg.text) return;
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;
        const text = (msg.text || '').trim();

        try {
            if (text.includes('–û –ø—Ä–æ–µ–∫—Ç–µ')) {
                await this.showAboutProject(chatId);
                return;
            }

            if (text.includes('–î–æ—Ö–æ–¥')) {
                await this.showEarnMoney(chatId);
                return;
            }

            if (text.includes('–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤')) {
                await this.showGetClients(chatId);
                return;
            }

            if (text.includes('–ò–≥—Ä–∞—Ç—å')) {
                await this.showPlayGame(chatId, null, telegramId);
                return;
            }

            if (text.includes('–°–æ–æ–±—â–µ—Å—Ç–≤–æ')) {
                await this.showCommunity(chatId);
                return;
            }

            if (text.includes('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')) {
                await this.showMainMenu(chatId);
                return;
            }
        } catch (error) {
            console.error('Error handling message:', error);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    async showMainMenu(chatId, messageId) {
        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getMainMenu()
        };

        if (messageId) {
            await this.bot.editMessageText('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:', payload);
        } else {
            await this.bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:', payload);
        }
    }

    async showAboutProject(chatId, messageId) {
        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getAboutProjectKeyboard()
        };
        if (messageId) {
            await this.bot.editMessageText(config.MESSAGES.ABOUT_PROJECT, payload);
        } else {
            await this.bot.sendPhoto(chatId, config.MEDIA.ABOUT_PROJECT, {
                caption: config.MESSAGES.ABOUT_PROJECT,
                ...Keyboards.getAboutProjectKeyboard()
            });
        }
    }

    async showGetClients(chatId, messageId) {
        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getGetClientsKeyboard()
        };
        if (messageId) {
            await this.bot.editMessageText(config.MESSAGES.GET_CLIENTS, payload);
        } else {
            await this.bot.sendPhoto(chatId, config.MEDIA.GET_CLIENTS, {
                caption: config.MESSAGES.GET_CLIENTS,
                ...Keyboards.getGetClientsKeyboard()
            });
        }
    }

    async showEarnMoney(chatId, messageId) {
        const user = await this.db.getUser(chatId);
        const balance = user && typeof user.balance === 'number' ? user.balance : 0;
        const header = `üí∞ –î–æ—Ö–æ–¥_____ –ë–∞–ª–∞–Ω—Å ${balance.toFixed(2)}$`;
        const body = (config.MESSAGES.EARN_MONEY || '').replace(/^.*?\n/, '');
        const text = `${header}\n\n${body}`.trim();

        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getEarnMoneyKeyboard()
        };
        if (messageId) {
            await this.bot.editMessageText(text, payload);
        } else {
            await this.bot.sendPhoto(chatId, config.MEDIA.EARN_MONEY, {
                caption: text,
                ...Keyboards.getEarnMoneyKeyboard()
            });
        }
    }

    async showPlayGame(chatId, messageId, telegramId = null) {
        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getPlayGameKeyboard(telegramId)
        };
        if (messageId) {
            await this.bot.editMessageText(config.MESSAGES.PLAY_GAME, payload);
        } else {
            await this.bot.sendPhoto(chatId, config.MEDIA.PLAY_GAME, {
                caption: config.MESSAGES.PLAY_GAME,
                ...Keyboards.getPlayGameKeyboard(telegramId)
            });
        }
    }

    async showCommunity(chatId, messageId) {
        const payload = {
            chat_id: chatId,
            ...(messageId ? { message_id: messageId } : {}),
            ...Keyboards.getCommunityKeyboard()
        };
        if (messageId) {
            await this.bot.editMessageText(config.MESSAGES.COMMUNITY, payload);
        } else {
            await this.bot.sendPhoto(chatId, config.MEDIA.COMMUNITY, {
                caption: config.MESSAGES.COMMUNITY,
                ...Keyboards.getCommunityKeyboard()
            });
        }
    }

    async handleBecomeMaster(chatId, messageId) {
        const user = await this.db.getUser(chatId);
        if (!user) return;

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞
        await this.db.createMasterApplication(chatId);

        await this.bot.editMessageText(
            '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\nüë®‚Äçüíº –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n\nüìû –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –¥–∞–¥–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.',
            {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getCloseKeyboard()
            }
        );
    }

    async showInviteFriend(chatId, messageId) {
        const user = await this.db.getUser(chatId);
        if (!user) return;

        const referralLink = `https://t.me/energy_m_bot?start=${user.referral_code}`;
        
        const text =
            `üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ ${config.REFERRAL_BONUS}$!\n\n` +
            `üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
            `\`${referralLink}\`\n\n` +
            `üî¢ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referral_code}\`\n\n` +
            `üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n` +
            `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–æ–¥ –¥—Ä—É–≥—É\n` +
            `‚Ä¢ –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ/–∫–æ–¥—É\n` +
            `‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${config.REFERRAL_BONUS}$ –Ω–∞ —Å—á–µ—Ç\n` +
            `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 10% –æ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä–µ`;

        if (messageId) {
            try {
                await this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    ...Keyboards.getReferralLinkKeyboard(user.referral_code)
                });
            } catch (error) {
                // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await this.bot.sendMessage(chatId, text, {
                    parse_mode: 'Markdown',
                    ...Keyboards.getReferralLinkKeyboard(user.referral_code)
                });
            }
        } else {
            await this.bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                ...Keyboards.getReferralLinkKeyboard(user.referral_code)
            });
        }
    }

    async showMyPartners(chatId, messageId) {
        const text = 'üë• –ú–æ–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
        try {
            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getMyPartnersKeyboard()
            });
        } catch (error) {
            await this.bot.sendMessage(chatId, text, {
                ...Keyboards.getMyPartnersKeyboard()
            });
        }
    }

    async showPartnerStats(chatId, messageId) {
        const stats = await this.db.getReferralStats(chatId);
        const text =
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n\n` +
            `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.total_referrals}\n` +
            `üí∞ –û–±—â–∏–π –±–æ–Ω—É—Å: ${stats.total_bonus}$\n` +
            `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${stats.completed_bonus}$\n` +
            `‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.total_bonus - stats.completed_bonus}$`;
        try {
            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getBackKeyboard('my_partners')
            });
        } catch (error) {
            await this.bot.sendMessage(chatId, text, {
                ...Keyboards.getBackKeyboard('my_partners')
            });
        }
    }

    async showPartnerList(chatId, messageId) {
        const partners = await this.db.getReferralList(chatId);
        
        let message = 'üë• –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n';
        
        if (partners.length === 0) {
            message += 'üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!';
        } else {
            partners.forEach((partner, index) => {
                const username = partner.username ? `@${partner.username}` : '';
                const fullName = `${partner.first_name || ''} ${partner.last_name || ''}`.trim();
                const name = username || fullName || partner.telegram_id;
                const date = new Date(partner.created_at).toLocaleDateString('ru-RU');
                message += `${index + 1}. ${name}\n`;
                message += `   üí∞ –ë–æ–Ω—É—Å: ${partner.bonus_amount}$\n`;
                message += `   üìÖ –î–∞—Ç–∞: ${date}\n\n`;
            });
        }
        try {
            await this.bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getBackKeyboard('my_partners')
            });
        } catch (error) {
            await this.bot.sendMessage(chatId, message, {
                ...Keyboards.getBackKeyboard('my_partners')
            });
        }
    }

    async copyReferralLink(chatId, referralCode) {
        const referralLink = `https://t.me/energy_m_bot?start=${referralCode}`;
        
        await this.bot.sendMessage(
            chatId,
            `üìã –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\n\n\`${referralLink}\`\n\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—é —Å –¥—Ä—É–∑—å—è–º–∏!`,
            { parse_mode: 'Markdown' }
        );
    }

    async copyReferralCode(chatId, referralCode) {
        await this.bot.sendMessage(
            chatId,
            `üìã –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\n\n\`${referralCode}\`\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–≥—É ‚Äî –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.`,
            { parse_mode: 'Markdown' }
        );
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ
    async showAboutVideo(chatId, messageId) {
        await this.bot.sendVideo(
            chatId,
            config.MEDIA.ABOUT_PROJECT,
            {
                caption: 'üìπ –í–∏–¥–µ–æ –æ –ø—Ä–æ–µ–∫—Ç–µ "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"'
            }
        );
    }

    async showCommunityVideo(chatId, messageId) {
        await this.bot.sendVideo(
            chatId,
            config.MEDIA.COMMUNITY,
            {
                caption: 'üìπ –í–∏–¥–µ–æ –æ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ'
            }
        );
    }

    async showGameVideo(chatId, messageId) {
        await this.bot.sendVideo(
            chatId,
            config.MEDIA.PLAY_GAME,
            {
                caption: 'üìπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ "–≠–Ω–µ—Ä–≥–∏—é –¥–µ–Ω–µ–≥"'
            }
        );
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async findUserByReferralCode(referralCode) {
        return new Promise((resolve, reject) => {
            this.db.db.get(
                'SELECT * FROM users WHERE referral_code = ?',
                [referralCode],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    }
}

module.exports = Handlers;

