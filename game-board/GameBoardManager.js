/**
 * Game Board Manager v2.0 - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É GameBoardService –∏ GameBoardUI
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
 */

class GameBoardManager {
    constructor(containerId = 'game-board-container') {
        console.log('üéÆ GameBoardManager v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        this.containerId = containerId;
        this.service = null;
        this.ui = null;
        this.isInitialized = false;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.managerState = {
            gameActive: false,
            currentPhase: 'waiting',
            lastUpdate: null,
            errorCount: 0
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            autoSave: true,
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            maxErrors: 10,
            debugMode: false
        };
        
        this.initializeManager();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initializeManager() {
        try {
            console.log('üéÆ GameBoardManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            this.service = new GameBoardService();
            
            // –°–æ–∑–¥–∞–µ–º UI
            this.ui = new GameBoardUI(this.containerId);
            
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
            await this.waitForUI();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            this.setupIntegration();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if (this.config.autoSave) {
                this.startAutoSave();
            }
            
            this.isInitialized = true;
            this.managerState.currentPhase = 'ready';
            
            console.log('üéÆ GameBoardManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.emit('managerReady');
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
            this.handleError(error);
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
     */
    async waitForUI() {
        return new Promise((resolve) => {
            const checkUI = () => {
                if (this.ui && this.ui.uiState.isInitialized) {
                    resolve();
                } else {
                    setTimeout(checkUI, 100);
                }
            };
            checkUI();
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     */
    setupIntegration() {
        console.log('üéÆ GameBoardManager: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
        
        // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫ UI
        this.service.on('boardInitialized', (data) => {
            this.ui.updatePlayersPanel(data.players);
            this.ui.showNotification('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', 'success');
        });
        
        this.service.on('playerMoved', (data) => {
            this.ui.moveToken(data.playerIndex, data.oldPosition, data.newPosition, data.steps);
            this.ui.updatePlayersPanel(this.service.getPlayers());
            this.ui.updateGameInfo(this.service.getGameStats());
            
            if (data.passedGo) {
                this.ui.showNotification(`${data.player} –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç –∏ –ø–æ–ª—É—á–∏–ª $200!`, 'success');
            }
        });
        
        this.service.on('diceRolled', (data) => {
            this.ui.showNotification(`–í—ã–ø–∞–ª–æ: ${data.total}`, 'info');
        });
        
        this.service.on('turnChanged', (data) => {
            this.ui.showNotification(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${data.currentPlayer.name}`, 'info');
            this.ui.updateGameInfo(this.service.getGameStats());
        });
        
        this.service.on('moneyUpdated', (data) => {
            this.ui.updatePlayersPanel(this.service.getPlayers());
            if (data.amount > 0) {
                this.ui.showNotification(`${data.player.name} –ø–æ–ª—É—á–∏–ª $${data.amount}`, 'success');
            } else {
                this.ui.showNotification(`${data.player.name} –ø–æ—Ç—Ä–∞—Ç–∏–ª $${Math.abs(data.amount)}`, 'warning');
            }
        });
        
        this.service.on('playerBankrupt', (data) => {
            this.ui.showNotification(`${data.player.name} –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è!`, 'error');
            this.ui.updatePlayersPanel(this.service.getPlayers());
        });
        
        this.service.on('gameReset', () => {
            this.ui.clearAllTokens();
            this.ui.updatePlayersPanel([]);
            this.ui.updateGameInfo({});
            this.ui.showNotification('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'info');
        });
        
        // –°–æ–±—ã—Ç–∏—è –æ—Ç UI –∫ —Å–µ—Ä–≤–∏—Å—É
        this.setupUIEvents();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π UI
     */
    setupUIEvents() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç UI
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.
    }

    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     */
    startGame(players) {
        try {
            console.log('üéÆ GameBoardManager: –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã', players.length, '–∏–≥—Ä–æ–∫–æ–≤');
            
            if (!this.isInitialized) {
                throw new Error('–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ
            this.service.initializeBoard(players);
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
            players.forEach((player, index) => {
                this.ui.createPlayerToken(
                    index,
                    player.name,
                    this.service.getPlayerColor(index),
                    0
                );
            });
            
            this.managerState.gameActive = true;
            this.managerState.currentPhase = 'playing';
            this.managerState.lastUpdate = new Date();
            
            this.emit('gameStarted', { players });
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', error);
            this.handleError(error);
        }
    }

    /**
     * –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞
     */
    rollDiceAndMove() {
        try {
            if (!this.managerState.gameActive) {
                throw new Error('–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
            }
            
            const currentPlayer = this.service.getCurrentPlayer();
            if (!currentPlayer) {
                throw new Error('–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
            const diceResult = this.service.rollDice();
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞
            const moveResult = this.service.movePlayer(this.service.gameState.currentPlayerIndex);
            
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            this.service.nextTurn();
            
            this.managerState.lastUpdate = new Date();
            
            return {
                diceResult,
                moveResult,
                currentPlayer: this.service.getCurrentPlayer()
            };
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ —Ö–æ–¥–∞', error);
            this.handleError(error);
            return null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerMoney(playerIndex, amount, reason = '') {
        try {
            const newBalance = this.service.updatePlayerMoney(playerIndex, amount, reason);
            this.managerState.lastUpdate = new Date();
            return newBalance;
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥', error);
            this.handleError(error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
     */
    getGameStats() {
        return this.service.getGameStats();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
     */
    getPlayerStats(playerIndex) {
        return this.service.getPlayerStats(playerIndex);
    }

    /**
     * –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    togglePause() {
        const newPhase = this.service.togglePause();
        this.managerState.currentPhase = newPhase;
        this.managerState.lastUpdate = new Date();
        
        this.emit('gamePaused', { phase: newPhase });
        return newPhase;
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
     */
    resetGame() {
        try {
            this.service.resetGame();
            this.ui.clearAllTokens();
            this.managerState.gameActive = false;
            this.managerState.currentPhase = 'waiting';
            this.managerState.lastUpdate = new Date();
            
            this.emit('gameReset');
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã', error);
            this.handleError(error);
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    startAutoSave() {
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }
        
        this.autoSaveInterval = setInterval(() => {
            this.saveGameState();
        }, this.config.autoSaveInterval);
        
        console.log('üéÆ GameBoardManager: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    stopAutoSave() {
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
            this.autoSaveInterval = null;
        }
        
        console.log('üéÆ GameBoardManager: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    saveGameState() {
        try {
            const gameState = {
                service: this.service.gameState,
                manager: this.managerState,
                timestamp: new Date().toISOString()
            };
            
            localStorage.setItem('monopoly_game_state', JSON.stringify(gameState));
            console.log('üéÆ GameBoardManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    loadGameState() {
        try {
            const savedState = localStorage.getItem('monopoly_game_state');
            if (!savedState) {
                console.log('üéÆ GameBoardManager: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }
            
            const gameState = JSON.parse(savedState);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            this.service.gameState = gameState.service;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            this.managerState = gameState.manager;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
            this.ui.updatePlayersPanel(this.service.getPlayers());
            this.ui.updateGameInfo(this.service.getGameStats());
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—à–∫–∏
            this.service.getPlayers().forEach((player, index) => {
                this.ui.createPlayerToken(
                    index,
                    player.name,
                    player.color,
                    player.position
                );
            });
            
            console.log('üéÆ GameBoardManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
            this.emit('gameLoaded', { gameState });
            
            return true;
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', error);
            this.handleError(error);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    handleError(error) {
        this.managerState.errorCount++;
        
        console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞', error);
        
        if (this.managerState.errorCount >= this.config.maxErrors) {
            console.error('üéÆ GameBoardManager: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫');
            this.emit('maxErrorsReached');
        }
        
        this.emit('error', { error, count: this.managerState.errorCount });
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
     */
    on(event, callback) {
        if (!this.eventListeners) {
            this.eventListeners = new Map();
        }
        
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        
        this.eventListeners.get(event).push(callback);
    }

    off(event, callback) {
        if (this.eventListeners && this.eventListeners.has(event)) {
            const listeners = this.eventListeners.get(event);
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.eventListeners && this.eventListeners.has(event)) {
            this.eventListeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è', event, error);
                }
            });
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        try {
            this.stopAutoSave();
            
            if (this.service) {
                this.service.resetGame();
            }
            
            if (this.ui) {
                this.ui.clearAllTokens();
            }
            
            this.isInitialized = false;
            this.managerState.gameActive = false;
            
            console.log('üéÆ GameBoardManager: –ú–µ–Ω–µ–¥–∂–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
            
        } catch (error) {
            console.error('üéÆ GameBoardManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js –∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardManager;
} else {
    window.GameBoardManager = GameBoardManager;
}
