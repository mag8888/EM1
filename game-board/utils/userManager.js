/**
 * UserManager - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
 */

class UserManager {
    constructor() {
        this.users = new Map(); // –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateUserId(email) {
        if (!email) {
            throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ email –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID
        const hash = this.simpleHash(email.toLowerCase().trim());
        return `user_${hash}`;
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID
     * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –•—ç—à
     */
    simpleHash(str) {
        let hash = 0;
        if (str.length === 0) return hash.toString();
        
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        
        return Math.abs(hash).toString(36);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–¥–∏–Ω—ã–º ID
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userData.email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userData.username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} [userData.first_name] - –ò–º—è
     * @param {string} [userData.last_name] - –§–∞–º–∏–ª–∏—è
     * @returns {Object} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –µ–¥–∏–Ω—ã–º ID
     */
    registerUser(userData) {
        const { email, username, first_name, last_name } = userData;
        
        if (!email) {
            throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }

        const userId = this.generateUserId(email);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (this.users.has(userId)) {
            const existingUser = this.users.get(userId);
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${existingUser.username} (${existingUser.email}) ID: ${existingUser.id}`);
            return existingUser;
        }

        const user = {
            id: userId,
            email: email.toLowerCase().trim(),
            username: username || email.split('@')[0],
            first_name: first_name || username || email.split('@')[0],
            last_name: last_name || '',
            registeredAt: new Date().toISOString(),
            lastSeen: new Date().toISOString(),
            socketConnections: new Set(), // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            isOnline: false
        };

        this.users.set(userId, user);
        console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.username} (${user.email}) ID: ${user.id}`);
        
        return user;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ null
     */
    getUserById(userId) {
        return this.users.get(userId) || null;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
     * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ null
     */
    getUserByEmail(email) {
        const userId = this.generateUserId(email);
        return this.users.get(userId) || null;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateUser(userId, updates) {
        const user = this.users.get(userId);
        if (user) {
            Object.assign(user, updates);
            user.lastSeen = new Date().toISOString();
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} socketId - ID WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    addSocketConnection(userId, socketId) {
        const user = this.users.get(userId);
        if (user) {
            user.socketConnections.add(socketId);
            user.isOnline = user.socketConnections.size > 0;
            user.lastSeen = new Date().toISOString();
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} socketId - ID WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    removeSocketConnection(userId, socketId) {
        const user = this.users.get(userId);
        if (user) {
            user.socketConnections.delete(socketId);
            user.isOnline = user.socketConnections.size > 0;
            user.lastSeen = new Date().toISOString();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getOnlineUsers() {
        return Array.from(this.users.values()).filter(user => user.isOnline);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getUserCount() {
        return this.users.size;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getOnlineUserCount() {
        return this.getOnlineUsers().length;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    validateUserData(userData) {
        const { email, username } = userData;
        
        if (!email || typeof email !== 'string') {
            throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
        }

        if (!this.isValidEmail(email)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }

        return {
            email: email.toLowerCase().trim(),
            username: username || email.split('@')[0],
            first_name: userData.first_name || username || email.split('@')[0],
            last_name: userData.last_name || ''
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
     * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @param {number} maxInactiveHours - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö
     */
    cleanupInactiveUsers(maxInactiveHours = 24) {
        const cutoffTime = new Date(Date.now() - maxInactiveHours * 60 * 60 * 1000);
        let removedCount = 0;

        for (const [userId, user] of this.users.entries()) {
            if (!user.isOnline && new Date(user.lastSeen) < cutoffTime) {
                this.users.delete(userId);
                removedCount++;
            }
        }

        if (removedCount > 0) {
            console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${removedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        const onlineUsers = this.getOnlineUsers();
        return {
            total: this.users.size,
            online: onlineUsers.length,
            offline: this.users.size - onlineUsers.length,
            topUsers: onlineUsers
                .sort((a, b) => new Date(b.lastSeen) - new Date(a.lastSeen))
                .slice(0, 10)
                .map(user => ({
                    id: user.id,
                    username: user.username,
                    email: user.email,
                    lastSeen: user.lastSeen,
                    connections: user.socketConnections.size
                }))
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const userManager = new UserManager();

module.exports = userManager;
