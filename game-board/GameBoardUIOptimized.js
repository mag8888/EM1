/**
 * Game Board UI v2.1 - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * 
 * –û–°–ù–û–í–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * - Batch DOM updates
 * - RequestAnimationFrame –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
 * - Debounced event handlers
 * - Memory leak prevention
 * - CSS transforms –≤–º–µ—Å—Ç–æ position changes
 */

class GameBoardUIOptimized {
    constructor(containerId = 'game-board-container') {
        console.log('üé® GameBoardUIOptimized v2.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        this.containerId = containerId;
        this.container = null;
        this.gameBoard = null;
        this.playerTokens = new Map();
        this.animations = new Map();
        this.notifications = [];
        
        // –ö–≠–®–ò–†–û–í–ê–ù–ò–ï DOM –≠–õ–ï–ú–ï–ù–¢–û–í
        this.domCache = new Map();
        this.cellCache = new Map();
        this.animationFrameId = null;
        
        // DEBOUNCED FUNCTIONS
        this.debouncedUpdate = this.debounce(this.updateUI.bind(this), 16); // 60fps
        this.debouncedResize = this.debounce(this.handleResize.bind(this), 250);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UI
        this.config = {
            cellSize: 60,
            boardPadding: 20,
            tokenSize: 40,
            animationDuration: 300,
            notificationDuration: 3000,
            maxAnimations: 5, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
            batchUpdateDelay: 16 // 60fps
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.uiState = {
            isInitialized: false,
            currentTheme: 'default',
            showAnimations: true,
            showNotifications: true,
            isAnimating: false,
            pendingUpdates: new Set()
        };
        
        this.initializeUI();
    }

    /**
     * DEBOUNCE HELPER - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    /**
     * THROTTLE HELPER - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –≤—ã–∑–æ–≤–æ–≤
     */
    throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    /**
     * –ö–≠–®–ò–†–û–í–ê–ù–ò–ï DOM –≠–õ–ï–ú–ï–ù–¢–û–í
     */
    getCachedElement(selector, forceUpdate = false) {
        if (!forceUpdate && this.domCache.has(selector)) {
            return this.domCache.get(selector);
        }
        
        const element = document.querySelector(selector);
        if (element) {
            this.domCache.set(selector, element);
        }
        return element;
    }

    /**
     * BATCH DOM UPDATES - –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
     */
    batchUpdate(updates) {
        if (this.uiState.pendingUpdates.size === 0) {
            requestAnimationFrame(() => {
                this.processBatchUpdates();
            });
        }
        
        updates.forEach(update => {
            this.uiState.pendingUpdates.add(update);
        });
    }

    processBatchUpdates() {
        const updates = Array.from(this.uiState.pendingUpdates);
        this.uiState.pendingUpdates.clear();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
        const updatesByType = updates.reduce((acc, update) => {
            if (!acc[update.type]) acc[update.type] = [];
            acc[update.type].push(update);
            return acc;
        }, {});

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
        Object.entries(updatesByType).forEach(([type, typeUpdates]) => {
            this.applyUpdatesByType(type, typeUpdates);
        });
    }

    applyUpdatesByType(type, updates) {
        switch (type) {
            case 'position':
                this.applyPositionUpdates(updates);
                break;
            case 'style':
                this.applyStyleUpdates(updates);
                break;
            case 'content':
                this.applyContentUpdates(updates);
                break;
        }
    }

    applyPositionUpdates(updates) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS transforms –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        updates.forEach(update => {
            const { element, x, y } = update;
            if (element && element.style) {
                element.style.transform = `translate3d(${x}px, ${y}px, 0)`;
            }
        });
    }

    applyStyleUpdates(updates) {
        updates.forEach(update => {
            const { element, styles } = update;
            if (element && element.style) {
                Object.assign(element.style, styles);
            }
        });
    }

    applyContentUpdates(updates) {
        updates.forEach(update => {
            const { element, content } = update;
            if (element) {
                element.textContent = content;
            }
        });
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI
     */
    initializeUI() {
        console.log('üé® GameBoardUIOptimized: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = this.getCachedElement(`#${this.containerId}`);
        if (!this.container) {
            console.error('üé® GameBoardUIOptimized: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', this.containerId);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        this.createGameBoard();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.initializeNotifications();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ event listeners
        this.addOptimizedEventListeners();
        
        this.uiState.isInitialized = true;
        console.log('üé® GameBoardUIOptimized: UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï EVENT LISTENERS
     */
    addOptimizedEventListeners() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º event delegation –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.container.addEventListener('click', this.handleClick.bind(this));
        this.container.addEventListener('mouseenter', this.handleMouseEnter.bind(this), true);
        this.container.addEventListener('mouseleave', this.handleMouseLeave.bind(this), true);
        
        // Throttled resize handler
        window.addEventListener('resize', this.debouncedResize);
        
        // Visibility change –¥–ª—è –ø–∞—É–∑—ã –∞–Ω–∏–º–∞—Ü–∏–π
        document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));
    }

    handleClick(event) {
        const token = event.target.closest('.player-token');
        if (token) {
            const playerIndex = parseInt(token.dataset.playerIndex);
            this.showPlayerInfo(playerIndex);
        }
    }

    handleMouseEnter(event) {
        const token = event.target.closest('.player-token');
        if (token && this.uiState.showAnimations) {
            this.batchUpdate([{
                type: 'style',
                element: token,
                styles: {
                    transform: 'scale(1.2)',
                    boxShadow: '0 6px 20px rgba(0, 0, 0, 0.4)'
                }
            }]);
        }
    }

    handleMouseLeave(event) {
        const token = event.target.closest('.player-token');
        if (token) {
            this.batchUpdate([{
                type: 'style',
                element: token,
                styles: {
                    transform: 'scale(1)',
                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)'
                }
            }]);
        }
    }

    handleResize() {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        this.recalculatePositions();
    }

    handleVisibilityChange() {
        if (document.hidden) {
            this.pauseAnimations();
        } else {
            this.resumeAnimations();
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ò–ì–†–û–í–û–ì–û –ü–û–õ–Ø
     */
    createGameBoard() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DocumentFragment –¥–ª—è batch DOM operations
        const fragment = document.createDocumentFragment();
        
        this.gameBoard = document.createElement('div');
        this.gameBoard.className = 'game-board-v2-optimized';
        
        // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        this.gameBoard.innerHTML = this.getGameBoardHTML();
        
        fragment.appendChild(this.gameBoard);
        this.container.appendChild(fragment);
        
        // –ö—ç—à–∏—Ä—É–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.cacheFrequentlyUsedElements();
    }

    getGameBoardHTML() {
        return `
            <div class="board-header">
                <h2>–ú–æ–Ω–æ–ø–æ–ª–∏—è</h2>
                <div class="game-controls">
                    <button id="pause-btn" class="control-btn">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                    <button id="settings-btn" class="control-btn">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                </div>
            </div>
            <div class="board-container">
                <div class="board-grid" id="board-grid">
                    <!-- –ö–ª–µ—Ç–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                <div class="board-sidebar">
                    <div class="players-panel" id="players-panel">
                        <h3>–ò–≥—Ä–æ–∫–∏</h3>
                        <div class="players-list" id="players-list"></div>
                    </div>
                    <div class="game-info" id="game-info">
                        <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ</h3>
                        <div class="info-content"></div>
                    </div>
                </div>
            </div>
            <div class="notifications-container" id="notifications-container"></div>
        `;
    }

    cacheFrequentlyUsedElements() {
        const selectors = [
            '#board-grid',
            '#players-list',
            '#game-info .info-content',
            '#notifications-container'
        ];
        
        selectors.forEach(selector => {
            this.getCachedElement(selector);
        });
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –§–ò–®–ï–ö
     */
    createPlayerToken(playerIndex, playerName, color, position = 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–Ω–∏–º–∞—Ü–∏–π
        if (this.animations.size >= this.config.maxAnimations) {
            console.warn('üé® GameBoardUIOptimized: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–Ω–∏–º–∞—Ü–∏–π');
            return null;
        }

        const token = document.createElement('div');
        token.className = 'player-token-optimized';
        token.dataset.playerIndex = playerIndex;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS –∫–ª–∞—Å—Å—ã –≤–º–µ—Å—Ç–æ inline styles –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        token.style.cssText = `
            position: absolute;
            width: ${this.config.tokenSize}px;
            height: ${this.config.tokenSize}px;
            background: ${color};
            border-radius: 50%;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            will-change: transform;
            z-index: 10;
        `;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
        const number = document.createElement('div');
        number.textContent = playerIndex + 1;
        number.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 14px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
            pointer-events: none;
        `;
        token.appendChild(number);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        const boardGrid = this.getCachedElement('#board-grid');
        if (boardGrid) {
            boardGrid.appendChild(token);
        }

        this.playerTokens.set(playerIndex, token);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ–∏—à–∫—É
        this.positionTokenOptimized(token, position, playerIndex);
        
        console.log('üé® GameBoardUIOptimized: –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏—à–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', { playerIndex, playerName, color });
        
        return token;
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –§–ò–®–ö–ò
     */
    positionTokenOptimized(token, position, playerIndex = null) {
        const cell = this.getCachedElement(`[data-cell-index="${position}"]`);
        if (!cell) {
            console.warn('üé® GameBoardUIOptimized: –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', position);
            return;
        }

        // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
        let cellRect = this.cellCache.get(position);
        if (!cellRect) {
            cellRect = cell.getBoundingClientRect();
            this.cellCache.set(position, cellRect);
        }

        const boardRect = this.gameBoard.getBoundingClientRect();
        
        // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        const offset = this.config.cellSize * 0.15;
        let offsetX = 0;
        let offsetY = 0;

        const pIndex = playerIndex !== null ? playerIndex : parseInt(token.dataset.playerIndex);
        if (pIndex !== null && !Number.isNaN(pIndex)) {
            const tokensOnCell = Array.from(this.playerTokens.values())
                .filter(t => t !== token && this.getTokenPosition(t) === position);
            const localIndex = tokensOnCell.length;
            
            const angle = (localIndex % 8) * (Math.PI / 4);
            offsetX = Math.cos(angle) * offset;
            offsetY = Math.sin(angle) * offset;
        }

        const x = cellRect.left - boardRect.left + cellRect.width / 2 + offsetX;
        const y = cellRect.top - boardRect.top + cellRect.height / 2 + offsetY;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS transforms –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.batchUpdate([{
            type: 'position',
            element: token,
            x: x - this.config.tokenSize / 2,
            y: y - this.config.tokenSize / 2
        }]);
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –§–ò–®–ö–ò
     */
    async moveTokenOptimized(playerIndex, fromPosition, toPosition, steps) {
        const token = this.playerTokens.get(playerIndex);
        if (!token) {
            console.error('üé® GameBoardUIOptimized: –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', playerIndex);
            return;
        }

        console.log('üé® GameBoardUIOptimized: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏', { playerIndex, fromPosition, toPosition, steps });

        if (!this.uiState.showAnimations) {
            this.positionTokenOptimized(token, toPosition, playerIndex);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–Ω–∏–º–∞—Ü–∏–π
        if (this.animations.size >= this.config.maxAnimations) {
            console.warn('üé® GameBoardUIOptimized: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞');
            this.positionTokenOptimized(token, toPosition, playerIndex);
            return;
        }

        this.uiState.isAnimating = true;
        const animationId = `move_${playerIndex}_${Date.now()}`;
        this.animations.set(animationId, { token, playerIndex });

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            await this.animateTokenMovement(token, fromPosition, toPosition, steps);
        } finally {
            this.animations.delete(animationId);
            this.uiState.isAnimating = false;
        }
    }

    /**
     * –ê–ù–ò–ú–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø –° REQUESTANIMATIONFRAME
     */
    async animateTokenMovement(token, fromPosition, toPosition, steps) {
        return new Promise((resolve) => {
            let currentStep = 0;
            
            const animate = () => {
                if (currentStep >= steps) {
                    resolve();
                    return;
                }
                
                const currentPosition = (fromPosition + currentStep + 1) % 40;
                this.positionTokenOptimized(token, currentPosition);
                
                currentStep++;
                
                if (currentStep < steps) {
                    this.animationFrameId = requestAnimationFrame(animate);
                } else {
                    // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
                    this.batchUpdate([{
                        type: 'style',
                        element: token,
                        styles: {
                            transform: 'scale(1.3)'
                        }
                    }]);
                    
                    setTimeout(() => {
                        this.batchUpdate([{
                            type: 'style',
                            element: token,
                            styles: {
                                transform: 'scale(1)'
                            }
                        }]);
                        resolve();
                    }, 150);
                }
            };
            
            this.animationFrameId = requestAnimationFrame(animate);
        });
    }

    /**
     * –ü–ê–£–ó–ê –ò –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ù–ò–ú–ê–¶–ò–ô
     */
    pauseAnimations() {
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        this.uiState.showAnimations = false;
    }

    resumeAnimations() {
        this.uiState.showAnimations = true;
    }

    /**
     * –ü–ï–†–ï–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ô (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
     */
    recalculatePositions() {
        this.cellCache.clear();
        this.playerTokens.forEach((token, playerIndex) => {
            const position = this.getTokenPosition(token);
            this.positionTokenOptimized(token, position, playerIndex);
        });
    }

    /**
     * –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò
     */
    cleanup() {
        // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
        this.domCache.clear();
        this.cellCache.clear();
        this.animations.clear();
        
        // –£–¥–∞–ª—è–µ–º event listeners
        this.container.removeEventListener('click', this.handleClick);
        this.container.removeEventListener('mouseenter', this.handleMouseEnter, true);
        this.container.removeEventListener('mouseleave', this.handleMouseLeave, true);
        window.removeEventListener('resize', this.debouncedResize);
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
        
        console.log('üé® GameBoardUIOptimized: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    getTokenPosition(token) {
        const cell = token.closest('[data-cell-index]');
        return cell ? parseInt(cell.dataset.cellIndex) : 0;
    }

    showPlayerInfo(playerIndex) {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è showPlayerInfo...
        console.log('üé® GameBoardUIOptimized: –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ', playerIndex);
    }

    updateUI() {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è updateUI...
        console.log('üé® GameBoardUIOptimized: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI');
    }

    addStyles() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏...
        const style = document.createElement('style');
        style.textContent = `
            .game-board-v2-optimized {
                /* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */
                contain: layout style paint;
                will-change: transform;
            }
            
            .player-token-optimized {
                /* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏—à–µ–∫ */
                contain: layout style paint;
                will-change: transform;
            }
        `;
        document.head.appendChild(style);
    }

    initializeNotifications() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardUIOptimized;
} else if (typeof window !== 'undefined') {
    window.GameBoardUIOptimized = GameBoardUIOptimized;
}
