/**
 * Game Board v2.0 Server
 * Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway
 */

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

// Database imports
const { connectToDatabase, getConnectionStatus } = require('./config/database');
const Room = require('./models/Room');
const User = require('./models/User');
const Profession = require('./models/Profession');
const BankAccount = require('./models/BankAccount');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});
const PORT = process.env.PORT || 8080;

// Initialize Database Connection
async function initializeDatabase() {
    try {
        await connectToDatabase();
        console.log('‚úÖ Database connection established');
        
        // Initialize default profession if not exists
        await initializeDefaultProfession();
        
    } catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
        console.log('üîÑ Continuing with in-memory storage...');
    }
}

// Initialize default profession
async function initializeDefaultProfession() {
    try {
        const existingProfession = await Profession.findOne({ name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å' });
        if (!existingProfession) {
            const defaultProfession = new Profession({
                name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
                description: '–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
                category: 'entrepreneur',
                difficulty: 'medium',
                startingFinancials: {
                    income: 10000,
                    expenses: 6200,
                    cashflow: 3800,
                    startingBalance: 1000
                },
                liabilities: [
                    { name: '–ù–∞–ª–æ–≥–∏', type: 'tax', payment: 1300, principal: 0 },
                    { name: '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', type: 'expense', payment: 1500, principal: 0 },
                    { name: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ', type: 'loan', payment: 700, principal: 14000 },
                    { name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', type: 'loan', payment: 500, principal: 10000 },
                    { name: '–ò–ø–æ—Ç–µ–∫–∞', type: 'mortgage', payment: 1200, principal: 240000 },
                    { name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', type: 'credit_card', payment: 1000, principal: 20000 }
                ],
                totalLiabilities: 284000,
                paths: [
                    {
                        name: 'Business',
                        description: '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞',
                        difficulty: 'business',
                        requirements: { minIncome: 8000, minCashflow: 2000, maxLiabilities: 300000 },
                        benefits: { incomeMultiplier: 1.2, expenseReduction: 500 }
                    },
                    {
                        name: '–°–ª–æ–∂–Ω—ã–π',
                        description: '–°–ª–æ–∂–Ω—ã–π –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è',
                        difficulty: 'hard',
                        requirements: { minIncome: 12000, minCashflow: 4000, maxLiabilities: 200000 },
                        benefits: { incomeMultiplier: 1.5, expenseReduction: 1000 }
                    }
                ]
            });
            
            await defaultProfession.save();
            console.log('‚úÖ Default profession created');
        }
    } catch (error) {
        console.error('‚ùå Failed to create default profession:', error.message);
    }
}

// Middleware
app.use(express.static(path.join(__dirname)));
app.use(express.json());

// –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const bankData = {
    balances: {}, // { userId: { amount: 1000, roomId: 'room123' } }
    transferHistory: [] // { from: 'user1', to: 'user2', amount: 100, timestamp: Date, roomId: 'room123' }
};

// –§—É–Ω–∫—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
function getBalance(userId, roomId) {
    const key = `${userId}_${roomId}`;
    return bankData.balances[key] || { amount: 1000, roomId }; // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 1000
}

function setBalance(userId, roomId, amount) {
    const key = `${userId}_${roomId}`;
    bankData.balances[key] = { amount, roomId };
}

function addTransferHistory(from, to, amount, roomId) {
    bankData.transferHistory.push({
        from,
        to,
        amount,
        timestamp: new Date(),
        roomId
    });
}

function getTransferHistory(roomId) {
    return bankData.transferHistory.filter(t => t.roomId === roomId);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
app.get('/auth', (req, res) => {
    res.sendFile(path.join(__dirname, 'auth.html'));
});

app.get('/lobby', (req, res) => {
    res.sendFile(path.join(__dirname, 'lobby.html'));
});

app.get('/game', (req, res) => {
    res.sendFile(path.join(__dirname, 'game.html'));
});

app.get('/game-board', (req, res) => {
    res.sendFile(path.join(__dirname, 'game-board.html'));
});

app.get('/bank-module', (req, res) => {
    res.sendFile(path.join(__dirname, 'bank-module.html'));
});

app.get('/profession-card', (req, res) => {
    res.sendFile(path.join(__dirname, 'profession-card.html'));
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Game Board
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        service: 'Game Board v2.0',
        version: '2.0.0',
        timestamp: new Date().toISOString()
    });
});

// –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/bank/balance/:userId/:roomId', (req, res) => {
    const { userId, roomId } = req.params;
    const balance = getBalance(userId, roomId);
    res.json(balance);
});

app.post('/api/bank/transfer', (req, res) => {
    const { from, to, amount, roomId } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!from || !to || !amount || !roomId) {
        return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞' });
    }
    
    if (from === to) {
        return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ' });
    }
    
    if (amount <= 0) {
        return res.status(400).json({ error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π' });
    }
    
    const fromBalance = getBalance(from, roomId);
    if (fromBalance.amount < amount) {
        return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞' });
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const toBalance = getBalance(to, roomId);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    setBalance(from, roomId, fromBalance.amount - amount);
    
    // –ó–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    setBalance(to, roomId, toBalance.amount + amount);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    addTransferHistory(from, to, amount, roomId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
    io.to(roomId).emit('bankUpdate', {
        type: 'transfer',
        from,
        to,
        amount,
        roomId,
        timestamp: new Date()
    });
    
    res.json({ 
        success: true, 
        message: '–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        newBalance: getBalance(from, roomId)
    });
});

app.get('/api/bank/history/:roomId', (req, res) => {
    const { roomId } = req.params;
    const history = getTransferHistory(roomId);
    res.json(history);
});

app.get('/api/bank/room-balances/:roomId', (req, res) => {
    const { roomId } = req.params;
    const balances = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    Object.keys(bankData.balances).forEach(key => {
        const [userId, userRoomId] = key.split('_');
        if (userRoomId === roomId) {
            balances[userId] = bankData.balances[key];
        }
    });
    
    res.json(balances);
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏
app.get('/api/profession/:userId/:roomId', (req, res) => {
    const { userId, roomId } = req.params;
    const key = `profession_${userId}_${roomId}`;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const professionData = bankData.professions?.[key] || {
        profession: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
        income: 10000,
        expenses: 6200,
        cashflow: 3800,
        liabilities: {
            taxes: 1300,
            other: 1500,
            carLoan: { payment: 700, principal: 14000 },
            educationLoan: { payment: 500, principal: 10000 },
            mortgage: { payment: 1200, principal: 240000 },
            creditCards: { payment: 1000, principal: 20000 }
        },
        totalLiabilities: 284000
    };
    
    res.json(professionData);
});

app.post('/api/profession/update', (req, res) => {
    const { userId, roomId, updates } = req.body;
    
    if (!userId || !roomId || !updates) {
        return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }
    
    const key = `profession_${userId}_${roomId}`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!bankData.professions) {
        bankData.professions = {};
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    const currentData = bankData.professions[key] || {
        profession: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
        income: 10000,
        expenses: 6200,
        cashflow: 3800,
        liabilities: {
            taxes: 1300,
            other: 1500,
            carLoan: { payment: 700, principal: 14000 },
            educationLoan: { payment: 500, principal: 10000 },
            mortgage: { payment: 1200, principal: 240000 },
            creditCards: { payment: 1000, principal: 20000 }
        },
        totalLiabilities: 284000
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const updatedData = { ...currentData, ...updates };
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
    updatedData.cashflow = updatedData.income - updatedData.expenses;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ–ª–≥
    if (updatedData.liabilities) {
        updatedData.totalLiabilities = 
            updatedData.liabilities.carLoan?.principal || 0 +
            updatedData.liabilities.educationLoan?.principal || 0 +
            updatedData.liabilities.mortgage?.principal || 0 +
            updatedData.liabilities.creditCards?.principal || 0;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    bankData.professions[key] = updatedData;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
    io.to(roomId).emit('professionUpdate', {
        type: 'professionChanged',
        userId,
        roomId,
        professionData: updatedData,
        timestamp: new Date()
    });
    
    res.json({ 
        success: true, 
        message: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        professionData: updatedData
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/test', (req, res) => {
    res.sendFile(path.join(__dirname, 'test-board.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
app.get('/docs', (req, res) => {
    res.sendFile(path.join(__dirname, 'README.md'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({
        error: 'Not Found',
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        availableRoutes: [
            '/',
            '/auth',
            '/lobby', 
            '/game',
            '/test',
            '/docs',
            '/api/health'
        ]
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Server Error:', err);
    res.status(500).json({
        error: 'Internal Server Error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('joinRoom', (roomId) => {
        socket.join(roomId);
        console.log(`üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        const balances = {};
        Object.keys(bankData.balances).forEach(key => {
            const [userId, userRoomId] = key.split('_');
            if (userRoomId === roomId) {
                balances[userId] = bankData.balances[key];
            }
        });
        
        socket.to(roomId).emit('roomUpdate', {
            type: 'userJoined',
            userId: socket.id,
            balances
        });
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leaveRoom', (roomId) => {
        socket.leave(roomId);
        console.log(`üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
    });
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', () => {
        console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // Initialize database first
        await initializeDatabase();
        
        // Start server
        server.listen(PORT, () => {
            console.log('üéÆ Game Board v2.0 Server –∑–∞–ø—É—â–µ–Ω!');
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
            console.log(`üåê Railway –∞–¥—Ä–µ—Å: https://your-app.railway.app`);
            console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤');
            console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω');
            
            // Display database status
            const dbStatus = getConnectionStatus();
            if (dbStatus.isConnected) {
                console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${dbStatus.name}@${dbStatus.host}`);
            } else {
                console.log('‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            }
        });
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
}

// Start the server
startServer();

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(0);
});
