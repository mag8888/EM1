/**
 * Game Board UI - –ú–æ–¥—É–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 */

class GameBoardUI {
    constructor() {
        console.log('üé® GameBoardUI: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è');
        this.playerTokens = new Map();
        this.animations = new Map();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ–∏—à–∫—É –∏–≥—Ä–æ–∫–∞
     */
    createPlayerToken(playerIndex, playerName, color, position = 0) {
        const tokenId = `player${playerIndex}`;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–∏—à–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingToken = document.getElementById(tokenId);
        if (existingToken) {
            existingToken.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏—à–∫—É
        const token = document.createElement('div');
        token.id = tokenId;
        token.className = 'player-token enhanced-token';
        token.style.cssText = `
            position: absolute;
            width: 40px;
            height: 40px;
            background: ${color};
            border: 3px solid white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 16px;
            z-index: 100;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
        const number = document.createElement('div');
        number.textContent = playerIndex + 1;
        number.style.cssText = `
            font-size: 14px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        `;
        token.appendChild(number);

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        token.addEventListener('mouseenter', () => {
            token.style.transform = 'scale(1.2)';
            token.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.4)';
        });

        token.addEventListener('mouseleave', () => {
            token.style.transform = 'scale(1)';
            token.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
        token.addEventListener('click', () => {
            this.showPlayerInfo(playerIndex, playerName, color);
        });

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ–∏—à–∫—É
        this.positionToken(token, position);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        const gameBoard = document.querySelector('.game-board');
        if (gameBoard) {
            gameBoard.appendChild(token);
        }

        this.playerTokens.set(playerIndex, token);
        console.log('üé® GameBoardUI: –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏—à–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', { playerIndex, playerName, color });
        
        return token;
    }

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏—à–∫—É –Ω–∞ –ø–æ–ª–µ
     */
    positionToken(token, position) {
        const targetCell = document.querySelector(`[data-cell="${position}"]`);
        if (!targetCell) {
            console.warn('üé® GameBoardUI: –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', position);
            return;
        }

        const cellRect = targetCell.getBoundingClientRect();
        const boardRect = document.querySelector('.game-board').getBoundingClientRect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∏—à–∫–∏ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
        const existingTokens = targetCell.querySelectorAll('.player-token');
        const offset = cellRect.width * 0.15;
        let offsetX = 0;
        let offsetY = 0;

        // –°–¥–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        if (existingTokens.length > 0) {
            const tokenIndex = Array.from(existingTokens).indexOf(token);
            offsetX = (tokenIndex % 2) * offset;
            offsetY = Math.floor(tokenIndex / 2) * offset;
        }

        const x = cellRect.left - boardRect.left + cellRect.width / 2 + offsetX;
        const y = cellRect.top - boardRect.top + cellRect.height / 2 + offsetY;

        token.style.left = `${x - 20}px`;
        token.style.top = `${y - 20}px`;
    }

    /**
     * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏
     */
    async moveToken(playerIndex, fromPosition, toPosition, steps) {
        const token = this.playerTokens.get(playerIndex);
        if (!token) {
            console.error('üé® GameBoardUI: –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', playerIndex);
            return;
        }

        console.log('üé® GameBoardUI: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏', { playerIndex, fromPosition, toPosition, steps });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º
        for (let i = 1; i <= steps; i++) {
            const currentPosition = (fromPosition + i) % 40; // 40 –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ
            await this.animateStep(token, currentPosition, i === steps);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 200));
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
     */
    async animateStep(token, position, isLastStep = false) {
        return new Promise((resolve) => {
            const targetCell = document.querySelector(`[data-cell="${position}"]`);
            if (!targetCell) {
                resolve();
                return;
            }

            const cellRect = targetCell.getBoundingClientRect();
            const boardRect = document.querySelector('.game-board').getBoundingClientRect();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∏—à–∫–∏ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
            const existingTokens = targetCell.querySelectorAll('.player-token');
            const offset = cellRect.width * 0.15;
            let offsetX = 0;
            let offsetY = 0;

            if (existingTokens.length > 0) {
                const tokenIndex = Array.from(existingTokens).indexOf(token);
                offsetX = (tokenIndex % 2) * offset;
                offsetY = Math.floor(tokenIndex / 2) * offset;
            }

            const x = cellRect.left - boardRect.left + cellRect.width / 2 + offsetX;
            const y = cellRect.top - boardRect.top + cellRect.height / 2 + offsetY;

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            token.style.transition = 'all 0.3s ease';
            token.style.left = `${x - 20}px`;
            token.style.top = `${y - 20}px`;

            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
            if (isLastStep) {
                token.style.transform = 'scale(1.3)';
                setTimeout(() => {
                    token.style.transform = 'scale(1)';
                }, 150);
            }

            setTimeout(resolve, 300);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
     */
    showPlayerInfo(playerIndex, playerName, color) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏–≥—Ä–æ–∫–µ
        const modal = document.createElement('div');
        modal.className = 'player-info-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        `;

        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            max-width: 300px;
        `;

        content.innerHTML = `
            <h3 style="color: ${color}; margin-bottom: 10px;">${playerName}</h3>
            <p>–ò–≥—Ä–æ–∫ #${playerIndex + 1}</p>
            <p>–ü–æ–∑–∏—Ü–∏—è: <span id="playerPosition">0</span></p>
            <p>–ë–∞–ª–∞–Ω—Å: <span id="playerBalance">$0</span></p>
            <button onclick="this.closest('.player-info-modal').remove()" 
                    style="margin-top: 10px; padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        `;

        modal.appendChild(content);
        document.body.appendChild(modal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
     */
    updateTokenPosition(playerIndex, position) {
        const token = this.playerTokens.get(playerIndex);
        if (token) {
            this.positionToken(token, position);
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∫ —Ñ–∏—à–∫–µ
     */
    addTokenEffect(playerIndex, effect) {
        const token = this.playerTokens.get(playerIndex);
        if (!token) return;

        switch (effect) {
            case 'glow':
                token.style.boxShadow = '0 0 20px rgba(255, 255, 0, 0.8)';
                break;
            case 'pulse':
                token.style.animation = 'pulse 1s infinite';
                break;
            case 'shake':
                token.style.animation = 'shake 0.5s ease-in-out';
                break;
        }
    }

    /**
     * –£–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å —Ñ–∏—à–∫–∏
     */
    removeTokenEffect(playerIndex) {
        const token = this.playerTokens.get(playerIndex);
        if (!token) return;

        token.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';
        token.style.animation = 'none';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
     */
    getAllTokens() {
        return Array.from(this.playerTokens.values());
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
     */
    clearAllTokens() {
        this.playerTokens.forEach(token => token.remove());
        this.playerTokens.clear();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }
    
    .enhanced-token {
        transition: all 0.3s ease;
    }
    
    .enhanced-token:hover {
        transform: scale(1.2);
        z-index: 101;
    }
`;
document.head.appendChild(style);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardUI;
} else {
    window.GameBoardUI = GameBoardUI;
}
