/**
 * Game Board UI v2.0 - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GameBoardService
 */

class GameBoardUI {
    constructor(containerId = 'game-board-container') {
        console.log('üé® GameBoardUI v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        this.containerId = containerId;
        this.container = null;
        this.gameBoard = null;
        this.playerTokens = new Map();
        this.animations = new Map();
        this.notifications = [];
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UI
        this.config = {
            cellSize: 60,
            boardPadding: 20,
            tokenSize: 40,
            animationDuration: 300,
            notificationDuration: 3000
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.uiState = {
            isInitialized: false,
            currentTheme: 'default',
            showAnimations: true,
            showNotifications: true
        };
        
        this.initializeUI();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    initializeUI() {
        console.log('üé® GameBoardUI: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('üé® GameBoardUI: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', this.containerId);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        this.createGameBoard();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.initializeNotifications();
        
        this.uiState.isInitialized = true;
        console.log('üé® GameBoardUI: UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
     */
    createGameBoard() {
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è
        this.gameBoard = document.createElement('div');
        this.gameBoard.className = 'game-board-v2';
        this.gameBoard.innerHTML = `
            <div class="board-header">
                <h2>–ú–æ–Ω–æ–ø–æ–ª–∏—è</h2>
                <div class="game-controls">
                    <button id="pause-btn" class="control-btn">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                    <button id="settings-btn" class="control-btn">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                </div>
            </div>
            <div class="board-container">
                <div class="board-grid" id="board-grid">
                    <!-- –ö–ª–µ—Ç–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                <div class="board-sidebar">
                    <div class="players-panel" id="players-panel">
                        <h3>–ò–≥—Ä–æ–∫–∏</h3>
                        <div class="players-list" id="players-list"></div>
                    </div>
                    <div class="game-info" id="game-info">
                        <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ</h3>
                        <div class="info-content"></div>
                    </div>
                </div>
            </div>
            <div class="notifications-container" id="notifications-container"></div>
        `;
        
        this.container.appendChild(this.gameBoard);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è
        this.createBoardCells();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.addEventListeners();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    createBoardCells() {
        const boardGrid = document.getElementById('board-grid');
        if (!boardGrid) return;
        
        // –°–æ–∑–¥–∞–µ–º 40 –∫–ª–µ—Ç–æ–∫ (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ú–æ–Ω–æ–ø–æ–ª–∏–∏)
        for (let i = 0; i < 40; i++) {
            const cell = document.createElement('div');
            cell.className = 'board-cell';
            cell.dataset.cellIndex = i;
            cell.innerHTML = `
                <div class="cell-content">
                    <div class="cell-number">${i + 1}</div>
                    <div class="cell-name">${this.getCellName(i)}</div>
                    <div class="cell-tokens" id="tokens-${i}"></div>
                </div>
            `;
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≥–ª–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
            if (i === 0) cell.classList.add('start-cell');
            if (i === 10) cell.classList.add('jail-cell');
            if (i === 20) cell.classList.add('parking-cell');
            if (i === 30) cell.classList.add('go-to-jail-cell');
            
            boardGrid.appendChild(cell);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
     */
    getCellName(index) {
        const cellNames = [
            '–°–¢–ê–†–¢', '–ë–∞–ª—Ç–∏–π—Å–∫–∞—è', '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞', '–°—Ä–µ–¥–Ω—è—è', '–ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥',
            '–°–µ–≤–µ—Ä–Ω–∞—è –∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–û—Ä–∏–µ–Ω—Ç–∞–ª', '–®–∞–Ω—Å', '–í–µ—Ä–º–æ–Ω—Ç', '–ö–æ–Ω–Ω–µ–∫—Ç–∏–∫—É—Ç',
            '–¢–Æ–†–¨–ú–ê', '–°–µ–Ω—Ç-–ß–∞—Ä–ª—å–∑', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–®—Ç–∞—Ç—ã', '–í–∏—Ä–¥–∂–∏–Ω–∏—è',
            '–ü–µ–Ω—Å–∏–ª—å–≤–∞–Ω—Å–∫–∞—è –∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–°–µ–Ω—Ç-–î–∂–µ–π–º—Å', '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞', '–¢–µ–Ω–Ω–µ—Å—Å–∏', '–ù—å—é-–ô–æ—Ä–∫',
            '–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ü–ê–†–ö–û–í–ö–ê', '–ö–µ–Ω—Ç—É–∫–∫–∏', '–®–∞–Ω—Å', '–ò–Ω–¥–∏–∞–Ω–∞', '–ò–ª–ª–∏–Ω–æ–π—Å',
            'B&O –∂–µ–ª–µ–∑–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–ê—Ç–ª–∞–Ω—Ç–∏–∫', '–í–µ–Ω—Ç–Ω–æ—Ä', '–í–æ–¥–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–ú–∞—Ä–≤–∏–Ω –ì–∞—Ä–¥–µ–Ω—Å',
            '–ò–î–¢–ò –í –¢–Æ–†–¨–ú–£', '–¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∞—è', '–°–µ–≤–µ—Ä–Ω–∞—è –ö–∞—Ä–æ–ª–∏–Ω–∞', '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞–∑–Ω–∞', '–ü–µ–Ω—Å–∏–ª—å–≤–∞–Ω–∏—è',
            '–ö–æ—Ä–æ—Ç–∫–∞—è –ª–∏–Ω–∏—è', '–®–∞–Ω—Å', '–ü–∞—Ä–∫ –ü–ª–µ–π—Å', '–ù–∞–ª–æ–≥ –Ω–∞ —Ä–æ—Å–∫–æ—à—å', '–ë–æ—Ä–¥–≤–æ–ª–∫'
        ];
        return cellNames[index] || `–ö–ª–µ—Ç–∫–∞ ${index + 1}`;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ñ–∏—à–∫—É –∏–≥—Ä–æ–∫–∞
     */
    createPlayerToken(playerIndex, playerName, color, position = 0) {
        const tokenId = `player-token-${playerIndex}`;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–∏—à–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingToken = document.getElementById(tokenId);
        if (existingToken) {
            existingToken.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏—à–∫—É
        const token = document.createElement('div');
        token.id = tokenId;
        token.className = 'player-token-v2';
        token.dataset.playerIndex = playerIndex;
        token.style.cssText = `
            position: absolute;
            width: ${this.config.tokenSize}px;
            height: ${this.config.tokenSize}px;
            background: ${color};
            border: 3px solid white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 16px;
            z-index: 100;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
            user-select: none;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
        const number = document.createElement('div');
        number.textContent = playerIndex + 1;
        number.style.cssText = `
            font-size: 14px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        `;
        token.appendChild(number);

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        token.addEventListener('mouseenter', () => {
            if (this.uiState.showAnimations) {
                token.style.transform = 'scale(1.2)';
                token.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.4)';
            }
        });

        token.addEventListener('mouseleave', () => {
            token.style.transform = 'scale(1)';
            token.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
        token.addEventListener('click', () => {
            this.showPlayerInfo(playerIndex, playerName, color);
        });

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ–∏—à–∫—É
        this.positionToken(token, position, playerIndex);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        const boardGrid = document.getElementById('board-grid');
        if (boardGrid) {
            boardGrid.appendChild(token);
        }

        this.playerTokens.set(playerIndex, token);
        console.log('üé® GameBoardUI: –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏—à–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', { playerIndex, playerName, color });
        
        return token;
    }

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏—à–∫—É –Ω–∞ –ø–æ–ª–µ
     */
    positionToken(token, position, playerIndex = null) {
        const cell = document.querySelector(`[data-cell-index="${position}"]`);
        if (!cell) {
            console.warn('üé® GameBoardUI: –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', position);
            return;
        }

        const cellRect = cell.getBoundingClientRect();
        const boardRect = this.gameBoard.getBoundingClientRect();
        
        // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        const offset = this.config.cellSize * 0.15;
        let offsetX = 0;
        let offsetY = 0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∏—à–µ–∫ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
        const pIndex = playerIndex !== null ? playerIndex : parseInt(token.dataset.playerIndex);
        if (pIndex !== null && !Number.isNaN(pIndex)) {
            const tokensOnCell = Array.from(this.playerTokens.values())
                .filter(t => t !== token && this.getTokenPosition(t) === position);
            const localIndex = tokensOnCell.length;
            
            const angle = (localIndex % 8) * (Math.PI / 4); // —à–∞–≥ 45¬∞
            offsetX = Math.cos(angle) * offset;
            offsetY = Math.sin(angle) * offset;
        }

        const x = cellRect.left - boardRect.left + cellRect.width / 2 + offsetX;
        const y = cellRect.top - boardRect.top + cellRect.height / 2 + offsetY;

        token.style.left = `${x - this.config.tokenSize / 2}px`;
        token.style.top = `${y - this.config.tokenSize / 2}px`;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
     */
    getTokenPosition(token) {
        const cell = token.closest('[data-cell-index]');
        return cell ? parseInt(cell.dataset.cellIndex) : 0;
    }

    /**
     * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏
     */
    async moveToken(playerIndex, fromPosition, toPosition, steps) {
        const token = this.playerTokens.get(playerIndex);
        if (!token) {
            console.error('üé® GameBoardUI: –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', playerIndex);
            return;
        }

        console.log('üé® GameBoardUI: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏', { playerIndex, fromPosition, toPosition, steps });

        if (!this.uiState.showAnimations) {
            this.positionToken(token, toPosition, playerIndex);
            return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —à–∞–≥–∞–º
        for (let i = 1; i <= steps; i++) {
            const currentPosition = (fromPosition + i) % 40;
            await this.animateStep(token, currentPosition, i === steps);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 200));
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
     */
    async animateStep(token, position, isLastStep = false) {
        return new Promise((resolve) => {
            this.positionToken(token, position);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä—ã–∂–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
            if (isLastStep) {
                token.style.transform = 'scale(1.3)';
                setTimeout(() => {
                    token.style.transform = 'scale(1)';
                }, 150);
            }

            setTimeout(resolve, this.config.animationDuration);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
     */
    showPlayerInfo(playerIndex, playerName, color) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'player-info-modal-v2';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        `;

        const content = document.createElement('div');
        content.style.cssText = `
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
        `;

        content.innerHTML = `
            <div class="player-header" style="color: ${color}; margin-bottom: 20px;">
                <h3 style="margin: 0; font-size: 24px;">${playerName}</h3>
                <p style="margin: 5px 0; opacity: 0.7;">–ò–≥—Ä–æ–∫ #${playerIndex + 1}</p>
            </div>
            <div class="player-stats">
                <div class="stat-item">
                    <span class="stat-label">–ü–æ–∑–∏—Ü–∏—è:</span>
                    <span class="stat-value" id="playerPosition">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">–ë–∞–ª–∞–Ω—Å:</span>
                    <span class="stat-value" id="playerBalance">$0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:</span>
                    <span class="stat-value" id="playerProperties">0</span>
                </div>
            </div>
            <button onclick="this.closest('.player-info-modal-v2').remove()" 
                    style="margin-top: 20px; padding: 12px 24px; background: #007bff; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px;">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        `;

        modal.appendChild(content);
        document.body.appendChild(modal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–∞—Ö
     */
    updatePlayersPanel(players) {
        const playersList = document.getElementById('players-list');
        if (!playersList) return;

        playersList.innerHTML = players.map((player, index) => `
            <div class="player-item" style="border-left: 4px solid ${player.color};">
                <div class="player-name">${player.name}</div>
                <div class="player-money">$${player.money}</div>
                <div class="player-position">–ü–æ–∑–∏—Ü–∏—è: ${player.position + 1}</div>
            </div>
        `).join('');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
     */
    updateGameInfo(stats) {
        const infoContent = document.querySelector('.info-content');
        if (!infoContent) return;

        infoContent.innerHTML = `
            <div class="info-item">
                <span class="info-label">–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫:</span>
                <span class="info-value">${stats.currentPlayerName}</span>
            </div>
            <div class="info-item">
                <span class="info-label">–•–æ–¥:</span>
                <span class="info-value">${stats.turnNumber}</span>
            </div>
            <div class="info-item">
                <span class="info-label">–ö—É–±–∏–∫:</span>
                <span class="info-value">${stats.diceValue}</span>
            </div>
            <div class="info-item">
                <span class="info-label">–í—Ä–µ–º—è –∏–≥—Ä—ã:</span>
                <span class="info-value">${Math.floor(stats.gameDuration / 60)}:${(stats.gameDuration % 60).toString().padStart(2, '0')}</span>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info', duration = null) {
        if (!this.uiState.showNotifications) return;

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        const container = document.getElementById('notifications-container');
        if (container) {
            container.appendChild(notification);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, duration || this.config.notificationDuration);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    initializeNotifications() {
        const container = document.getElementById('notifications-container');
        if (container) {
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                pointer-events: none;
            `;
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .game-board-v2 {
                width: 100%;
                max-width: 1200px;
                margin: 0 auto;
                background: #f8f9fa;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                overflow: hidden;
            }
            
            .board-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .board-header h2 {
                margin: 0;
                font-size: 28px;
                font-weight: bold;
            }
            
            .game-controls {
                display: flex;
                gap: 10px;
            }
            
            .control-btn {
                background: rgba(255, 255, 255, 0.2);
                border: none;
                color: white;
                padding: 10px 15px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 14px;
                transition: background 0.3s ease;
            }
            
            .control-btn:hover {
                background: rgba(255, 255, 255, 0.3);
            }
            
            .board-container {
                display: flex;
                min-height: 600px;
            }
            
            .board-grid {
                flex: 1;
                display: grid;
                grid-template-columns: repeat(11, 1fr);
                grid-template-rows: repeat(11, 1fr);
                gap: 2px;
                padding: 20px;
                background: #e9ecef;
            }
            
            .board-cell {
                background: white;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                min-height: 60px;
                transition: all 0.3s ease;
            }
            
            .board-cell:hover {
                border-color: #007bff;
                box-shadow: 0 4px 12px rgba(0, 123, 255, 0.2);
            }
            
            .start-cell {
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
                font-weight: bold;
            }
            
            .jail-cell {
                background: linear-gradient(135deg, #dc3545, #fd7e14);
                color: white;
                font-weight: bold;
            }
            
            .parking-cell {
                background: linear-gradient(135deg, #6f42c1, #e83e8c);
                color: white;
                font-weight: bold;
            }
            
            .go-to-jail-cell {
                background: linear-gradient(135deg, #fd7e14, #dc3545);
                color: white;
                font-weight: bold;
            }
            
            .cell-content {
                text-align: center;
                width: 100%;
            }
            
            .cell-number {
                font-size: 12px;
                font-weight: bold;
                opacity: 0.7;
            }
            
            .cell-name {
                font-size: 10px;
                margin: 2px 0;
                line-height: 1.2;
            }
            
            .cell-tokens {
                position: absolute;
                top: 2px;
                right: 2px;
                display: flex;
                flex-wrap: wrap;
                gap: 2px;
            }
            
            .player-token-v2 {
                transition: all 0.3s ease;
            }
            
            .player-token-v2:hover {
                transform: scale(1.2);
                z-index: 101;
            }
            
            .board-sidebar {
                width: 300px;
                background: white;
                border-left: 1px solid #dee2e6;
                padding: 20px;
                overflow-y: auto;
            }
            
            .players-panel h3,
            .game-info h3 {
                margin: 0 0 15px 0;
                color: #495057;
                font-size: 18px;
            }
            
            .player-item {
                background: #f8f9fa;
                padding: 15px;
                margin-bottom: 10px;
                border-radius: 8px;
                transition: all 0.3s ease;
            }
            
            .player-item:hover {
                background: #e9ecef;
                transform: translateX(5px);
            }
            
            .player-name {
                font-weight: bold;
                font-size: 16px;
                margin-bottom: 5px;
            }
            
            .player-money {
                color: #28a745;
                font-weight: bold;
                font-size: 18px;
            }
            
            .player-position {
                color: #6c757d;
                font-size: 14px;
            }
            
            .info-item {
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
                padding: 8px 0;
                border-bottom: 1px solid #e9ecef;
            }
            
            .info-label {
                color: #6c757d;
                font-weight: 500;
            }
            
            .info-value {
                color: #495057;
                font-weight: bold;
            }
            
            .notification {
                background: white;
                padding: 15px 20px;
                margin-bottom: 10px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                animation: slideInRight 0.3s ease;
                pointer-events: auto;
            }
            
            .notification-info {
                border-left: 4px solid #007bff;
            }
            
            .notification-success {
                border-left: 4px solid #28a745;
            }
            
            .notification-warning {
                border-left: 4px solid #ffc107;
            }
            
            .notification-error {
                border-left: 4px solid #dc3545;
            }
            
            .player-info-modal-v2 {
                animation: fadeIn 0.3s ease;
            }
            
            .player-stats {
                margin: 20px 0;
            }
            
            .stat-item {
                display: flex;
                justify-content: space-between;
                margin-bottom: 10px;
                padding: 8px 0;
                border-bottom: 1px solid #e9ecef;
            }
            
            .stat-label {
                color: #6c757d;
                font-weight: 500;
            }
            
            .stat-value {
                color: #495057;
                font-weight: bold;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            @keyframes slideIn {
                from { transform: translateY(-20px); opacity: 0; }
                to { transform: translateY(0); opacity: 1; }
            }
            
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @media (max-width: 768px) {
                .board-container {
                    flex-direction: column;
                }
                
                .board-sidebar {
                    width: 100%;
                }
                
                .board-grid {
                    grid-template-columns: repeat(8, 1fr);
                    grid-template-rows: repeat(5, 1fr);
                }
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    addEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
        const pauseBtn = document.getElementById('pause-btn');
        if (pauseBtn) {
            pauseBtn.addEventListener('click', () => {
                this.showNotification('–ü–∞—É–∑–∞ –∏–≥—Ä—ã', 'info');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—É–∑—ã
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsBtn = document.getElementById('settings-btn');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => {
                this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã', 'info');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            });
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
     */
    clearAllTokens() {
        this.playerTokens.forEach(token => token.remove());
        this.playerTokens.clear();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
     */
    updateTokenPosition(playerIndex, position) {
        const token = this.playerTokens.get(playerIndex);
        if (token) {
            this.positionToken(token, position, playerIndex);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
     */
    getAllTokens() {
        return Array.from(this.playerTokens.values());
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js –∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardUI;
} else {
    window.GameBoardUI = GameBoardUI;
}
