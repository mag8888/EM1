/**
 * Game Board Service - –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º –∏ —Ñ–∏—à–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 */

class GameBoardService {
    constructor() {
        console.log('üé≤ GameBoardService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è');
        this.boardSize = 40; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ
        this.players = []; // –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
        this.currentPlayerIndex = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.diceValue = 0; // –ó–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
     */
    initializeBoard(players) {
        console.log('üé≤ GameBoardService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤', players.length);
        
        this.players = players.map((player, index) => ({
            id: player._id || player.user_id,
            name: player.name,
            position: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            color: this.getPlayerColor(index),
            token: this.getPlayerToken(index),
            money: 3000, // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏
            properties: [],
            isActive: true
        }));

        this.currentPlayerIndex = 0;
        console.log('üé≤ GameBoardService: –ü–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', this.players);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
     */
    getPlayerColor(index) {
        const colors = [
            '#FF6B6B', // –ö—Ä–∞—Å–Ω—ã–π
            '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π
            '#45B7D1', // –°–∏–Ω–∏–π
            '#96CEB4', // –ó–µ–ª–µ–Ω—ã–π
            '#FFEAA7', // –ñ–µ–ª—Ç—ã–π
            '#DDA0DD', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '#FFB347', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '#98D8C8'  // –ú—è—Ç–Ω—ã–π
        ];
        return colors[index % colors.length];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerToken(index) {
        const tokens = ['üî¥', 'üîµ', 'üü¢', 'üü°', 'üü£', 'üü†', 'üî∂', 'üî∑'];
        return tokens[index % tokens.length];
    }

    /**
     * –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     */
    rollDice() {
        this.diceValue = Math.floor(Math.random() * 6) + 1;
        console.log('üé≤ GameBoardService: –í—ã–ø–∞–ª–æ', this.diceValue);
        return this.diceValue;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞
     */
    movePlayer(playerIndex, steps) {
        if (playerIndex < 0 || playerIndex >= this.players.length) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞');
        }

        const player = this.players[playerIndex];
        const oldPosition = player.position;
        player.position = (player.position + steps) % this.boardSize;
        
        console.log('üé≤ GameBoardService: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω', {
            player: player.name,
            from: oldPosition,
            to: player.position,
            steps: steps
        });

        return {
            player: player.name,
            oldPosition: oldPosition,
            newPosition: player.position,
            steps: steps,
            passedGo: this.checkPassedGo(oldPosition, player.position)
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à–µ–ª –ª–∏ –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç
     */
    checkPassedGo(oldPosition, newPosition) {
        return newPosition < oldPosition;
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
     */
    nextTurn() {
        this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
        console.log('üé≤ GameBoardService: –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É', this.players[this.currentPlayerIndex].name);
        return this.currentPlayerIndex;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        return this.players[this.currentPlayerIndex];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    getPlayers() {
        return this.players;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerMoney(playerIndex, amount, reason = '') {
        if (playerIndex < 0 || playerIndex >= this.players.length) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞');
        }

        const player = this.players[playerIndex];
        player.money += amount;
        
        console.log('üé≤ GameBoardService: –î–µ–Ω—å–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            player: player.name,
            amount: amount,
            newBalance: player.money,
            reason: reason
        });

        return player.money;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerPosition(playerIndex) {
        if (playerIndex < 0 || playerIndex >= this.players.length) {
            return null;
        }
        return {
            position: this.players[playerIndex].position,
            color: this.players[playerIndex].color,
            token: this.players[playerIndex].token
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
     */
    getGameStats() {
        return {
            totalPlayers: this.players.length,
            currentPlayer: this.currentPlayerIndex,
            currentPlayerName: this.players[this.currentPlayerIndex].name,
            diceValue: this.diceValue,
            boardSize: this.boardSize
        };
    }
}

module.exports = GameBoardService;
