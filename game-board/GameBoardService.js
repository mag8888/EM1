/**
 * Game Board Service v2.0 - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
 * - –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø–æ–ª—é
 * - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–≥—Ä—ã
 */

class GameBoardService {
    constructor() {
        console.log('üé≤ GameBoardService v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        this.config = {
            boardSize: 40,           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ
            startMoney: 3000,        // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏
            passGoBonus: 200,        // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
            maxPlayers: 8,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            diceSides: 6             // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω –∫—É–±–∏–∫–∞
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.gameState = {
            players: [],
            currentPlayerIndex: 0,
            diceValue: 0,
            gamePhase: 'waiting', // waiting, playing, paused, finished
            turnNumber: 0,
            gameStartTime: null,
            lastAction: null
        };
        
        // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
        this.eventListeners = new Map();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.initializeService();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    initializeService() {
        console.log('üé≤ GameBoardService: –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.emit('serviceReady');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å –∏–≥—Ä–æ–∫–∞–º–∏
     */
    initializeBoard(players) {
        console.log('üé≤ GameBoardService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –¥–ª—è', players.length, '–∏–≥—Ä–æ–∫–æ–≤');
        
        if (players.length < 2) {
            throw new Error('–ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
        }
        
        if (players.length > this.config.maxPlayers) {
            throw new Error(`–ú–∞–∫—Å–∏–º—É–º ${this.config.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤`);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        this.gameState.players = players.map((player, index) => ({
            id: player._id || player.user_id || `player_${index}`,
            name: player.name || `–ò–≥—Ä–æ–∫ ${index + 1}`,
            position: 0,
            color: this.getPlayerColor(index),
            token: this.getPlayerToken(index),
            money: this.config.startMoney,
            properties: [],
            isActive: true,
            stats: {
                totalMoves: 0,
                totalMoneyEarned: 0,
                totalMoneySpent: 0,
                propertiesOwned: 0,
                timesPassedGo: 0,
                jailTime: 0
            },
            effects: {
                inJail: false,
                jailTurns: 0,
                hasGetOutOfJailCard: false,
                isBankrupt: false
            }
        }));

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        this.gameState.currentPlayerIndex = 0;
        this.gameState.diceValue = 0;
        this.gameState.gamePhase = 'playing';
        this.gameState.turnNumber = 0;
        this.gameState.gameStartTime = new Date();
        this.gameState.lastAction = null;

        console.log('üé≤ GameBoardService: –ü–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', this.gameState.players);
        this.emit('boardInitialized', { players: this.gameState.players });
        
        return this.gameState.players;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
     */
    getPlayerColor(index) {
        const colors = [
            '#FF6B6B', // –ö—Ä–∞—Å–Ω—ã–π
            '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π  
            '#45B7D1', // –°–∏–Ω–∏–π
            '#96CEB4', // –ó–µ–ª–µ–Ω—ã–π
            '#FFEAA7', // –ñ–µ–ª—Ç—ã–π
            '#DDA0DD', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '#FFB347', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '#98D8C8'  // –ú—è—Ç–Ω—ã–π
        ];
        return colors[index % colors.length];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerToken(index) {
        const tokens = ['üî¥', 'üîµ', 'üü¢', 'üü°', 'üü£', 'üü†', 'üî∂', 'üî∑'];
        return tokens[index % tokens.length];
    }

    /**
     * –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     */
    rollDice() {
        const dice1 = Math.floor(Math.random() * this.config.diceSides) + 1;
        const dice2 = Math.floor(Math.random() * this.config.diceSides) + 1;
        this.gameState.diceValue = dice1 + dice2;
        
        console.log('üé≤ GameBoardService: –í—ã–ø–∞–ª–æ', dice1, '+', dice2, '=', this.gameState.diceValue);
        
        this.emit('diceRolled', { 
            dice1, 
            dice2, 
            total: this.gameState.diceValue,
            isDouble: dice1 === dice2
        });
        
        return {
            dice1,
            dice2,
            total: this.gameState.diceValue,
            isDouble: dice1 === dice2
        };
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞
     */
    movePlayer(playerIndex, steps = null) {
        if (playerIndex < 0 || playerIndex >= this.gameState.players.length) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞');
        }

        const player = this.gameState.players[playerIndex];
        if (!player.isActive || player.effects.isBankrupt) {
            throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
        const moveSteps = steps !== null ? steps : this.gameState.diceValue;
        const oldPosition = player.position;
        const newPosition = (player.position + moveSteps) % this.config.boardSize;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        player.position = newPosition;
        player.stats.totalMoves += moveSteps;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç
        const passedGo = this.checkPassedGo(oldPosition, newPosition);
        if (passedGo) {
            player.money += this.config.passGoBonus;
            player.stats.totalMoneyEarned += this.config.passGoBonus;
            player.stats.timesPassedGo++;
            this.emit('playerPassedGo', { player, bonus: this.config.passGoBonus });
        }

        const moveResult = {
            player: player.name,
            playerIndex,
            oldPosition,
            newPosition,
            steps: moveSteps,
            passedGo,
            currentMoney: player.money
        };

        console.log('üé≤ GameBoardService: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω', moveResult);
        this.emit('playerMoved', moveResult);
        
        return moveResult;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à–µ–ª –ª–∏ –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç
     */
    checkPassedGo(oldPosition, newPosition) {
        return newPosition < oldPosition;
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
     */
    nextTurn() {
        this.gameState.turnNumber++;
        this.gameState.currentPlayerIndex = (this.gameState.currentPlayerIndex + 1) % this.gameState.players.length;
        
        const currentPlayer = this.getCurrentPlayer();
        console.log('üé≤ GameBoardService: –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É', currentPlayer.name);
        
        this.emit('turnChanged', { 
            currentPlayer, 
            turnNumber: this.gameState.turnNumber,
            playerIndex: this.gameState.currentPlayerIndex
        });
        
        return this.gameState.currentPlayerIndex;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        return this.gameState.players[this.gameState.currentPlayerIndex];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    getPlayers() {
        return this.gameState.players;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerMoney(playerIndex, amount, reason = '') {
        if (playerIndex < 0 || playerIndex >= this.gameState.players.length) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞');
        }

        const player = this.gameState.players[playerIndex];
        const oldMoney = player.money;
        player.money += amount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (amount > 0) {
            player.stats.totalMoneyEarned += amount;
        } else {
            player.stats.totalMoneySpent += Math.abs(amount);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
        if (player.money < 0) {
            player.effects.isBankrupt = true;
            player.isActive = false;
            this.emit('playerBankrupt', { player, oldMoney, newMoney: player.money });
        }
        
        console.log('üé≤ GameBoardService: –î–µ–Ω—å–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', {
            player: player.name,
            amount,
            oldMoney,
            newMoney: player.money,
            reason
        });

        this.emit('moneyUpdated', { player, amount, reason, oldMoney, newMoney: player.money });
        return player.money;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerPosition(playerIndex) {
        if (playerIndex < 0 || playerIndex >= this.gameState.players.length) {
            return null;
        }
        
        const player = this.gameState.players[playerIndex];
        return {
            position: player.position,
            color: player.color,
            token: player.token,
            name: player.name,
            money: player.money
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
     */
    getGameStats() {
        const activePlayers = this.gameState.players.filter(p => p.isActive && !p.effects.isBankrupt);
        const gameDuration = this.gameState.gameStartTime ? 
            Date.now() - this.gameState.gameStartTime.getTime() : 0;
            
        return {
            totalPlayers: this.gameState.players.length,
            activePlayers: activePlayers.length,
            currentPlayer: this.gameState.currentPlayerIndex,
            currentPlayerName: this.getCurrentPlayer().name,
            diceValue: this.gameState.diceValue,
            boardSize: this.config.boardSize,
            gamePhase: this.gameState.gamePhase,
            turnNumber: this.gameState.turnNumber,
            gameDuration: Math.floor(gameDuration / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            lastAction: this.gameState.lastAction
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
     */
    getPlayerStats(playerIndex) {
        if (playerIndex < 0 || playerIndex >= this.gameState.players.length) {
            return null;
        }
        
        const player = this.gameState.players[playerIndex];
        return {
            ...player,
            stats: { ...player.stats },
            effects: { ...player.effects }
        };
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
     */
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
    }

    off(event, callback) {
        if (this.eventListeners.has(event)) {
            const listeners = this.eventListeners.get(event);
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }

    emit(event, data) {
        if (this.eventListeners.has(event)) {
            this.eventListeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error('üé≤ GameBoardService: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è', event, error);
                }
            });
        }
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
     */
    resetGame() {
        this.gameState.players = [];
        this.gameState.currentPlayerIndex = 0;
        this.gameState.diceValue = 0;
        this.gameState.gamePhase = 'waiting';
        this.gameState.turnNumber = 0;
        this.gameState.gameStartTime = null;
        this.gameState.lastAction = null;
        
        console.log('üé≤ GameBoardService: –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
        this.emit('gameReset');
    }

    /**
     * –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    togglePause() {
        if (this.gameState.gamePhase === 'playing') {
            this.gameState.gamePhase = 'paused';
            this.emit('gamePaused');
        } else if (this.gameState.gamePhase === 'paused') {
            this.gameState.gamePhase = 'playing';
            this.emit('gameResumed');
        }
        
        return this.gameState.gamePhase;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js –∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardService;
} else {
    window.GameBoardService = GameBoardService;
}