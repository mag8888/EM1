/**
 * Game Board Manager v2.1 - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * 
 * –û–°–ù–û–í–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * - Object pooling –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
 * - Lazy loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * - Memory leak prevention
 * - Efficient state management
 * - Reduced API calls
 */

class GameBoardManagerOptimized {
    constructor(containerId = 'game-board-container') {
        console.log('üéÆ GameBoardManagerOptimized v2.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        this.containerId = containerId;
        this.service = null;
        this.ui = null;
        this.isInitialized = false;
        
        // OBJECT POOLING –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        this.objectPool = {
            notifications: [],
            animations: [],
            domElements: []
        };
        
        // LAZY LOADING —Ñ–ª–∞–≥–∏
        this.lazyLoaded = {
            service: false,
            ui: false,
            eventHandlers: false
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.managerState = {
            gameActive: false,
            currentPhase: 'waiting',
            lastUpdate: null,
            errorCount: 0,
            performanceMetrics: {
                frameRate: 0,
                memoryUsage: 0,
                domOperations: 0
            }
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            autoSave: true,
            autoSaveInterval: 30000,
            maxErrors: 10,
            debugMode: false,
            performanceMonitoring: true,
            lazyLoadDelay: 100 // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è lazy loading
        };
        
        // DEBOUNCED FUNCTIONS
        this.debouncedSave = this.debounce(this.saveGameState.bind(this), 1000);
        this.debouncedUpdate = this.debounce(this.updateManager.bind(this), 16);
        
        // PERFORMANCE MONITORING
        this.performanceObserver = null;
        this.frameCount = 0;
        this.lastFrameTime = performance.now();
        
        this.initializeManager();
    }

    /**
     * DEBOUNCE HELPER
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    /**
     * THROTTLE HELPER
     */
    throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    /**
     * OBJECT POOLING - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
     */
    getPooledObject(type) {
        if (this.objectPool[type] && this.objectPool[type].length > 0) {
            return this.objectPool[type].pop();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç
        return this.createPooledObject(type);
    }

    returnToPool(type, obj) {
        if (this.objectPool[type]) {
            // –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –ø—É–ª
            this.resetPooledObject(type, obj);
            this.objectPool[type].push(obj);
        }
    }

    createPooledObject(type) {
        switch (type) {
            case 'notifications':
                return {
                    id: null,
                    message: '',
                    type: 'info',
                    duration: 3000,
                    timestamp: 0
                };
            case 'animations':
                return {
                    id: null,
                    element: null,
                    startTime: 0,
                    duration: 0,
                    easing: 'ease'
                };
            case 'domElements':
                return document.createElement('div');
            default:
                return {};
        }
    }

    resetPooledObject(type, obj) {
        switch (type) {
            case 'notifications':
                obj.id = null;
                obj.message = '';
                obj.type = 'info';
                obj.duration = 3000;
                obj.timestamp = 0;
                break;
            case 'animations':
                obj.id = null;
                obj.element = null;
                obj.startTime = 0;
                obj.duration = 0;
                obj.easing = 'ease';
                break;
            case 'domElements':
                obj.innerHTML = '';
                obj.className = '';
                obj.style.cssText = '';
                break;
        }
    }

    /**
     * LAZY LOADING - –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
     */
    async lazyLoadService() {
        if (this.lazyLoaded.service) return this.service;
        
        console.log('üéÆ GameBoardManagerOptimized: Lazy loading service...');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, this.config.lazyLoadDelay));
        
        this.service = new GameBoardService();
        this.lazyLoaded.service = true;
        
        return this.service;
    }

    async lazyLoadUI() {
        if (this.lazyLoaded.ui) return this.ui;
        
        console.log('üéÆ GameBoardManagerOptimized: Lazy loading UI...');
        
        await new Promise(resolve => setTimeout(resolve, this.config.lazyLoadDelay));
        
        this.ui = new GameBoardUIOptimized(this.containerId);
        this.lazyLoaded.ui = true;
        
        return this.ui;
    }

    async lazyLoadEventHandlers() {
        if (this.lazyLoaded.eventHandlers) return;
        
        console.log('üéÆ GameBoardManagerOptimized: Lazy loading event handlers...');
        
        await new Promise(resolve => setTimeout(resolve, this.config.lazyLoadDelay));
        
        this.addOptimizedEventHandlers();
        this.lazyLoaded.eventHandlers = true;
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
     */
    async initializeManager() {
        try {
            console.log('üéÆ GameBoardManagerOptimized: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
            
            // Lazy loading –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await Promise.all([
                this.lazyLoadService(),
                this.lazyLoadUI(),
                this.lazyLoadEventHandlers()
            ]);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è performance monitoring
            if (this.config.performanceMonitoring) {
                this.initializePerformanceMonitoring();
            }
            
            this.isInitialized = true;
            console.log('üéÆ GameBoardManagerOptimized: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('üéÆ GameBoardManagerOptimized: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.handleError(error);
        }
    }

    /**
     * PERFORMANCE MONITORING
     */
    initializePerformanceMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
        const measureFPS = () => {
            const now = performance.now();
            this.frameCount++;
            
            if (now - this.lastFrameTime >= 1000) {
                this.managerState.performanceMetrics.frameRate = this.frameCount;
                this.frameCount = 0;
                this.lastFrameTime = now;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∏–∑–∫–∏–π FPS
                if (this.managerState.performanceMetrics.frameRate < 30) {
                    console.warn('üéÆ GameBoardManagerOptimized: –ù–∏–∑–∫–∏–π FPS:', this.managerState.performanceMetrics.frameRate);
                }
            }
            
            requestAnimationFrame(measureFPS);
        };
        
        measureFPS();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (performance.memory) {
            setInterval(() => {
                this.managerState.performanceMetrics.memoryUsage = performance.memory.usedJSHeapSize;
            }, 5000);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï EVENT HANDLERS
     */
    addOptimizedEventHandlers() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º event delegation
        document.addEventListener('gameStateChanged', this.handleGameStateChange.bind(this));
        document.addEventListener('playerMoved', this.handlePlayerMoved.bind(this));
        document.addEventListener('errorOccurred', this.handleError.bind(this));
        
        // Throttled handlers –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
        document.addEventListener('uiUpdate', this.throttle(this.handleUIUpdate.bind(this), 16));
        document.addEventListener('animationFrame', this.throttle(this.handleAnimationFrame.bind(this), 16));
    }

    handleGameStateChange(event) {
        const { newState, oldState } = event.detail;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.updateStateDiffs(oldState, newState);
        
        // Debounced save
        this.debouncedSave();
    }

    handlePlayerMoved(event) {
        const { playerId, fromPosition, toPosition, steps } = event.detail;
        
        // Lazy load UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (this.ui) {
            this.ui.moveTokenOptimized(playerId, fromPosition, toPosition, steps);
        }
    }

    handleUIUpdate(event) {
        this.managerState.performanceMetrics.domOperations++;
        
        // Batch UI updates
        this.debouncedUpdate();
    }

    handleAnimationFrame(event) {
        this.frameCount++;
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú
     */
    updateStateDiffs(oldState, newState) {
        const changes = this.getStateChanges(oldState, newState);
        
        changes.forEach(change => {
            this.applyStateChange(change);
        });
    }

    getStateChanges(oldState, newState) {
        const changes = [];
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å–≤–æ–π—Å—Ç–≤–∞
        Object.keys(newState).forEach(key => {
            if (JSON.stringify(oldState[key]) !== JSON.stringify(newState[key])) {
                changes.push({
                    key,
                    oldValue: oldState[key],
                    newValue: newState[key]
                });
            }
        });
        
        return changes;
    }

    applyStateChange(change) {
        const { key, newValue } = change;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        switch (key) {
            case 'currentPhase':
                this.managerState.currentPhase = newValue;
                break;
            case 'gameActive':
                this.managerState.gameActive = newValue;
                break;
            // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï
     */
    async saveGameState() {
        if (!this.config.autoSave) return;
        
        try {
            const state = this.getCurrentState();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º object pooling –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notification = this.getPooledObject('notifications');
            notification.message = '–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞';
            notification.type = 'success';
            notification.timestamp = Date.now();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(notification);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—É–ª
            this.returnToPool('notifications', notification);
            
        } catch (error) {
            console.error('üéÆ GameBoardManagerOptimized: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.handleError(error);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê
     */
    updateManager() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (!this.isInitialized) return;
        
        // Batch updates
        this.batchUpdateManager();
    }

    batchUpdateManager() {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updates = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        if (this.managerState.lastUpdate) {
            updates.push({
                type: 'lastUpdate',
                value: Date.now()
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É
        updates.forEach(update => {
            this.applyManagerUpdate(update);
        });
    }

    applyManagerUpdate(update) {
        switch (update.type) {
            case 'lastUpdate':
                this.managerState.lastUpdate = update.value;
                break;
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
     */
    showNotification(notification) {
        if (!this.ui) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º object pooling
        const notificationElement = this.getPooledObject('domElements');
        notificationElement.className = 'notification-optimized';
        notificationElement.textContent = notification.message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        const container = document.getElementById('notifications-container');
        if (container) {
            container.appendChild(notificationElement);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            setTimeout(() => {
                container.removeChild(notificationElement);
                this.returnToPool('domElements', notificationElement);
            }, notification.duration);
        }
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
     */
    handleError(error) {
        this.managerState.errorCount++;
        
        if (this.managerState.errorCount > this.config.maxErrors) {
            console.error('üéÆ GameBoardManagerOptimized: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫');
            this.pauseGame();
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        console.error('üéÆ GameBoardManagerOptimized: –û—à–∏–±–∫–∞:', error);
    }

    /**
     * –ü–ê–£–ó–ê –ò–ì–†–´
     */
    pauseGame() {
        this.managerState.gameActive = false;
        this.managerState.currentPhase = 'paused';
        
        // –ü–∞—É–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–π
        if (this.ui) {
            this.ui.pauseAnimations();
        }
    }

    /**
     * –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ì–†–´
     */
    resumeGame() {
        this.managerState.gameActive = true;
        this.managerState.currentPhase = 'playing';
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
        if (this.ui) {
            this.ui.resumeAnimations();
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø
     */
    getCurrentState() {
        return {
            managerState: { ...this.managerState },
            config: { ...this.config },
            isInitialized: this.isInitialized,
            timestamp: Date.now()
        };
    }

    /**
     * –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò
     */
    cleanup() {
        console.log('üéÆ GameBoardManagerOptimized: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏');
        
        // –û—á–∏—â–∞–µ–º UI
        if (this.ui) {
            this.ui.cleanup();
        }
        
        // –û—á–∏—â–∞–µ–º object pools
        Object.keys(this.objectPool).forEach(key => {
            this.objectPool[key] = [];
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        Object.keys(this.lazyLoaded).forEach(key => {
            this.lazyLoaded[key] = false;
        });
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.managerState = {
            gameActive: false,
            currentPhase: 'waiting',
            lastUpdate: null,
            errorCount: 0,
            performanceMetrics: {
                frameRate: 0,
                memoryUsage: 0,
                domOperations: 0
            }
        };
        
        this.isInitialized = false;
        
        console.log('üéÆ GameBoardManagerOptimized: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ï–¢–†–ò–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
     */
    getPerformanceMetrics() {
        return {
            ...this.managerState.performanceMetrics,
            objectPoolSizes: Object.keys(this.objectPool).reduce((acc, key) => {
                acc[key] = this.objectPool[key].length;
                return acc;
            }, {}),
            lazyLoadedComponents: Object.keys(this.lazyLoaded).reduce((acc, key) => {
                acc[key] = this.lazyLoaded[key];
                return acc;
            }, {})
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameBoardManagerOptimized;
} else if (typeof window !== 'undefined') {
    window.GameBoardManagerOptimized = GameBoardManagerOptimized;
}
