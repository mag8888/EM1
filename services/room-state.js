const crypto = require('crypto');

const STARTING_BALANCE = 10000;
const MIN_PLAYERS = 2;
const MAX_PLAYERS = 8;

const rooms = new Map();
const creditRooms = new Map();
const users = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏

const clamp = (value, min, max) => Math.max(min, Math.min(max, value));

const generateId = (prefix = 'id') => {
    if (crypto.randomUUID) {
        return `${prefix}_${crypto.randomUUID()}`;
    }
    return `${prefix}_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;
};

const DREAMS = [
    { id: 1, name: '–î–æ–º –º–µ—á—Ç—ã', cost: 100000, icon: 'üè†' },
    { id: 2, name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–µ—á—Ç—ã', cost: 150000, icon: '‚úàÔ∏è' },
    { id: 3, name: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è —è—Ö—Ç–∞', cost: 300000, icon: '‚õµ' },
    { id: 4, name: '–ü–æ–ª–µ—Ç –≤ –∫–æ—Å–º–æ—Å', cost: 250000, icon: 'üöÄ' }
];

const TOKENS = [
    { id: 'lion', icon: 'ü¶Å', name: '–õ–µ–≤' },
    { id: 'tiger', icon: 'üêØ', name: '–¢–∏–≥—Ä' },
    { id: 'fox', icon: 'ü¶ä', name: '–õ–∏—Å–∞' },
    { id: 'panda', icon: 'üêº', name: '–ü–∞–Ω–¥–∞' },
    { id: 'frog', icon: 'üê∏', name: '–õ—è–≥—É—à–∫–∞' },
    { id: 'owl', icon: 'ü¶â', name: '–°–æ–≤–∞' },
    { id: 'octopus', icon: 'üêô', name: '–û—Å—å–º–∏–Ω–æ–≥' },
    { id: 'whale', icon: 'üê≥', name: '–ö–∏—Ç' }
];

const SMALL_DEAL_CARDS = [
    { id: 'small_001', name: '–ê–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏', amount: 5000, income: 500, type: 'stock' },
    { id: 'small_002', name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', amount: 3000, income: 250, type: 'bond' },
    { id: 'small_003', name: '–§—Ä–∞–Ω—à–∏–∑–∞ –∫–æ—Ñ–µ-—Ç–æ—á–∫–∏', amount: 8000, income: 900, type: 'business' },
    { id: 'small_004', name: '–ú–∏–Ω–∏-—Å–∫–ª–∞–¥', amount: 7500, income: 850, type: 'real_estate' }
];

const BIG_DEAL_CARDS = [
    { id: 'big_001', name: '–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å', amount: 45000, income: 5200, type: 'real_estate' },
    { id: 'big_002', name: '–ß–∞—Å—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞', amount: 60000, income: 6500, type: 'business' },
    { id: 'big_003', name: 'IT-—Å—Ç–∞—Ä—Ç–∞–ø', amount: 80000, income: 9000, type: 'business' },
    { id: 'big_004', name: '–ü–∞–∫–µ—Ç –∞–∫—Ü–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏', amount: 55000, income: 5000, type: 'stock' }
];

const EXPENSE_CARDS = [
    { id: 'exp_001', name: '–ù–∞–ª–æ–≥–∏', amount: 2000, type: 'tax' },
    { id: 'exp_002', name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', amount: 1500, type: 'medical' },
    { id: 'exp_003', name: '–†–µ–º–æ–Ω—Ç –¥–æ–º–∞', amount: 2500, type: 'repair' },
    { id: 'exp_004', name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π', amount: 3000, type: 'education' }
];

const shuffle = (array) => {
    const result = [...array];
    for (let i = result.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
};

const createDeck = (cards) => ({
    cards: shuffle(cards.map(card => ({ ...card }))),
    original: cards.map(card => ({ ...card })),
    discard: []
});

const drawCard = (deck) => {
    if (!deck.cards.length) {
        deck.cards = shuffle(deck.original.map(card => ({ ...card })));
        deck.discard = [];
    }
    const card = deck.cards.shift();
    return card || null;
};

const drawFromDeck = (deck) => drawCard(deck);

const returnCardToDeck = (deck, card) => {
    if (!card) return;
    deck.discard.push({ ...card });
};

const createPlayerStats = () => ({
    turnsTaken: 0,
    diceRolled: 0,
    dealsBought: 0,
    dealsSkipped: 0,
    dealsTransferred: 0,
    assetsSold: 0,
    incomeReceived: 0,
    expensesPaid: 0
});

const createPlayer = ({ userId, name, avatar, isHost = false }) => ({
    userId: userId.toString(),
    name: name || '–ò–≥—Ä–æ–∫',
    avatar: avatar || null,
    joinedAt: new Date().toISOString(),
    isHost,
    isReady: false,
    selectedDream: null,
    selectedToken: null,
    dreamAchieved: false,
    position: 0,
    track: 'small',
    cash: STARTING_BALANCE,
    passiveIncome: 0,
    assets: [],
    stats: createPlayerStats()
});

const sanitizePlayer = (player) => ({
    userId: player.userId,
    name: player.name,
    avatar: player.avatar,
    isHost: player.isHost,
    isReady: player.isReady,
    selectedDream: player.selectedDream,
    selectedToken: player.selectedToken,
    dreamAchieved: player.dreamAchieved,
    position: player.position,
    track: player.track,
    cash: player.cash,
    passiveIncome: player.passiveIncome,
    assets: player.assets,
    stats: player.stats
});

const sanitizeRoom = (room, { includePlayers = false, userId = null } = {}) => {
    const readyPlayers = room.players.filter(player => player.isReady).length;
    const sanitized = {
        id: room.id,
        name: room.name,
        creatorId: room.creatorId,
        creatorName: room.creatorName,
        maxPlayers: room.maxPlayers,
        turnTime: room.turnTime,
        assignProfessions: room.assignProfessions,
        gameStarted: room.gameStarted,
        status: room.status,
        createdAt: room.createdAt,
        updatedAt: room.updatedAt,
        playersCount: room.players.length,
        readyCount: readyPlayers,
        canStart: room.players.length >= MIN_PLAYERS && readyPlayers >= MIN_PLAYERS,
        availableTokens: TOKENS.map(token => ({
            ...token,
            taken: room.players.some(player => player.selectedToken === token.id)
        })),
        availableDreams: DREAMS
    };

    if (includePlayers) {
        sanitized.players = room.players.map(player => sanitizePlayer(player));
    }

    if (userId) {
        sanitized.currentPlayer = room.players.find(player => player.userId === userId.toString()) || null;
    }

    return sanitized;
};

const createRoomInstance = ({
    id = generateId('room'),
    name,
    creator = {},
    maxPlayers = 4,
    turnTime = 3,
    assignProfessions = false,
    register = true
} = {}) => {
    const room = {
        id,
        name: name || `–ö–æ–º–Ω–∞—Ç–∞ ${id.slice(-4)}`,
        creatorId: creator.id ? creator.id.toString() : null,
        creatorName: creator.name || '–°–æ–∑–¥–∞—Ç–µ–ª—å',
        creatorAvatar: creator.avatar || null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        maxPlayers: clamp(Number(maxPlayers) || 4, MIN_PLAYERS, MAX_PLAYERS),
        minPlayers: MIN_PLAYERS,
        turnTime: clamp(Number(turnTime) || 3, 1, 20),
        assignProfessions: Boolean(assignProfessions),
        gameStarted: false,
        status: 'waiting',
        players: [],
        tokens: {
            available: TOKENS.map(token => ({ ...token })),
            assigned: {}
        },
        dreams: DREAMS.map(dream => ({ ...dream })),
        gameState: null,
        lastActivity: Date.now(),
        game_data: {
            player_balances: [],
            credit_data: {
                player_credits: [],
                credit_history: []
            },
            transfers_history: []
        }
    };
    if (register) {
        rooms.set(id, room);
    }
    return room;
};

const getRoomById = (roomId) => rooms.get(roomId);

const listRooms = () => Array.from(rooms.values());

const addPlayerToRoom = (room, { userId, name, avatar, isHost = false, isReady = false, selectedDream = null, selectedToken = null, position, track, cash, passiveIncome }) => {
    if (!room || !userId) {
        throw new Error('room and userId are required');
    }

    console.log(`üîç addPlayerToRoom: –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ${name} (${userId}), isHost: ${isHost}, isReady: ${isReady}`);

    const existingPlayer = room.players.find(player => player.userId === userId.toString());
    if (existingPlayer) {
        console.log(`üîÑ addPlayerToRoom: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ ${existingPlayer.name}, —Å—Ç–∞—Ä—ã–π isHost: ${existingPlayer.isHost}, –Ω–æ–≤—ã–π isHost: ${isHost}`);
        existingPlayer.name = name || existingPlayer.name;
        existingPlayer.avatar = avatar || existingPlayer.avatar;
        existingPlayer.isHost = isHost !== undefined ? isHost : existingPlayer.isHost;
        existingPlayer.isReady = isReady !== undefined ? isReady : existingPlayer.isReady;
        existingPlayer.selectedDream = selectedDream !== undefined ? selectedDream : existingPlayer.selectedDream;
        existingPlayer.selectedToken = selectedToken !== undefined ? selectedToken : existingPlayer.selectedToken;
        if (position !== undefined) existingPlayer.position = Number(position) || 0;
        if (track !== undefined) existingPlayer.track = String(track);
        if (cash !== undefined) existingPlayer.cash = Math.floor(Number(cash) || existingPlayer.cash);
        if (passiveIncome !== undefined) existingPlayer.passiveIncome = Math.floor(Number(passiveIncome) || 0);
        console.log(`‚úÖ addPlayerToRoom: –∏–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, isHost: ${existingPlayer.isHost}, isReady: ${existingPlayer.isReady}`);
        return existingPlayer;
    }

    if (room.players.length >= room.maxPlayers) {
        throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    }

    console.log(`üîß addPlayerToRoom: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å isHost=${isHost}, userId=${userId}, name=${name}`);
    const newPlayer = createPlayer({ userId, name, avatar });
    newPlayer.isHost = isHost;
    newPlayer.isReady = isReady;
    newPlayer.selectedDream = selectedDream;
    newPlayer.selectedToken = selectedToken;
    if (position !== undefined) newPlayer.position = Number(position) || 0;
    if (track !== undefined) newPlayer.track = String(track);
    if (cash !== undefined) newPlayer.cash = Math.floor(Number(cash) || newPlayer.cash);
    if (passiveIncome !== undefined) newPlayer.passiveIncome = Math.floor(Number(passiveIncome) || 0);
    console.log(`üîß addPlayerToRoom: –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω, isHost=${newPlayer.isHost}, userId=${newPlayer.userId}`);
    room.players.push(newPlayer);
    room.game_data.player_balances.push(newPlayer.cash);
    room.game_data.credit_data.player_credits.push(0);
    room.updatedAt = new Date().toISOString();
    
    console.log(`‚úÖ addPlayerToRoom: –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ${newPlayer.name} —Å–æ–∑–¥–∞–Ω, isHost: ${newPlayer.isHost}, isReady: ${newPlayer.isReady}, selectedDream: ${newPlayer.selectedDream}, selectedToken: ${newPlayer.selectedToken}`);
    room.lastActivity = Date.now();
    return newPlayer;
};

const removePlayerFromRoom = (room, userId) => {
    if (!room) return;
    const index = room.players.findIndex(player => player.userId === userId.toString());
    if (index === -1) return;

    const [removed] = room.players.splice(index, 1);
    room.game_data.player_balances.splice(index, 1);
    room.game_data.credit_data.player_credits.splice(index, 1);

    if (removed && removed.selectedToken) {
        delete room.tokens.assigned[removed.selectedToken];
    }

    if (room.players.length === 0) {
        rooms.delete(room.id);
        return;
    }

    if (removed.isHost) {
        room.players[0].isHost = true;
        room.creatorId = room.players[0].userId;
        room.creatorName = room.players[0].name;
    }

    room.updatedAt = new Date().toISOString();
    room.lastActivity = Date.now();
};

const toggleReadyStatus = (room, userId) => {
    const player = room.players.find(p => p.userId === userId.toString());
    if (!player) {
        throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
    }
    if (!player.selectedDream) {
        throw new Error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É');
    }

    player.isReady = !player.isReady;
    room.updatedAt = new Date().toISOString();
    room.lastActivity = Date.now();
    return player.isReady;
};

const assignDreamToPlayer = (room, userId, dreamId) => {
    const player = room.players.find(p => p.userId === userId.toString());
    if (!player) {
        throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
    }
    const dream = DREAMS.find(d => d.id == dreamId);
    if (!dream) {
        throw new Error('–ú–µ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    player.selectedDream = dream.id;
    player.dreamAchieved = false;
    room.updatedAt = new Date().toISOString();
    room.lastActivity = Date.now();
};

const assignTokenToPlayer = (room, userId, tokenId) => {
    const player = room.players.find(p => p.userId === userId.toString());
    if (!player) {
        throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
    }
    const token = TOKENS.find(t => t.id === tokenId);
    if (!token) {
        throw new Error('–§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    if (room.players.some(p => p.selectedToken === tokenId && p.userId !== userId.toString())) {
        throw new Error('–≠—Ç–∞ —Ñ–∏—à–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞');
    }
    player.selectedToken = tokenId;
    room.tokens.assigned[tokenId] = userId.toString();
    room.updatedAt = new Date().toISOString();
    room.lastActivity = Date.now();
};

const syncCreditData = (room) => {
    if (!room || !room.game_data) return;
    room.players.forEach((player, index) => {
        room.game_data.player_balances[index] = player.cash;
        if (room.game_data.credit_data.player_credits[index] === undefined) {
            room.game_data.credit_data.player_credits[index] = 0;
        }
    });
};

const ensureCreditRoom = (roomId, playerIndex = 0, playerName) => {
    let room = creditRooms.get(roomId);
    if (!room) {
        room = {
            id: roomId,
            createdAt: new Date().toISOString(),
            players: [],
            game_data: {
                player_balances: [],
                credit_data: {
                    player_credits: [],
                    credit_history: []
                },
                transfers_history: []
            }
        };
        creditRooms.set(roomId, room);
    }

    while (room.players.length <= playerIndex) {
        const index = room.players.length;
        room.players.push({
            name: playerName || `Player ${index + 1}`
        });
    }

    while (room.game_data.player_balances.length <= playerIndex) {
        room.game_data.player_balances.push(0);
    }

    while (room.game_data.credit_data.player_credits.length <= playerIndex) {
        room.game_data.credit_data.player_credits.push(0);
    }

    return room;
};

const setPhase = (room, phase) => {
    if (!room.gameState) return;
    room.gameState.phase = phase;
};

const requireRoom = (roomId) => {
    const room = rooms.get(roomId);
    if (!room) {
        const error = new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        error.code = 'ROOM_NOT_FOUND';
        throw error;
    }
    return room;
};

const initializeGame = (room) => {
    const readyPlayers = room.players.filter(player => player.isReady);
    if (readyPlayers.length < MIN_PLAYERS) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
    }

    if (readyPlayers.some(player => !player.selectedDream || !player.selectedToken)) {
        throw new Error('–í—Å–µ –≥–æ—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—á—Ç—É –∏ —Ñ–∏—à–∫—É');
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    const defaultProfession = {
        id: 'entrepreneur',
        name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
        description: '–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        salary: 10000,
        expenses: 6200,
        cashFlow: 3800,
        color: '#00ff96',
        icon: 'üöÄ'
    };

    room.players.forEach(player => {
        player.isReady = true;
        player.position = 0;
        // –í—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
        player.track = 'small';
        player.cash = STARTING_BALANCE;
        player.passiveIncome = 0;
        player.assets = [];
        player.stats = createPlayerStats();
        player.dreamAchieved = false;
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        player.profession = defaultProfession;
        player.professionId = 'entrepreneur';
    });

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤
    const shuffledTurnOrder = shuffle(readyPlayers.map(player => player.userId.toString()));
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const newHostId = shuffledTurnOrder[0];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    room.players.forEach(player => {
        player.isHost = (player.userId.toString() === newHostId);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∫–æ–º–Ω–∞—Ç—ã
    const newHost = room.players.find(p => p.userId.toString() === newHostId);
    if (newHost) {
        room.creatorId = newHost.userId;
        room.creatorName = newHost.name;
    }

    room.gameState = {
        startedAt: Date.now(),
        activePlayerIndex: 0,
        turnOrder: shuffledTurnOrder,
        phase: 'awaiting_roll',
        lastRoll: null,
        pendingDeal: null,
        decks: {
            small: createDeck(SMALL_DEAL_CARDS),
            big: createDeck(BIG_DEAL_CARDS),
            expense: createDeck(EXPENSE_CARDS)
        },
        history: []
    };

    room.gameStarted = true;
    room.status = 'playing';
    room.updatedAt = new Date().toISOString();
    room.lastActivity = Date.now();
    syncCreditData(room);
};

const getActivePlayer = (room) => {
    if (!room.gameState || !room.gameState.turnOrder.length) return null;
    const activePlayerId = room.gameState.turnOrder[room.gameState.activePlayerIndex];
    return room.players.find(player => player.userId === activePlayerId) || null;
};

const serializeGameState = (room, requestingUserId = null) => {
    const activePlayer = getActivePlayer(room);
    return {
        roomId: room.id,
        name: room.name,
        gameStarted: room.gameStarted,
        phase: room.gameState?.phase || 'awaiting_roll',
        activePlayerId: activePlayer?.userId || null,
        turnOrder: room.gameState?.turnOrder || [],
        lastRoll: room.gameState?.lastRoll || null,
        pendingDeal: room.gameState?.pendingDeal || null,
        decks: {
            smallRemaining: room.gameState?.decks?.small?.cards.length || 0,
            bigRemaining: room.gameState?.decks?.big?.cards.length || 0,
            expenseRemaining: room.gameState?.decks?.expense?.cards.length || 0
        },
        players: room.players.map(player => ({
            ...sanitizePlayer(player),
            isActiveTurn: activePlayer ? player.userId === activePlayer.userId : false
        })),
        requestingPlayer: requestingUserId ? sanitizePlayer(
            room.players.find(player => player.userId === requestingUserId.toString()) || {}
        ) : null
    };
};

const getCellByIndex = (index, cells = []) => {
    if (!Array.isArray(cells) || cells.length === 0) {
        return null;
    }
    const normalized = ((index % cells.length) + cells.length) % cells.length;
    return cells[normalized];
};

const isDealCell = (cell) => cell && (cell.type === 'business' || cell.type === 'opportunity');
const isExpenseCell = (cell) => cell && (cell.type === 'loss' || cell.type === 'expense');
const isIncomeCell = (cell) => cell && (cell.type === 'money');

const logGameEvent = (room, event) => {
    if (!room.gameState) return;
    room.gameState.history.push({ ...event, timestamp: Date.now() });
    if (room.gameState.history.length > 200) {
        room.gameState.history.shift();
    }
};

const applyIncome = (player, amount) => {
    const income = Number(amount) || 0;
    if (!income) return 0;
    player.cash += income;
    player.stats.incomeReceived += income;
    return income;
};

const applyExpense = (player, amount) => {
    const expense = Number(amount) || 0;
    if (!expense) return 0;
    player.cash -= expense;
    player.stats.expensesPaid += expense;
    return expense;
};

const handleIncomeCell = (room, player, cell) => {
    const income = applyIncome(player, cell.amount || 0);
    setPhase(room, 'awaiting_end');
    logGameEvent(room, { type: 'income', playerId: player.userId, amount: income, cellId: cell.id });
    return { income };
};

const handleExpenseCell = (room, player, cell) => {
    const expense = applyExpense(player, cell.amount || 0);
    setPhase(room, 'awaiting_end');
    logGameEvent(room, { type: 'expense', playerId: player.userId, amount: expense, cellId: cell.id });
    return { expense };
};

const handleDealCell = (room, player, cell) => {
    room.gameState.pendingDeal = {
        playerId: player.userId,
        stage: 'size',
        cellId: cell.id
    };
    setPhase(room, 'awaiting_deal_choice');
    logGameEvent(room, { type: 'deal_offer', playerId: player.userId, cellId: cell.id });
    return { dealAvailable: true };
};

const movePlayer = (room, player, steps) => {
    const size = room.dreams?.length || DREAMS.length;
    player.position = (player.position + steps) % size;
    player.stats.diceRolled = (player.stats.diceRolled || 0) + 1;
};

const movePlayerAndResolve = (room, player, roll) => {
    movePlayer(room, player, roll);
    syncCreditData(room);
    const result = { roll, position: player.position };
    setPhase(room, 'awaiting_end');
    return result;
};

const rollDice = () => Math.floor(Math.random() * 6) + 1;

const drawDealCard = (room, size) => {
    const deck = size === 'small' ? room.gameState.decks.small : room.gameState.decks.big;
    if (!deck) {
        throw new Error('–ö–æ–ª–æ–¥–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    const card = drawFromDeck(deck);
    if (!card) {
        throw new Error('–ö–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
    }
    return card;
};

const chooseDeal = (room, player, size) => {
    if (!room.gameState || !room.gameState.pendingDeal || room.gameState.pendingDeal.playerId !== player.userId) {
        throw new Error('–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞');
    }
    const normalizedSize = size === 'small' ? 'small' : 'big';
    const card = drawDealCard(room, normalizedSize);
    room.gameState.pendingDeal = {
        ...room.gameState.pendingDeal,
        stage: 'resolution',
        size: normalizedSize,
        card
    };
    setPhase(room, 'awaiting_deal_resolution');
    logGameEvent(room, { type: 'deal_drawn', playerId: player.userId, size: normalizedSize, cardId: card.id });
    return card;
};

const addAssetToPlayer = (player, card, size) => {
    const asset = {
        id: card.id,
        cardId: card.id,
        name: card.name,
        type: card.type,
        size,
        purchasePrice: card.amount || 0,
        monthlyIncome: card.income || 0,
        acquiredAt: Date.now()
    };
    player.assets.push(asset);
    player.stats.dealsBought += 1;
    player.stats.assetsOwned = player.assets.length;
    return asset;
};

const resolveDeal = (room, player, action) => {
    if (!room.gameState || !room.gameState.pendingDeal || room.gameState.pendingDeal.playerId !== player.userId) {
        throw new Error('–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞');
    }
    const pending = room.gameState.pendingDeal;
    const deck = pending.size === 'small' ? room.gameState.decks.small : room.gameState.decks.big;
    if (action === 'buy') {
        const price = pending.card.amount || 0;
        if (player.cash < price) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
        }
        applyExpense(player, price);
        const asset = addAssetToPlayer(player, pending.card, pending.size);
        setPhase(room, 'awaiting_end');
        room.gameState.pendingDeal = null;
        logGameEvent(room, { type: 'deal_purchase', playerId: player.userId, cardId: pending.card.id, price });
        syncCreditData(room);
        return { asset };
    }

    returnCardToDeck(deck, pending.card);
    player.stats.dealsSkipped += 1;
    room.gameState.pendingDeal = null;
    setPhase(room, 'awaiting_end');
    logGameEvent(room, { type: 'deal_skipped', playerId: player.userId, cardId: pending.card.id });
    syncCreditData(room);
    return { skipped: true };
};

const sellAsset = (room, player, assetId) => {
    const index = player.assets.findIndex(asset => asset.id === assetId || asset.cardId === assetId);
    if (index === -1) {
        throw new Error('–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    const [asset] = player.assets.splice(index, 1);
    const deck = asset.size === 'small' ? room.gameState.decks.small : room.gameState.decks.big;
    returnCardToDeck(deck, {
        id: asset.cardId,
        name: asset.name,
        amount: asset.purchasePrice,
        income: asset.monthlyIncome,
        type: asset.type
    });
    player.stats.assetsOwned = player.assets.length;
    player.stats.assetsSold += 1;
    applyIncome(player, asset.purchasePrice);
    syncCreditData(room);
    logGameEvent(room, { type: 'asset_sold', playerId: player.userId, assetId: asset.cardId, price: asset.purchasePrice });
    return asset;
};

const transferAsset = (room, fromPlayer, toPlayer, assetId) => {
    const index = fromPlayer.assets.findIndex(asset => asset.id === assetId || asset.cardId === assetId);
    if (index === -1) {
        throw new Error('–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
    }
    const [asset] = fromPlayer.assets.splice(index, 1);
    fromPlayer.stats.dealsTransferred += 1;
    toPlayer.assets.push(asset);
    toPlayer.stats.assetsOwned = toPlayer.assets.length;
    syncCreditData(room);
    logGameEvent(room, { type: 'asset_transferred', from: fromPlayer.userId, to: toPlayer.userId, assetId: asset.cardId });
    return asset;
};

const advanceTurn = (room) => {
    if (!room.gameState || !room.gameState.turnOrder.length) {
        return;
    }
    room.gameState.activePlayerIndex = (room.gameState.activePlayerIndex + 1) % room.gameState.turnOrder.length;
    room.gameState.lastRoll = null;
    room.gameState.pendingDeal = null;
    setPhase(room, 'awaiting_roll');
    logGameEvent(room, { type: 'turn_advanced', activePlayerId: getActivePlayer(room)?.userId || null });
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏
const addUserToMemory = (user) => {
    if (!user || !user.id) return null;
    users.set(user.id, { ...user });
    return users.get(user.id);
};

const getUserFromMemory = (userId) => {
    return users.get(userId) || null;
};

const getUserByEmailFromMemory = (email) => {
    for (const user of users.values()) {
        if (user.email === email) {
            return user;
        }
    }
    return null;
};

const updateUserInMemory = (userId, updateData) => {
    const user = users.get(userId);
    if (!user) return null;
    
    Object.assign(user, updateData);
    users.set(userId, user);
    return user;
};

const removeUserFromMemory = (userId) => {
    return users.delete(userId);
};

const getAllUsersFromMemory = () => {
    return Array.from(users.values());
};

const loadUsersFromDatabase = async (db) => {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SQLite...');
        const dbUsers = await db.getAllUsers();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite: ${dbUsers.length}`);
        
        for (const user of dbUsers) {
            console.log(`üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (ID: ${user.id})`);
            addUserToMemory(user);
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç—å: ${users.size}`);
        
        // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        for (const [id, user] of users) {
            console.log(`  - ${user.email} (ID: ${id})`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SQLite:', error);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
let globalDb = null;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const setDatabase = (db) => {
    globalDb = db;
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
const forceSaveRoom = async (roomId) => {
    if (!globalDb) {
        console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return false;
    }
    
    const room = rooms.get(roomId);
    if (!room) {
        console.warn(`‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏`);
        return false;
    }
    
    try {
        console.log(`üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: ${room.name} (${roomId})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        await globalDb.updateRoom(roomId, {
            name: room.name,
            status: room.gameStarted ? 'playing' : 'waiting',
            gameStarted: room.gameStarted,
            updated_at: new Date().toISOString()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for (const player of room.players) {
            await globalDb.updatePlayerSelection(roomId, player.userId, {
                dreamId: player.selectedDream,
                tokenId: player.selectedToken
            });
            await globalDb.updatePlayerReady(roomId, player.userId, player.isReady);
        }
        
        console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
        return false;
    }
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
const forceSaveAllRooms = async () => {
    if (!globalDb) {
        console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return false;
    }
    
    console.log(`üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç (${rooms.size} –∫–æ–º–Ω–∞—Ç)`);
    let savedCount = 0;
    let errorCount = 0;
    
    for (const [roomId, room] of rooms) {
        const success = await forceSaveRoom(roomId);
        if (success) {
            savedCount++;
        } else {
            errorCount++;
        }
    }
    
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${savedCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    return errorCount === 0;
};

module.exports = {
    rooms,
    creditRooms,
    users,
    STARTING_BALANCE,
    MIN_PLAYERS,
    MAX_PLAYERS,
    DREAMS,
    TOKENS,
    SMALL_DEAL_CARDS,
    BIG_DEAL_CARDS,
    EXPENSE_CARDS,
    clamp,
    generateId,
    createPlayerStats,
    createPlayer,
    createRoomInstance,
    sanitizePlayer,
    sanitizeRoom,
    getRoomById,
    listRooms,
    addPlayerToRoom,
    removePlayerFromRoom,
    toggleReadyStatus,
    assignDreamToPlayer,
    assignTokenToPlayer,
    syncCreditData,
    ensureCreditRoom,
    requireRoom,
    setPhase,
    initializeGame,
    getActivePlayer,
    serializeGameState,
    getCellByIndex,
    isDealCell,
    isExpenseCell,
    isIncomeCell,
    logGameEvent,
    applyIncome,
    applyExpense,
    handleIncomeCell,
    handleExpenseCell,
    handleDealCell,
    movePlayer,
    movePlayerAndResolve,
    rollDice,
    drawDealCard,
    chooseDeal,
    addAssetToPlayer,
    resolveDeal,
    sellAsset,
    transferAsset,
    advanceTurn,
    drawFromDeck,
    returnCardToDeck,
    createDeck,
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    addUserToMemory,
    getUserFromMemory,
    getUserByEmailFromMemory,
    updateUserInMemory,
    removeUserFromMemory,
    getAllUsersFromMemory,
    loadUsersFromDatabase,
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setDatabase,
    forceSaveRoom,
    forceSaveAllRooms
};
