/**
 * –ú–æ–¥—É–ª—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (PAYDAY, –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)
 */

export class EventModule {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.eventQueue = [];
        this.processingEvents = false;
        this.eventHistory = [];
        this.maxHistorySize = 100;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    async init() {
        console.log('‚ö° EventModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
        this.gameCore.eventBus.on('playerTurnEnded', this.onPlayerTurnEnded.bind(this));
        this.gameCore.eventBus.on('cardProcessed', this.onCardProcessed.bind(this));
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    queueEvent(event) {
        if (this.isDestroyed) {
            console.warn('EventModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            return false;
        }

        const eventData = {
            ...event,
            id: this.generateEventId(),
            timestamp: Date.now(),
            processed: false
        };

        this.eventQueue.push(eventData);
        
        console.log(`‚ö° –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${event.type}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        this.processEventQueue();
        
        return eventData.id;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π
     */
    async processEventQueue() {
        if (this.processingEvents || this.eventQueue.length === 0) {
            return;
        }

        this.processingEvents = true;

        try {
            while (this.eventQueue.length > 0) {
                const event = this.eventQueue.shift();
                await this.processEvent(event);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        } finally {
            this.processingEvents = false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processEvent(event) {
        try {
            console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${event.type}`);
            
            let result = null;
            
            switch (event.type) {
                case 'payday':
                    result = await this.processPaydayEvent(event);
                    break;
                case 'charity':
                    result = await this.processCharityEvent(event);
                    break;
                case 'bankruptcy':
                    result = await this.processBankruptcyEvent(event);
                    break;
                case 'card_draw':
                    result = await this.processCardDrawEvent(event);
                    break;
                case 'movement':
                    result = await this.processMovementEvent(event);
                    break;
                default:
                    console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${event.type}`);
                    result = { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ' };
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveToHistory(event, result);
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.gameCore.eventBus.emit('eventProcessed', {
                event,
                result,
                timestamp: Date.now()
            });

            event.processed = true;
            
            return result;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            
            const errorResult = {
                success: false,
                message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è',
                error: error.message
            };
            
            this.saveToHistory(event, errorResult);
            
            return errorResult;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è PAYDAY
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processPaydayEvent(event) {
        const playerManager = this.gameCore.getModule('playerManager');
        const bankModule = this.gameCore.getModule('bankModule');
        const player = playerManager.getPlayer(event.playerId);
        
        if (!player) {
            return { success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        try {
            // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
            const totalIncome = player.monthlyIncome + player.passiveIncome;
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
            playerManager.updateBalance(player.id, totalIncome, 'PAYDAY - –ó–∞—Ä–ø–ª–∞—Ç–∞');
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ)
            if (player.creditAmount > 0 && bankModule) {
                const creditInterest = Math.round(player.creditAmount * 0.10); // 10% –≤ –º–µ—Å—è—Ü
                playerManager.updateBalance(player.id, -creditInterest, '–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                if (player.balance < 0) {
                    this.queueEvent({
                        type: 'bankruptcy',
                        playerId: player.id,
                        reason: 'insufficient_funds_after_credit_payment'
                    });
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
            if (player.monthlyExpenses > 0) {
                playerManager.updateBalance(player.id, -player.monthlyExpenses, 'PAYDAY - –†–∞—Å—Ö–æ–¥—ã');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
                if (player.balance < 0) {
                    this.queueEvent({
                        type: 'bankruptcy',
                        playerId: player.id,
                        reason: 'insufficient_funds_after_expenses'
                    });
                }
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ PAYDAY
            playerManager.updatePlayer(player.id, {
                lastPayday: Date.now()
            });
            
            console.log(`üí∞ PAYDAY –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name}: +$${totalIncome}`);
            
            return {
                success: true,
                message: `PAYDAY: +$${totalIncome}`,
                income: totalIncome,
                expenses: player.monthlyExpenses,
                creditInterest: player.creditAmount > 0 ? Math.round(player.creditAmount * 0.10) : 0
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PAYDAY:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PAYDAY' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processCharityEvent(event) {
        const playerManager = this.gameCore.getModule('playerManager');
        const player = playerManager.getPlayer(event.playerId);
        
        if (!player) {
            return { success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        try {
            // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (10% –æ—Ç –¥–æ—Ö–æ–¥–∞)
            const charityAmount = Math.round(player.monthlyIncome * 0.10);
            
            if (charityAmount <= 0) {
                return { success: true, message: '–ù–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
            if (player.balance < charityAmount) {
                return { 
                    success: false, 
                    message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: $${charityAmount}` 
                };
            }
            
            // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            playerManager.updateBalance(player.id, -charityAmount, `–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (10% –æ—Ç –¥–æ—Ö–æ–¥–∞)`);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            playerManager.updatePlayer(player.id, {
                lastCharity: Date.now()
            });
            
            console.log(`‚ù§Ô∏è –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name}: -$${charityAmount}`);
            
            return {
                success: true,
                message: `–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: -$${charityAmount}`,
                amount: charityAmount
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processBankruptcyEvent(event) {
        const playerManager = this.gameCore.getModule('playerManager');
        const player = playerManager.getPlayer(event.playerId);
        
        if (!player) {
            return { success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        try {
            console.log(`üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–∞ ${player.name}`);
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
            playerManager.updatePlayer(player.id, {
                balance: 0,
                creditAmount: 0,
                assets: [],
                passiveIncome: 0,
                position: 0,
                track: 'inner',
                isBankrupt: true,
                bankruptcyCount: (player.bankruptcyCount || 0) + 1
            });
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
            this.gameCore.eventBus.emit('playerBankrupted', {
                player,
                reason: event.reason,
                bankruptcyCount: player.bankruptcyCount
            });
            
            return {
                success: true,
                message: `–ò–≥—Ä–æ–∫ ${player.name} –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è`,
                bankruptcyCount: player.bankruptcyCount
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processCardDrawEvent(event) {
        const cardModule = this.gameCore.getModule('cardModule');
        
        if (!cardModule) {
            return { success: false, message: '–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        try {
            const card = cardModule.drawCard(event.deckType, event.options);
            
            if (!card) {
                return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É' };
            }
            
            return {
                success: true,
                message: `–í–∑—è—Ç–∞ –∫–∞—Ä—Ç–∞: ${card.name}`,
                card
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     */
    async processMovementEvent(event) {
        const movementModule = this.gameCore.getModule('movementModule');
        
        if (!movementModule) {
            return { success: false, message: '–ú–æ–¥—É–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        try {
            const result = await movementModule.movePlayer(event.playerId, event.steps, event.options);
            
            if (!result) {
                return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞' };
            }
            
            return {
                success: true,
                message: `–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${result.position}`,
                position: result.position,
                cell: result.cell
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è:', error);
            return { success: false, message: '–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è' };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è PAYDAY
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    createPaydayEvent(playerId) {
        return this.queueEvent({
            type: 'payday',
            playerId,
            priority: 'high'
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    createCharityEvent(playerId) {
        return this.queueEvent({
            type: 'charity',
            playerId,
            priority: 'medium'
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
     */
    createBankruptcyEvent(playerId, reason = 'insufficient_funds') {
        return this.queueEvent({
            type: 'bankruptcy',
            playerId,
            reason,
            priority: 'high'
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getHistory(limit = 10) {
        return this.eventHistory.slice(-limit);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    saveToHistory(event, result) {
        this.eventHistory.push({
            event,
            result,
            timestamp: Date.now()
        });

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.eventHistory.length > this.maxHistorySize) {
            this.eventHistory.shift();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        const totalEvents = this.eventHistory.length;
        const eventTypes = {};
        
        this.eventHistory.forEach(entry => {
            const type = entry.event.type;
            eventTypes[type] = (eventTypes[type] || 0) + 1;
        });
        
        return {
            totalEvents,
            eventTypes,
            queueLength: this.eventQueue.length,
            processingEvents: this.processingEvents
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–æ–±—ã—Ç–∏—è
     */
    generateEventId() {
        return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onPlayerMoved(data) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        const cell = data.cell;
        
        if (cell) {
            switch (cell.type) {
                case 'payday':
                    this.createPaydayEvent(data.playerId);
                    break;
                case 'charity':
                    this.createCharityEvent(data.playerId);
                    break;
            }
        }
    }

    onPlayerTurnEnded(player) {
        // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ö–æ–¥–∞
        this.eventQueue = this.eventQueue.filter(event => event.playerId === player.id);
    }

    onCardProcessed(data) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ä—Ç
        if (data.result && data.result.financialImpact !== 0) {
            const playerManager = this.gameCore.getModule('playerManager');
            const player = playerManager.getPlayer(data.player);
            
            if (player && player.balance < 0) {
                this.createBankruptcyEvent(player.id, 'insufficient_funds_after_card');
            }
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    destroy() {
        this.eventQueue = [];
        this.eventHistory = [];
        this.processingEvents = false;
        this.isDestroyed = true;
        console.log('üóëÔ∏è EventModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default EventModule;
