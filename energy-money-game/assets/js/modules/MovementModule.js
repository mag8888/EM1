/**
 * –ú–æ–¥—É–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –¥–æ—Å–∫–µ
 */

export class MovementModule {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.board = null;
        this.playerPositions = new Map();
        this.isMoving = false;
        this.movementHistory = [];
        this.maxHistorySize = 100;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üö∂ MovementModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–∫–∏
        this.initBoard();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('diceRolled', this.onDiceRolled.bind(this));
        this.gameCore.eventBus.on('playerAdded', this.onPlayerAdded.bind(this));
        this.gameCore.eventBus.on('playerTurnStarted', this.onPlayerTurnStarted.bind(this));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
     */
    initBoard() {
        const config = this.gameCore.config.board;
        
        this.board = {
            innerTrack: {
                totalCells: config.innerTrackCells,
                cells: this.createInnerTrackCells(),
                startPosition: 0,
                paydayPosition: config.paydayPosition,
                charityPosition: config.charityPosition
            },
            outerTrack: {
                totalCells: config.outerTrackCells,
                cells: this.createOuterTrackCells(),
                startPosition: 0
            }
        };
        
        console.log('üö∂ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
     */
    createInnerTrackCells() {
        const cells = [];
        const config = this.gameCore.config.board;
        
        for (let i = 0; i < config.innerTrackCells; i++) {
            cells.push({
                id: `inner_${i}`,
                position: i,
                type: this.getCellType(i, 'inner'),
                name: this.getCellName(i, 'inner'),
                description: this.getCellDescription(i, 'inner'),
                actions: this.getCellActions(i, 'inner')
            });
        }
        
        return cells;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
     */
    createOuterTrackCells() {
        const cells = [];
        const config = this.gameCore.config.board;
        
        for (let i = 0; i < config.outerTrackCells; i++) {
            cells.push({
                id: `outer_${i}`,
                position: i,
                type: this.getCellType(i, 'outer'),
                name: this.getCellName(i, 'outer'),
                description: this.getCellDescription(i, 'outer'),
                actions: this.getCellActions(i, 'outer')
            });
        }
        
        return cells;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} track - –¢—Ä–µ–∫ (inner/outer)
     */
    getCellType(position, track) {
        const config = this.gameCore.config.board;
        
        if (position === config.paydayPosition) {
            return 'payday';
        }
        
        if (position === config.charityPosition) {
            return 'charity';
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–µ—Ç–æ–∫
        const types = ['opportunity', 'expense', 'neutral'];
        return types[position % types.length];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} track - –¢—Ä–µ–∫ (inner/outer)
     */
    getCellName(position, track) {
        const config = this.gameCore.config.board;
        
        if (position === config.paydayPosition) {
            return 'PAYDAY';
        }
        
        if (position === config.charityPosition) {
            return '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
        }
        
        const names = {
            inner: ['–ù–∞—á–∞–ª–æ', '–†–∞–±–æ—Ç–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ë–∏–∑–Ω–µ—Å', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–ê–∫—Ü–∏–∏'],
            outer: ['–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Ä–æ–≥–∞', '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞']
        };
        
        const trackNames = names[track] || ['–ö–ª–µ—Ç–∫–∞'];
        return trackNames[position % trackNames.length];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} track - –¢—Ä–µ–∫ (inner/outer)
     */
    getCellDescription(position, track) {
        const config = this.gameCore.config.board;
        
        if (position === config.paydayPosition) {
            return '–ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã';
        }
        
        if (position === config.charityPosition) {
            return '–ü–æ–º–æ–≥–∏—Ç–µ –Ω—É–∂–¥–∞—é—â–∏–º—Å—è';
        }
        
        return '–û–±—ã—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} track - –¢—Ä–µ–∫ (inner/outer)
     */
    getCellActions(position, track) {
        const config = this.gameCore.config.board;
        
        if (position === config.paydayPosition) {
            return ['payday'];
        }
        
        if (position === config.charityPosition) {
            return ['charity'];
        }
        
        const type = this.getCellType(position, track);
        switch (type) {
            case 'opportunity':
                return ['drawCard', 'skip'];
            case 'expense':
                return ['drawCard', 'pay'];
            default:
                return ['skip'];
        }
    }

    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    async movePlayer(playerId, steps, options = {}) {
        if (this.isMoving) {
            console.warn('–î–≤–∏–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return null;
        }

        if (this.isDestroyed) {
            console.warn('MovementModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
            return null;
        }

        try {
            this.isMoving = true;
            
            const playerManager = this.gameCore.getModule('playerManager');
            const player = playerManager.getPlayer(playerId);
            
            if (!player) {
                console.error(`–ò–≥—Ä–æ–∫ —Å ID ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return null;
            }

            const currentPosition = this.getPlayerPosition(playerId);
            const newPosition = this.calculateNewPosition(currentPosition, steps, player.track);
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            this.gameCore.eventBus.emit('playerMovementStart', {
                playerId,
                from: currentPosition,
                to: newPosition,
                steps,
                timestamp: Date.now()
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            if (options.animate !== false) {
                await this.animateMovement(playerId, currentPosition, newPosition);
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            this.updatePlayerPosition(playerId, newPosition);
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
            const cell = this.getCell(newPosition, player.track);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveToHistory(playerId, currentPosition, newPosition, steps);
            
            // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            this.gameCore.eventBus.emit('playerMoved', {
                playerId,
                from: currentPosition,
                to: newPosition,
                cell,
                steps,
                timestamp: Date.now()
            });

            console.log(`üö∂ –ò–≥—Ä–æ–∫ ${player.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Å ${currentPosition} –Ω–∞ ${newPosition}`);
            
            return { position: newPosition, cell };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            this.gameCore.eventBus.emit('playerMovementError', { playerId, error });
            return null;
        } finally {
            this.isMoving = false;
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param {Object} currentPosition - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     * @param {string} track - –¢—Ä–µ–∫
     */
    calculateNewPosition(currentPosition, steps, track) {
        const trackConfig = this.board[track === 'inner' ? 'innerTrack' : 'outerTrack'];
        const totalCells = trackConfig.totalCells;
        
        let newPosition = currentPosition.position + steps;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–∞—á–∞–ª–æ
        if (newPosition >= totalCells) {
            newPosition = newPosition % totalCells;
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ PAYDAY
            if (track === 'inner' && currentPosition.position === this.board.innerTrack.paydayPosition) {
                return {
                    position: 0,
                    track: 'outer'
                };
            }
        }
        
        return {
            position: newPosition,
            track: track
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    getPlayerPosition(playerId) {
        return this.playerPositions.get(playerId) || {
            position: 0,
            track: 'inner'
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} newPosition - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    updatePlayerPosition(playerId, newPosition) {
        this.playerPositions.set(playerId, newPosition);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ PlayerManager
        const playerManager = this.gameCore.getModule('playerManager');
        if (playerManager) {
            playerManager.updatePosition(playerId, newPosition.position, newPosition.track);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} track - –¢—Ä–µ–∫
     */
    getCell(position, track) {
        const trackConfig = this.board[track === 'inner' ? 'innerTrack' : 'outerTrack'];
        return trackConfig.cells[position.position] || null;
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} from - –û—Ç–∫—É–¥–∞
     * @param {Object} to - –ö—É–¥–∞
     */
    async animateMovement(playerId, from, to) {
        const animationDuration = this.gameCore.config.ui.animationDuration;
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
        const playerElement = document.querySelector(`[data-player-id="${playerId}"]`);
        
        if (!playerElement) {
            // –ï—Å–ª–∏ –Ω–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç–∞, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
            await this.delay(animationDuration);
            return;
        }

        // –†–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        const fromCoords = this.getCellCoordinates(from);
        const toCoords = this.getCellCoordinates(to);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        playerElement.style.transition = `transform ${animationDuration}ms ease-in-out`;
        playerElement.style.transform = `translate(${toCoords.x}px, ${toCoords.y}px)`;
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await this.delay(animationDuration);
        
        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        playerElement.style.transition = '';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è
     */
    getCellCoordinates(position) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        const angle = (position.position / this.board.innerTrack.totalCells) * 2 * Math.PI;
        const radius = 200; // –†–∞–¥–∏—É—Å –¥–æ—Å–∫–∏
        
        return {
            x: Math.cos(angle) * radius,
            y: Math.sin(angle) * radius
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    canMoveToOuterTrack(playerId) {
        const position = this.getPlayerPosition(playerId);
        const paydayPosition = this.board.innerTrack.paydayPosition;
        
        return position.track === 'inner' && position.position === paydayPosition;
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    moveToOuterTrack(playerId) {
        if (!this.canMoveToOuterTrack(playerId)) {
            console.warn(`–ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫`);
            return false;
        }
        
        const newPosition = {
            position: 0,
            track: 'outer'
        };
        
        this.updatePlayerPosition(playerId, newPosition);
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.emit('playerMovedToOuterTrack', {
            playerId,
            position: newPosition
        });
        
        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å–∫–µ
     */
    getBoardInfo() {
        return {
            innerTrack: {
                totalCells: this.board.innerTrack.totalCells,
                paydayPosition: this.board.innerTrack.paydayPosition,
                charityPosition: this.board.innerTrack.charityPosition
            },
            outerTrack: {
                totalCells: this.board.outerTrack.totalCells
            },
            playerPositions: Object.fromEntries(this.playerPositions)
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     */
    getHistory(limit = 10) {
        return this.movementHistory.slice(-limit);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} from - –û—Ç–∫—É–¥–∞
     * @param {Object} to - –ö—É–¥–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     */
    saveToHistory(playerId, from, to, steps) {
        this.movementHistory.push({
            playerId,
            from,
            to,
            steps,
            timestamp: Date.now()
        });

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if (this.movementHistory.length > this.maxHistorySize) {
            this.movementHistory.shift();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        const totalMovements = this.movementHistory.length;
        const playersOnInnerTrack = Array.from(this.playerPositions.values())
            .filter(pos => pos.track === 'inner').length;
        const playersOnOuterTrack = Array.from(this.playerPositions.values())
            .filter(pos => pos.track === 'outer').length;
        
        return {
            totalMovements,
            playersOnInnerTrack,
            playersOnOuterTrack,
            isMoving: this.isMoving,
            boardInfo: this.getBoardInfo()
        };
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
     * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onDiceRolled(data) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–æ–≤
        if (data.result && data.result.total > 0) {
            const currentPlayer = this.gameCore.getModule('playerManager').getCurrentPlayer();
            if (currentPlayer) {
                this.movePlayer(currentPlayer.id, data.result.total);
            }
        }
    }

    onPlayerAdded(player) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.playerPositions.set(player.id, {
            position: 0,
            track: 'inner'
        });
    }

    onPlayerTurnStarted(player) {
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞
        this.isMoving = false;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
     */
    destroy() {
        this.board = null;
        this.playerPositions.clear();
        this.movementHistory = [];
        this.isMoving = false;
        this.isDestroyed = true;
        console.log('üóëÔ∏è MovementModule —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default MovementModule;
