/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–æ–π
 */

export class Board {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.container = null;
        this.cells = new Map();
        this.playerTokens = new Map();
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å–∫–∏
     */
    async init() {
        console.log('üéØ Board –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–æ—Å–∫–∏
        this.container = document.getElementById('gameBoard');
        if (!this.container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
        this.createBoard();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
        this.gameCore.eventBus.on('playerAdded', this.onPlayerAdded.bind(this));
        this.gameCore.eventBus.on('currentPlayerChanged', this.onCurrentPlayerChanged.bind(this));
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
     */
    createBoard() {
        // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ—Å–∫–∏
        this.container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Å–∫–∏
        this.container.innerHTML = `
            <!-- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–∫ -->
            <div class="board-inner-track" id="innerTrack">
                <!-- –ö–ª–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            
            <!-- –í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫ -->
            <div class="board-outer-track" id="outerTrack">
                <!-- –ö–ª–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            
            <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å -->
            <div class="board-center">
                <div class="game-title">–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥</div>
                <div class="game-status">
                    <span id="gameStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                
                <!-- –ö—É–±–∏–∫–∏ -->
                <div class="dice-container">
                    <div class="dice" data-value="0">0</div>
                    <div class="dice" data-value="0">0</div>
                    <div class="dice-total">0</div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="action-buttons">
                    <button id="rollDiceBtn" class="btn btn-primary" disabled>
                        <i class="fas fa-dice"></i> –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏
                    </button>
                    <button id="endTurnBtn" class="btn btn-secondary" disabled>
                        <i class="fas fa-arrow-right"></i> –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
                    </button>
                </div>
            </div>
        `;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
        this.createCells();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.bindEvents();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –¥–æ—Å–∫–∏
     */
    createCells() {
        const movementModule = this.gameCore.getModule('movementModule');
        if (!movementModule) {
            console.error('–ú–æ–¥—É–ª—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const boardInfo = movementModule.getBoardInfo();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        this.createTrackCells('innerTrack', boardInfo.innerTrack);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        this.createTrackCells('outerTrack', boardInfo.outerTrack);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ —Ç—Ä–µ–∫–∞
     * @param {string} trackId - ID —Ç—Ä–µ–∫–∞
     * @param {Object} trackInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
     */
    createTrackCells(trackId, trackInfo) {
        const trackElement = document.getElementById(trackId);
        if (!trackElement) {
            return;
        }

        trackElement.innerHTML = '';

        for (let i = 0; i < trackInfo.totalCells; i++) {
            const cell = this.createCell(i, trackId);
            trackElement.appendChild(cell);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É
            this.cells.set(`${trackId}_${i}`, cell);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –∫–ª–µ—Ç–∫–∏
     * @param {string} trackId - ID —Ç—Ä–µ–∫–∞
     */
    createCell(position, trackId) {
        const cell = document.createElement('div');
        cell.className = 'board-cell';
        cell.dataset.position = position;
        cell.dataset.track = trackId;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
        const cellType = this.getCellType(position, trackId);
        cell.classList.add(cellType);
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª–µ—Ç–∫–∏
        cell.innerHTML = `
            <div class="cell-content">
                <div class="cell-number">${position}</div>
                <div class="cell-name">${this.getCellName(position, trackId)}</div>
                <div class="cell-icon">${this.getCellIcon(cellType)}</div>
            </div>
        `;
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        cell.addEventListener('click', () => {
            this.onCellClick(position, trackId);
        });
        
        return cell;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} trackId - ID —Ç—Ä–µ–∫–∞
     */
    getCellType(position, trackId) {
        const config = this.gameCore.config.board;
        
        if (trackId === 'innerTrack') {
            if (position === config.paydayPosition) {
                return 'payday';
            }
            if (position === config.charityPosition) {
                return 'charity';
            }
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
            const types = ['opportunity', 'expense', 'neutral'];
            return types[position % types.length];
        } else {
            // –í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫
            return 'fast-track';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–µ—Ç–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {string} trackId - ID —Ç—Ä–µ–∫–∞
     */
    getCellName(position, trackId) {
        const config = this.gameCore.config.board;
        
        if (trackId === 'innerTrack') {
            if (position === config.paydayPosition) {
                return 'PAYDAY';
            }
            if (position === config.charityPosition) {
                return '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
            }
            
            const names = ['–ù–∞—á–∞–ª–æ', '–†–∞–±–æ—Ç–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ë–∏–∑–Ω–µ—Å', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–ê–∫—Ü–∏–∏'];
            return names[position % names.length];
        } else {
            const names = ['–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Ä–æ–≥–∞', '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞'];
            return names[position % names.length];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–ª–µ—Ç–∫–∏
     * @param {string} cellType - –¢–∏–ø –∫–ª–µ—Ç–∫–∏
     */
    getCellIcon(cellType) {
        const icons = {
            payday: 'üí∞',
            charity: '‚ù§Ô∏è',
            opportunity: 'üìà',
            expense: 'üìâ',
            neutral: 'üìç',
            'fast-track': 'üöÄ'
        };
        
        return icons[cellType] || 'üìç';
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
        const rollDiceBtn = document.getElementById('rollDiceBtn');
        if (rollDiceBtn) {
            rollDiceBtn.addEventListener('click', () => {
                this.rollDice();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
        const endTurnBtn = document.getElementById('endTurnBtn');
        if (endTurnBtn) {
            endTurnBtn.addEventListener('click', () => {
                this.endTurn();
            });
        }
    }

    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
     */
    async rollDice() {
        const diceModule = this.gameCore.getModule('diceModule');
        if (diceModule) {
            await diceModule.roll();
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
     */
    endTurn() {
        const playerManager = this.gameCore.getModule('playerManager');
        const currentPlayer = playerManager.getCurrentPlayer();
        
        if (currentPlayer) {
            this.gameCore.eventBus.emit('playerTurnEnded', currentPlayer);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è
     */
    updatePlayerPosition(playerId, position) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        this.removePlayerToken(playerId);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        this.addPlayerToken(playerId, position);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–ª–µ—Ç–æ–∫
        this.updateCellHighlight(position);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è
     */
    addPlayerToken(playerId, position) {
        const playerManager = this.gameCore.getModule('playerManager');
        const player = playerManager.getPlayer(playerId);
        
        if (!player) {
            return;
        }
        
        const trackId = position.track === 'inner' ? 'innerTrack' : 'outerTrack';
        const cell = this.cells.get(`${trackId}_${position.position}`);
        
        if (!cell) {
            return;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        const token = document.createElement('div');
        token.className = 'player-token';
        token.dataset.playerId = playerId;
        token.style.backgroundColor = player.color;
        token.textContent = player.name.charAt(0).toUpperCase();
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É
        cell.appendChild(token);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        this.playerTokens.set(playerId, token);
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (playerManager.getCurrentPlayer()?.id === playerId) {
            token.classList.add('current');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    removePlayerToken(playerId) {
        const token = this.playerTokens.get(playerId);
        if (token && token.parentNode) {
            token.parentNode.removeChild(token);
        }
        this.playerTokens.delete(playerId);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è
     */
    updateCellHighlight(position) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        this.container.querySelectorAll('.board-cell.active').forEach(cell => {
            cell.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        const trackId = position.track === 'inner' ? 'innerTrack' : 'outerTrack';
        const cell = this.cells.get(`${trackId}_${position.position}`);
        
        if (cell) {
            cell.classList.add('active');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤
     * @param {Array} diceValues - –ó–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤
     */
    updateDiceDisplay(diceValues) {
        const diceElements = this.container.querySelectorAll('.dice');
        const totalElement = this.container.querySelector('.dice-total');
        
        if (diceElements.length >= 2) {
            diceElements[0].textContent = diceValues[0] || 0;
            diceElements[1].textContent = diceValues[1] || 0;
            diceElements[0].dataset.value = diceValues[0] || 0;
            diceElements[1].dataset.value = diceValues[1] || 0;
        }
        
        if (totalElement && diceValues.length >= 2) {
            const total = diceValues.reduce((sum, value) => sum + value, 0);
            totalElement.textContent = total;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
     * @param {string} status - –°—Ç–∞—Ç—É—Å
     */
    updateGameStatus(status) {
        const statusElement = document.getElementById('gameStatus');
        if (statusElement) {
            statusElement.textContent = status;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
     */
    updateButtonState(state) {
        const rollDiceBtn = document.getElementById('rollDiceBtn');
        const endTurnBtn = document.getElementById('endTurnBtn');
        
        if (rollDiceBtn) {
            rollDiceBtn.disabled = !state.canRollDice;
        }
        
        if (endTurnBtn) {
            endTurnBtn.disabled = !state.canEndTurn;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –∫–ª–µ—Ç–∫–∏
     * @param {string} trackId - ID —Ç—Ä–µ–∫–∞
     */
    onCellClick(position, trackId) {
        console.log(`–ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ ${position} —Ç—Ä–µ–∫–∞ ${trackId}`);
        
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
        this.gameCore.eventBus.emit('cellClicked', {
            position,
            trackId,
            timestamp: Date.now()
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onPlayerMoved(data) {
        this.updatePlayerPosition(data.playerId, data.to);
    }

    onPlayerAdded(player) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.updatePlayerPosition(player.id, { position: 0, track: 'inner' });
    }

    onCurrentPlayerChanged(data) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.playerTokens.forEach((token, playerId) => {
            if (playerId === data.newPlayer.id) {
                token.classList.add('current');
            } else {
                token.classList.remove('current');
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            totalCells: this.cells.size,
            playerTokens: this.playerTokens.size,
            isInitialized: !!this.container
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å–∫–∏
     */
    destroy() {
        this.cells.clear();
        this.playerTokens.clear();
        this.container = null;
        this.isDestroyed = true;
        console.log('üóëÔ∏è Board –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default Board;
