/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

export class Notifications {
    constructor(gameCore) {
        this.gameCore = gameCore;
        this.container = null;
        this.notifications = new Map();
        this.maxNotifications = 5;
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async init() {
        console.log('üîî Notifications –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.createContainer();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.gameCore.eventBus.on('playerBalanceChanged', this.onPlayerBalanceChanged.bind(this));
        this.gameCore.eventBus.on('playerMoved', this.onPlayerMoved.bind(this));
        this.gameCore.eventBus.on('cardDrawn', this.onCardDrawn.bind(this));
        this.gameCore.eventBus.on('playerBankrupted', this.onPlayerBankrupted.bind(this));
        this.gameCore.eventBus.on('eventProcessed', this.onEventProcessed.bind(this));
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    createContainer() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        this.container = document.getElementById('notifications');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notifications';
            this.container.className = 'notifications';
            document.body.appendChild(this.container);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    show(message, type = 'info', options = {}) {
        if (this.isDestroyed) {
            console.warn('Notifications —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã, –ø–æ–∫–∞–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
            return null;
        }

        const notificationId = this.generateNotificationId();
        const duration = options.duration || this.getDefaultDuration(type);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = this.createNotificationElement(notificationId, message, type, options);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.appendChild(notification);
        this.notifications.set(notificationId, notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.hide(notificationId);
            }, duration);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.cleanupOldNotifications();
        
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: ${message} (${type})`);
        
        return notificationId;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} id - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    createNotificationElement(id, message, type, options) {
        const notification = document.createElement('div');
        notification.id = id;
        notification.className = `notification notification-${type}`;
        
        // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const icon = this.getNotificationIcon(type);
        
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">${icon}</div>
                <div class="notification-message">${message}</div>
                ${options.showClose ? '<button class="notification-close">&times;</button>' : ''}
            </div>
        `;
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if (options.showClose) {
            const closeBtn = notification.querySelector('.notification-close');
            closeBtn.addEventListener('click', () => {
                this.hide(id);
            });
        }
        
        // –ö–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        if (options.clickToClose !== false) {
            notification.addEventListener('click', () => {
                this.hide(id);
            });
        }
        
        return notification;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è',
            money: 'üí∞',
            movement: 'üö∂',
            card: 'üÉè',
            bankruptcy: 'üí∏'
        };
        
        return icons[type] || '‚ÑπÔ∏è';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    getDefaultDuration(type) {
        const durations = {
            success: 3000,
            error: 5000,
            warning: 4000,
            info: 3000,
            money: 2000,
            movement: 1500,
            card: 2500,
            bankruptcy: 6000
        };
        
        return durations[type] || 3000;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hide(notificationId) {
        const notification = this.notifications.get(notificationId);
        if (!notification) {
            return;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        notification.classList.remove('show');
        notification.classList.add('hide');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
            this.notifications.delete(notificationId);
        }, 300);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    hideAll() {
        this.notifications.forEach((notification, id) => {
            this.hide(id);
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    cleanupOldNotifications() {
        if (this.notifications.size > this.maxNotifications) {
            const notificationsToRemove = Array.from(this.notifications.keys())
                .slice(0, this.notifications.size - this.maxNotifications);
            
            notificationsToRemove.forEach(id => {
                this.hide(id);
            });
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    generateNotificationId() {
        return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    success(message, options = {}) {
        return this.show(message, 'success', options);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    error(message, options = {}) {
        return this.show(message, 'error', options);
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    warning(message, options = {}) {
        return this.show(message, 'warning', options);
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    info(message, options = {}) {
        return this.show(message, 'info', options);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–Ω—å–≥–∞—Ö
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    money(message, options = {}) {
        return this.show(message, 'money', options);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    movement(message, options = {}) {
        return this.show(message, 'movement', options);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—Ä—Ç–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    card(message, options = {}) {
        return this.show(message, 'card', options);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    bankruptcy(message, options = {}) {
        return this.show(message, 'bankruptcy', options);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    onPlayerBalanceChanged(data) {
        const amount = data.amount;
        const type = amount > 0 ? 'success' : 'error';
        const sign = amount > 0 ? '+' : '';
        const message = `${sign}$${amount.toLocaleString()} - ${data.description}`;
        
        this.money(message, { duration: 2000 });
    }

    onPlayerMoved(data) {
        const message = `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${data.to.position}`;
        this.movement(message, { duration: 1500 });
    }

    onCardDrawn(data) {
        const message = `–í–∑—è—Ç–∞ –∫–∞—Ä—Ç–∞: ${data.card.name}`;
        this.card(message, { duration: 2500 });
    }

    onPlayerBankrupted(data) {
        const message = `–ò–≥—Ä–æ–∫ ${data.player.name} –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è`;
        this.bankruptcy(message, { duration: 6000 });
    }

    onEventProcessed(data) {
        if (data.result.success) {
            this.success(data.result.message, { duration: 3000 });
        } else {
            this.error(data.result.message, { duration: 5000 });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            activeNotifications: this.notifications.size,
            maxNotifications: this.maxNotifications,
            containerExists: !!this.container
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    destroy() {
        this.hideAll();
        this.notifications.clear();
        
        if (this.container && this.container.parentNode) {
            this.container.parentNode.removeChild(this.container);
        }
        
        this.container = null;
        this.isDestroyed = true;
        console.log('üóëÔ∏è Notifications –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default Notifications;
