/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
 */

export class EventBus {
    constructor() {
        this.events = new Map();
        this.isDestroyed = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventBus
     */
    init() {
        console.log('üîå EventBus –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    on(event, callback, options = {}) {
        if (this.isDestroyed) {
            console.warn('EventBus —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }

        if (!this.events.has(event)) {
            this.events.set(event, []);
        }

        const subscription = {
            callback,
            once: options.once || false,
            priority: options.priority || 0,
            context: options.context || null,
            id: this.generateSubscriptionId()
        };

        this.events.get(event).push(subscription);
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –Ω–∏–∑–∫–∏–π –Ω–æ–º–µ—Ä)
        this.events.get(event).sort((a, b) => a.priority - b.priority);
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è)
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     */
    once(event, callback) {
        this.on(event, callback, { once: true });
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     */
    off(event, callback) {
        if (!this.events.has(event)) {
            return;
        }

        const subscriptions = this.events.get(event);
        const index = subscriptions.findIndex(sub => sub.callback === callback);
        
        if (index > -1) {
            subscriptions.splice(index, 1);
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if (subscriptions.length === 0) {
            this.events.delete(event);
        }
    }

    /**
     * –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —ç–º–∏—Å—Å–∏–∏
     */
    emit(event, data, options = {}) {
        if (this.isDestroyed) {
            console.warn('EventBus —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —ç–º–∏—Å—Å–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }

        if (!this.events.has(event)) {
            return;
        }

        const subscriptions = [...this.events.get(event)]; // –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞
        const eventData = {
            event,
            data,
            timestamp: Date.now(),
            preventDefault: false,
            stopPropagation: false
        };

        // –í—ã–∑–æ–≤ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for (const subscription of subscriptions) {
            try {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                if (subscription.once) {
                    this.off(event, subscription.callback);
                }

                // –í—ã–∑–æ–≤ callback —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                if (subscription.context) {
                    subscription.callback.call(subscription.context, eventData);
                } else {
                    subscription.callback(eventData);
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
                if (eventData.stopPropagation) {
                    break;
                }

            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                
                // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏
                this.emit('error', {
                    event,
                    error,
                    subscription
                });
            }
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if (this.config?.debug) {
            console.log(`üì° –°–æ–±—ã—Ç–∏–µ: ${event}`, data);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —ç–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —ç–º–∏—Å—Å–∏–∏
     */
    async emitAsync(event, data, options = {}) {
        if (this.isDestroyed) {
            console.warn('EventBus —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —ç–º–∏—Å—Å–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
            return;
        }

        if (!this.events.has(event)) {
            return;
        }

        const subscriptions = [...this.events.get(event)];
        const eventData = {
            event,
            data,
            timestamp: Date.now(),
            preventDefault: false,
            stopPropagation: false
        };

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for (const subscription of subscriptions) {
            try {
                if (subscription.once) {
                    this.off(event, subscription.callback);
                }

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                let result;
                if (subscription.context) {
                    result = await subscription.callback.call(subscription.context, eventData);
                } else {
                    result = await subscription.callback(eventData);
                }

                if (eventData.stopPropagation) {
                    break;
                }

                return result;

            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                
                this.emit('error', {
                    event,
                    error,
                    subscription
                });
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    hasListeners(event) {
        return this.events.has(event) && this.events.get(event).length > 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    getListenerCount(event) {
        return this.events.has(event) ? this.events.get(event).length : 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     */
    getEvents() {
        return Array.from(this.events.keys());
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    removeAllListeners(event) {
        if (event) {
            this.events.delete(event);
        } else {
            this.events.clear();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
     */
    generateSubscriptionId() {
        return `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     */
    setConfig(config) {
        this.config = { ...this.config, ...config };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ EventBus
     */
    destroy() {
        this.events.clear();
        this.isDestroyed = true;
        console.log('üóëÔ∏è EventBus —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

export default EventBus;
