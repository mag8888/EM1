/**
 * Credit Service - –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
 */

class CreditService {
    constructor() {
        console.log('üí≥ CreditService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤');
        this.creditStep = 1000; // –®–∞–≥ –∫—Ä–µ–¥–∏—Ç–∞
        this.minAmount = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        this.maxCredit = 10000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        this.paymentRate = 100; // –ü–ª–∞—Ç–µ–∂ –∑–∞ –∫–∞–∂–¥—ã–µ 1000$
    }

    /**
     * –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async takeCredit(room, playerIndex, amount) {
        console.log('üí≥ CreditService: –í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', { playerIndex, amount });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!amount || amount < this.minAmount || amount % this.creditStep !== 0) {
            throw new Error(`–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ–π ${this.creditStep}$`);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (!room.game_data.credit_data) {
            room.game_data.credit_data = {
                player_credits: new Array(room.players.length).fill(0),
                credit_history: []
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        const currentCredit = room.game_data.credit_data.player_credits[playerIndex] || 0;
        const newTotalCredit = currentCredit + amount;
        
        if (newTotalCredit > this.maxCredit) {
            const availableAmount = this.maxCredit - currentCredit;
            throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ: $${availableAmount.toLocaleString()}`);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
        const newMonthlyPayment = Math.floor(amount / this.creditStep) * this.paymentRate;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        const totalMonthlyPayment = Math.floor(newTotalCredit / this.creditStep) * this.paymentRate;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫—Ä–µ–¥–∏—Ç—É)
        room.game_data.credit_data.player_credits[playerIndex] = newTotalCredit;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        room.game_data.credit_data.credit_history.push({
            player_index: playerIndex,
            type: 'take',
            amount: amount,
            monthly_payment: newMonthlyPayment,
            total_credit: newTotalCredit,
            total_monthly_payment: totalMonthlyPayment,
            timestamp: new Date(),
            description: `–í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç –Ω–∞ $${amount.toLocaleString()} (–æ–±—â–∏–π: $${newTotalCredit.toLocaleString()})`
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
        if (!room.game_data.player_balances) {
            room.game_data.player_balances = new Array(room.players.length).fill(0);
        }
        room.game_data.player_balances[playerIndex] += amount;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if (!room.game_data.transfers_history) {
            room.game_data.transfers_history = [];
        }
        room.game_data.transfers_history.push({
            sender: '–ë–∞–Ω–∫',
            recipient: room.players[playerIndex].name,
            amount: amount,
            timestamp: new Date(),
            sender_index: -1,
            recipient_index: playerIndex,
            type: 'credit',
            description: `–ö—Ä–µ–¥–∏—Ç –Ω–∞ $${amount.toLocaleString()}`
        });

        console.log('üí≥ CreditService: –ö—Ä–µ–¥–∏—Ç –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', { 
            new_balance: room.game_data.player_balances[playerIndex],
            new_credit_amount: amount,
            total_credit: newTotalCredit,
            new_monthly_payment: newMonthlyPayment,
            total_monthly_payment: totalMonthlyPayment
        });

        return {
            success: true,
            new_balance: room.game_data.player_balances[playerIndex],
            new_credit_amount: amount,
            total_credit: newTotalCredit,
            new_monthly_payment: newMonthlyPayment,
            total_monthly_payment: totalMonthlyPayment
        };
    }

    /**
     * –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async payoffCredit(room, playerIndex, amount) {
        console.log('üí≥ CreditService: –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', { playerIndex, amount });

        if (!room.game_data.credit_data) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö');
        }

        const currentCredit = room.game_data.credit_data.player_credits[playerIndex] || 0;
        if (currentCredit <= 0) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞');
        }

        const payoffAmount = amount || currentCredit;
        if (payoffAmount > currentCredit) {
            throw new Error('–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç');
        }

        if (payoffAmount > room.game_data.player_balances[playerIndex]) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        room.game_data.credit_data.player_credits[playerIndex] -= payoffAmount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        room.game_data.credit_data.credit_history.push({
            player_index: playerIndex,
            type: 'payoff',
            amount: payoffAmount,
            timestamp: new Date(),
            description: `–ü–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç –Ω–∞ $${payoffAmount.toLocaleString()}`
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        room.game_data.player_balances[playerIndex] -= payoffAmount;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        room.game_data.transfers_history.push({
            sender: room.players[playerIndex].name,
            recipient: '–ë–∞–Ω–∫',
            amount: payoffAmount,
            timestamp: new Date(),
            sender_index: playerIndex,
            recipient_index: -1,
            type: 'credit_payoff',
            description: `–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–∞ $${payoffAmount.toLocaleString()}`
        });

        console.log('üí≥ CreditService: –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', { 
            new_balance: room.game_data.player_balances[playerIndex],
            remaining_credit: room.game_data.credit_data.player_credits[playerIndex]
        });

        return {
            success: true,
            new_balance: room.game_data.player_balances[playerIndex],
            remaining_credit: room.game_data.credit_data.player_credits[playerIndex],
            paid_amount: payoffAmount
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerCredit(room, playerIndex) {
        if (!room.game_data.credit_data) {
            return {
                current_credit: 0,
                monthly_payment: 0,
                max_credit: this.maxCredit,
                available_credit: this.maxCredit,
                can_take_credit: true
            };
        }

        const currentCredit = room.game_data.credit_data.player_credits[playerIndex] || 0;
        const monthlyPayment = Math.floor(currentCredit / this.creditStep) * this.paymentRate;
        const availableCredit = this.maxCredit - currentCredit;

        return {
            current_credit: currentCredit,
            monthly_payment: monthlyPayment,
            max_credit: this.maxCredit,
            available_credit: availableCredit,
            can_take_credit: availableCredit >= this.minAmount
        };
    }
}

module.exports = CreditService;
