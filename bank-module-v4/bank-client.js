/**
 * Bank Client Module - –¢–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * –í—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */

class BankClient {
    constructor() {
        console.log('üè¶ BankClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è');
        this.roomId = null;
        this.userId = null;
        this.playerName = null;
        this.isInitialized = false;
        this.data = {
            balance: 0,
            income: 0,
            expenses: 0,
            credit: 0,
            maxCredit: 0,
            payday: 0,
            transfers: []
        };
    }

    async init(roomId, userId, playerName) {
        console.log('üè¶ BankClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', { roomId, userId, playerName });
        
        this.roomId = roomId;
        this.userId = userId;
        this.playerName = playerName;
        this.isInitialized = true;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await this.loadData();
        
        console.log('‚úÖ BankClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async loadData() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è BankClient: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        try {
            console.log('üîÑ BankClient: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            const encodedName = encodeURIComponent(this.playerName || '');
            const encodedRoom = encodeURIComponent(this.roomId || '');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
            const balanceResponse = await fetch(`/api/bank/balance/${encodedName}/${encodedRoom}`);
            if (balanceResponse.ok) {
                const balanceData = await balanceResponse.json();
                this.data.balance = balanceData.amount || 0;
            } else {
                console.warn('‚ö†Ô∏è BankClient: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å:', balanceResponse.status);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const financialsResponse = await fetch(`/api/bank/financials/${encodedName}/${encodedRoom}`);
            if (financialsResponse.ok) {
                const financialsData = await financialsResponse.json();
                this.data.income = financialsData.income || 0;
                this.data.expenses = financialsData.expenses || 0;
                this.data.payday = financialsData.payday || 0;
            } else {
                console.warn('‚ö†Ô∏è BankClient: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', financialsResponse.status);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const creditResponse = await fetch(`/api/bank/credit/status/${encodedName}/${encodedRoom}`);
            if (creditResponse.ok) {
                const creditData = await creditResponse.json();
                this.data.credit = creditData.credit || 0;
                this.data.maxCredit = creditData.maxCredit || 0;
            } else {
                console.warn('‚ö†Ô∏è BankClient: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', creditResponse.status);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            const historyResponse = await fetch(`/api/bank/history/${encodedRoom}`);
            if (historyResponse.ok) {
                this.data.transfers = await historyResponse.json();
            } else {
                console.warn('‚ö†Ô∏è BankClient: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', historyResponse.status);
            }

            console.log('‚úÖ BankClient: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', this.data);
            this.updateUI();
            
        } catch (error) {
            console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const elements = {
            currentBalance: document.getElementById('currentBalance'),
            totalIncome: document.getElementById('totalIncome'),
            totalExpenses: document.getElementById('totalExpenses'),
            monthlyIncome: document.getElementById('monthlyIncome'),
            currentCredit: document.getElementById('currentCredit'),
            maxCredit: document.getElementById('maxCredit'),
            bankBalanceValue: document.getElementById('bankBalanceValue')
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (elements.currentBalance) {
            elements.currentBalance.textContent = `$${this.data.balance.toLocaleString()}`;
        }
        if (elements.bankBalanceValue) {
            elements.bankBalanceValue.textContent = `$${this.data.balance.toLocaleString()}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        if (elements.totalIncome) {
            elements.totalIncome.textContent = `$${this.data.income.toLocaleString()}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        if (elements.totalExpenses) {
            elements.totalExpenses.textContent = `$${this.data.expenses.toLocaleString()}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º PAYDAY
        if (elements.monthlyIncome) {
            elements.monthlyIncome.textContent = `$${this.data.payday.toLocaleString()}/–º–µ—Å`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        if (elements.currentCredit) {
            elements.currentCredit.textContent = `$${this.data.credit.toLocaleString()}`;
        }
        if (elements.maxCredit) {
            elements.maxCredit.textContent = `$${this.data.maxCredit.toLocaleString()}`;
        }

        console.log('üé® BankClient: UI –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    async openBank() {
        console.log('üè¶ BankClient: –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–∞');
        
        if (!this.isInitialized) {
            console.error('‚ùå BankClient: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('bankModal');
        if (modal) {
            modal.style.display = 'flex';
            console.log('‚úÖ BankClient: –ë–∞–Ω–∫ –æ—Ç–∫—Ä—ã—Ç');
        } else {
            console.error('‚ùå BankClient: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    closeBank() {
        console.log('üè¶ BankClient: –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–∞');
        
        const modal = document.getElementById('bankModal');
        if (modal) {
            modal.style.display = 'none';
            console.log('‚úÖ BankClient: –ë–∞–Ω–∫ –∑–∞–∫—Ä—ã—Ç');
        }
    }

    async requestCredit(amount) {
        console.log('üè¶ BankClient: –ó–∞–ø—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–∞', amount);
        
        if (!this.isInitialized) {
            console.error('‚ùå BankClient: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            const response = await fetch('/api/bank/credit/take', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: this.playerName,
                    roomId: this.roomId,
                    amount: amount
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ BankClient: –ö—Ä–µ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω', result);
                await this.loadData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                return true;
            } else {
                const error = await response.json();
                console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞', error);
                alert(`–û—à–∏–±–∫–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                return false;
            }
        } catch (error) {
            console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞:', error);
            return false;
        }
    }

    async payoffCredit(amount) {
        console.log('üè¶ BankClient: –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', amount);
        
        if (!this.isInitialized) {
            console.error('‚ùå BankClient: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            const response = await fetch('/api/bank/credit/repay', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: this.playerName,
                    roomId: this.roomId,
                    amount: amount
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ BankClient: –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω', result);
                await this.loadData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                return true;
            } else {
                const error = await response.json();
                console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞', error);
                alert(`–û—à–∏–±–∫–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                return false;
            }
        } catch (error) {
            console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            return false;
        }
    }

    async transferMoney(recipientIndex, amount) {
        console.log('üè¶ BankClient: –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥', { recipientIndex, amount });
        
        if (!this.isInitialized) {
            console.error('‚ùå BankClient: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        try {
            const roomResponse = await fetch(`/api/rooms/${this.roomId}`);
            if (!roomResponse.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã');
            }
            
            const roomData = await roomResponse.json();
            const players = roomData.room.players || [];
            
            if (recipientIndex < 0 || recipientIndex >= players.length) {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
                return false;
            }
            
            const recipient = players[recipientIndex];
            
            const response = await fetch('/api/bank/transfer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    from: this.playerName,
                    to: recipient.name,
                    amount: amount,
                    roomId: this.roomId
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ BankClient: –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', result);
                await this.loadData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                return true;
            } else {
                const error = await response.json();
                console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞', error);
                alert(`–û—à–∏–±–∫–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                return false;
            }
        } catch (error) {
            console.error('‚ùå BankClient: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }

    getData() {
        return { ...this.data };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let bankClient = null;

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initBankClient(roomId, userId, playerName) {
    console.log('üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BankClient', { roomId, userId, playerName });
    
    bankClient = new BankClient();
    await bankClient.init(roomId, userId, playerName);
    window.bankClient = bankClient;
    
    return bankClient;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.openBank = function() {
    if (bankClient) {
        bankClient.openBank();
    } else {
        console.error('‚ùå BankClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.closeBank = function() {
    if (bankClient) {
        bankClient.closeBank();
    } else {
        console.error('‚ùå BankClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.requestCredit = function(amount) {
    if (bankClient) {
        return bankClient.requestCredit(amount);
    } else {
        console.error('‚ùå BankClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return Promise.resolve(false);
    }
};

window.payoffCredit = function(amount) {
    if (bankClient) {
        return bankClient.payoffCredit(amount);
    } else {
        console.error('‚ùå BankClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return Promise.resolve(false);
    }
};

window.transferMoney = function(recipientIndex, amount) {
    if (bankClient) {
        return bankClient.transferMoney(recipientIndex, amount);
    } else {
        console.error('‚ùå BankClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return Promise.resolve(false);
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞
window.processTransfer = function() {
    const recipientSelect = document.getElementById('recipientSelect');
    const amountInput = document.getElementById('transferAmount');
    
    const recipientIndex = parseInt(recipientSelect.value);
    const amount = parseInt(amountInput.value);

    if (!recipientIndex || !amount) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É');
        return;
    }
    
    transferMoney(recipientIndex, amount).then(success => {
        if (success) {
            resetTransferForm();
            alert('–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        }
    });
};

window.resetTransferForm = function() {
    document.getElementById('transferAmount').value = '';
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
function updateRecipientsList() {
    const select = document.getElementById('recipientSelect');
    if (!select) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
    const players = window.players || [];
    const currentPlayerName = bankClient?.playerName;
    
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</option>';
    
    players.forEach((player, index) => {
        if (player.name !== currentPlayerName) {
            const option = document.createElement('option');
            option.value = index;
            option.textContent = player.name;
            select.appendChild(option);
        }
    });
}

console.log('üè¶ BankClient –∑–∞–≥—Ä—É–∂–µ–Ω');
