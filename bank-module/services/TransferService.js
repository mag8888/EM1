/**
 * –°–ï–†–í–ò–° –ü–ï–†–ï–í–û–î–û–í
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 */

import { ErrorHandler } from '../core/ErrorHandler.js';

export class TransferService {
    constructor(config, logger, errorHandler, apiService, validationService, storageService) {
        this.config = config;
        this.logger = logger;
        this.errorHandler = errorHandler;
        this.apiService = apiService;
        this.validationService = validationService;
        this.storageService = storageService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
     * @returns {Promise<void>}
     */
    async processTransfer() {
        try {
            this.logger.group('Processing Transfer', () => {
                this.logger.info('Starting transfer process...');
            });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            const validation = this.validateTransferForm();
            if (!validation.valid) {
                throw this.errorHandler.createValidationError(validation.message);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingIndicator();
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const transferData = this.prepareTransferData();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await this.sendTransferRequest(transferData);
            
            if (response.ok) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                const amountInput = document.getElementById('transferAmount');
                const recipientSelect = document.getElementById('recipientSelect');
                const transferAmount = parseFloat(amountInput.value);
                const recipientName = recipientSelect.options[recipientSelect.selectedIndex].text;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
                this.showTransferAnimation(transferAmount, recipientName);
                
                // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
                setTimeout(async () => {
                    this.logger.info('üîÑ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞...');
                    await this.loadBankData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    this.showSuccess(`–ü–µ—Ä–µ–≤–æ–¥ $${transferAmount} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
                }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                this.resetTransferForm();
                
            } else {
                throw this.errorHandler.createApiError(response.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
            }
            
        } catch (error) {
            this.errorHandler.handle(error, 'Processing transfer');
            throw error;
        } finally {
            this.hideLoadingIndicator();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateTransferForm() {
        const recipientSelect = document.getElementById('recipientSelect');
        const amountInput = document.getElementById('transferAmount');
        
        this.logger.debug('Validating transfer form:', {
            recipientSelect: !!recipientSelect,
            amountInput: !!amountInput,
            recipientValue: recipientSelect?.value,
            amountValue: amountInput?.value
        });
        
        if (!recipientSelect || !amountInput) {
            return { valid: false, message: '–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
        }
        
        const recipientIndex = recipientSelect.value;
        const amount = parseFloat(amountInput.value);
        
        this.logger.debug('Validation values:', {
            recipientIndex,
            amount,
            amountInputValue: amountInput.value,
            minAmount: this.config.get('minTransferAmount'),
            currentBalance: this.currentBalance
        });
        
        if (!recipientIndex || recipientIndex === '') {
            return { valid: false, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è' };
        }
        
        if (!amountInput.value || amountInput.value.trim() === '') {
            return { valid: false, message: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞' };
        }
        
        if (isNaN(amount) || amount < 1) {
            return { valid: false, message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $1` };
        }
        
        if (amount > this.config.get('maxTransferAmount')) {
            return { valid: false, message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $${this.config.get('maxTransferAmount').toLocaleString()}` };
        }
        
        if (amount > this.currentBalance) {
            return { valid: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' };
        }
        
        this.logger.debug('Transfer validation passed');
        return { valid: true };
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
     * @returns {Object} –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    prepareTransferData() {
        const roomId = this.getRoomIdFromURL();
        const user = this.storageService.getUser();
        const recipientSelect = document.getElementById('recipientSelect');
        const amountInput = document.getElementById('transferAmount');
        
        const transferData = {
            roomId,
            userId: user.id,
            recipientIndex: parseInt(recipientSelect.value),
            amount: parseInt(amountInput.value)
        };
        
        this.logger.debug('Prepared transfer data:', transferData);
        return transferData;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
     * @param {Object} transferData - –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
     * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    async sendTransferRequest(transferData) {
        const requestBody = {
            user_id: transferData.userId,
            recipient_index: transferData.recipientIndex,
            amount: transferData.amount
        };
        
        this.logger.debug('Sending transfer request:', {
            url: `/api/rooms/${transferData.roomId}/transfer`,
            body: requestBody
        });
        
        const response = await this.apiService.executeTransfer(transferData.roomId, requestBody);
        
        this.logger.debug('Transfer response:', { status: 200, data: response });
        return { ok: true, data: response };
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    resetTransferForm() {
        const recipientSelect = document.getElementById('recipientSelect');
        const amountInput = document.getElementById('transferAmount');
        
        if (recipientSelect) recipientSelect.value = '';
        if (amountInput) amountInput.value = '';
        
        this.logger.debug('Transfer form reset');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
     * @param {number} amount - –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
     * @param {string} recipientName - –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
     */
    showTransferAnimation(amount, recipientName) {
        this.logger.debug(`üí∏ –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: $${amount} ‚Üí ${recipientName}`);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        const animation = document.createElement('div');
        animation.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            z-index: 3000;
            font-size: 1.2rem;
            font-weight: bold;
            text-align: center;
            animation: transferPulse 1s ease-in-out;
        `;
        
        animation.innerHTML = `
            <div style="font-size: 2rem; margin-bottom: 10px;">üí∏</div>
            <div>–ü–µ—Ä–µ–≤–æ–¥ $${amount.toLocaleString()}</div>
            <div style="font-size: 0.9rem; opacity: 0.9; margin-top: 5px;">‚Üí ${recipientName}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        if (!document.getElementById('transferAnimationCSS')) {
            const style = document.createElement('style');
            style.id = 'transferAnimationCSS';
            style.textContent = `
                @keyframes transferPulse {
                    0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0; }
                    50% { transform: translate(-50%, -50%) scale(1.1); opacity: 1; }
                    100% { transform: translate(-50%, -50%) scale(1); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(animation);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            if (animation.parentNode) {
                animation.parentNode.removeChild(animation);
            }
        }, 1000);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingIndicator() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        this.logger.debug('Showing loading indicator');
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingIndicator() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        this.logger.debug('Hiding loading indicator');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     */
    showSuccess(message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
        this.logger.info('Success:', message);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL
     * @returns {string|null} ID –∫–æ–º–Ω–∞—Ç—ã
     */
    getRoomIdFromURL() {
        return this.storageService.getRoomIdFromURL();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞
     * @param {boolean} forceUpdate - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    async loadBankData(forceUpdate = false) {
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–æ–¥—É–ª—é
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
        this.logger.debug('Loading bank data...');
    }
}
