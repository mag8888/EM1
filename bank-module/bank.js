/**
 * –ú–û–î–£–õ–¨ –ë–ê–ù–ö–ê - –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –° –ë–ê–õ–ê–ù–°–û–ú –ò –§–ò–ù–ê–ù–°–ê–ú–ò
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø: –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ,
 * –∑–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

class BankModule {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞
        this.currentBalance = 0;
        this.transfersHistory = [];
        this.totalIncome = 0;
        this.totalExpenses = 0;
        this.monthlyIncome = 0;
        this.currentCredit = 0;
        this.maxCredit = 0;
        this.isLoading = false;
        this.lastUpdateTime = 0;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            updateInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            protectionTime: 5000,  // 5 —Å–µ–∫—É–Ω–¥ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±—Ä–æ—Å–∞
            syncDelay: 2000       // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        };
        
        console.log('üè¶ BankModule initialized');
    }
    
    /**
     * –õ–û–ö–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    updateLocalBalance(amount, description = '') {
        const oldBalance = this.currentBalance;
        this.currentBalance += amount; // amount –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.lastUpdateTime = Date.now();
        
        console.log(`üí∞ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${oldBalance} ${amount > 0 ? '+' : ''}${amount} = ${this.currentBalance} (${description})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É
        this.updateUI();
        
        return this.currentBalance;
    }
    
    /**
     * –ü–†–û–í–ï–†–ö–ê –ù–£–ñ–ù–û–°–¢–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–ê
     */
    shouldLoadFromServer(forceUpdate = false) {
        if (forceUpdate) return true;
        
        const now = Date.now();
        const timeSinceLastUpdate = now - this.lastUpdateTime;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—â–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // 2. –ò–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        return timeSinceLastUpdate > this.config.protectionTime || this.lastUpdateTime === 0;
    }
    
    /**
     * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–ê
     */
    async loadFromServer(forceUpdate = false) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (!this.shouldLoadFromServer(forceUpdate)) {
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å');
                return;
            }
            
            const roomId = this.getRoomIdFromURL();
            if (!roomId) {
                console.log('Room ID not found, skipping bank data load');
                return;
            }
            
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                console.log('User not found, skipping bank data load');
                return;
            }
            
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            const response = await fetch(`/api/rooms/${roomId}?user_id=${user.id}`);
            if (!response.ok) {
                console.log(`Failed to load room data: HTTP ${response.status}`);
                return;
            }
            
            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const playerIndex = data.players.findIndex(p => p.user_id === user.id);
            
            if (playerIndex !== -1) {
                let newBalance = this.currentBalance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (game_data.player_balances)
                if (data.game_data?.player_balances) {
                    newBalance = data.game_data.player_balances[playerIndex] || 0;
                    console.log('Balance loaded from game_data.player_balances:', newBalance, 'for player', playerIndex);
                } 
                // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (players[].balance)
                else if (data.players[playerIndex]?.balance !== undefined) {
                    newBalance = data.players[playerIndex].balance;
                    console.log('Balance loaded from players[].balance:', newBalance, 'for player', playerIndex);
                } else {
                    console.log('No balance data found, playerIndex:', playerIndex, 'player data:', data.players[playerIndex]);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                // 1. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
                // 2. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0 (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
                // 3. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—â–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                const now = Date.now();
                const timeSinceLastUpdate = now - this.lastUpdateTime;
                
                if (newBalance > this.currentBalance || this.currentBalance === 0 || timeSinceLastUpdate > this.config.protectionTime || forceUpdate) {
                    this.currentBalance = newBalance;
                    this.lastUpdateTime = now;
                    console.log('Balance updated to:', this.currentBalance, 'timeSinceLastUpdate:', timeSinceLastUpdate + 'ms', 'forceUpdate:', forceUpdate);
                } else {
                    console.log('Keeping current balance:', this.currentBalance, '(new:', newBalance, ')', 'timeSinceLastUpdate:', timeSinceLastUpdate + 'ms', 'forceUpdate:', forceUpdate);
                }
            } else {
                console.log('Player not found in room, user.id:', user.id, 'players:', data.players.map(p => p.user_id));
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            if (data.game_data?.transfers_history) {
                this.transfersHistory = data.game_data.transfers_history;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadFinancialData(roomId, playerIndex);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
            console.log('=== BANK DATA LOADED ===');
            console.log('Balance:', this.currentBalance);
            console.log('Income:', this.totalIncome);
            console.log('Expenses:', this.totalExpenses);
            console.log('Cash Flow:', this.monthlyIncome);
            console.log('Credit:', this.currentCredit);
            
        } catch (error) {
            console.error('Error loading bank data:', error);
        }
    }
    
    /**
     * –ó–ê–ì–†–£–ó–ö–ê –§–ò–ù–ê–ù–°–û–í–´–• –î–ê–ù–ù–´–•
     */
    async loadFinancialData(roomId, playerIndex) {
        try {
            const response = await fetch(`/api/rooms/${roomId}/player/${playerIndex}/profession`);
            if (response.ok) {
                const data = await response.json();
                this.totalIncome = data.totalIncome || 0;
                this.totalExpenses = data.totalExpenses || 0;
                this.monthlyIncome = data.cashFlow || 0;
                this.currentCredit = data.currentCredit || 0;
                this.maxCredit = data.maxCredit || 0;
                
                console.log('Financial data loaded from API:', {
                    totalIncome: this.totalIncome,
                    totalExpenses: this.totalExpenses,
                    monthlyIncome: this.monthlyIncome,
                    currentCredit: this.currentCredit,
                    maxCredit: this.maxCredit
                });
            } else {
                console.log('Failed to load financial data from API, using defaults');
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.totalIncome = 10000;
                this.totalExpenses = 6200;
                this.monthlyIncome = 3800;
                this.currentCredit = 0;
                this.maxCredit = 10000;
            }
        } catch (error) {
            console.error('Error loading financial data:', error);
        }
    }
    
    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
     */
    updateUI() {
        console.log('=== UPDATING BANK UI ===');
        console.log('Current data:', {
            currentBalance: this.currentBalance,
            totalIncome: this.totalIncome,
            totalExpenses: this.totalExpenses,
            monthlyIncome: this.monthlyIncome,
            currentCredit: this.currentCredit
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        this.updateBalanceDisplay();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        this.updateFinancialSummary();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        this.updateTransfersHistory();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–µ
        this.updateCreditInfo();
        
        console.log('=== BANK UI UPDATE COMPLETE ===');
    }
    
    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
     */
    updateBalanceDisplay() {
        const balanceElements = document.querySelectorAll('[data-balance], .balance-amount, #currentBalance');
        balanceElements.forEach(element => {
            element.textContent = `$${this.currentBalance.toLocaleString()}`;
        });
        
        console.log('Balance updated to:', this.currentBalance);
    }
    
    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–û–ô –°–í–û–î–ö–ò
     */
    updateFinancialSummary() {
        console.log('Updating financial summary:', {
            totalIncome: this.totalIncome,
            totalExpenses: this.totalExpenses,
            monthlyIncome: this.monthlyIncome
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        const incomeElement = document.getElementById('totalIncome') || document.querySelector('.finance-item:nth-child(1) .finance-value');
        if (incomeElement) {
            incomeElement.textContent = `$${this.totalIncome.toLocaleString()}`;
            console.log('Updated totalIncome: $' + this.totalIncome.toLocaleString());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        const expensesElement = document.getElementById('totalExpenses') || document.querySelector('.finance-item:nth-child(2) .finance-value');
        if (expensesElement) {
            expensesElement.textContent = `$${this.totalExpenses.toLocaleString()}`;
            console.log('Updated totalExpenses: $' + this.totalExpenses.toLocaleString());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
        const cashFlowElement = document.getElementById('monthlyIncome') || document.querySelector('.finance-item:nth-child(3) .finance-value');
        if (cashFlowElement) {
            cashFlowElement.textContent = `$${this.monthlyIncome.toLocaleString()}`;
            console.log('Updated monthlyIncome: $' + this.monthlyIncome.toLocaleString());
        }
    }
    
    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ü–ï–†–ï–í–û–î–û–í
     */
    updateTransfersHistory() {
        const historyContainer = document.getElementById('transfersHistory');
        if (!historyContainer) return;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedTransfers = [...this.transfersHistory].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        historyContainer.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        sortedTransfers.forEach(transfer => {
            const transferElement = this.createTransferElement(transfer);
            historyContainer.appendChild(transferElement);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const countElement = document.getElementById('transfersCount');
        if (countElement) {
            countElement.textContent = sortedTransfers.length;
        }
    }
    
    /**
     * –°–û–ó–î–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê –ü–ï–†–ï–í–û–î–ê
     */
    createTransferElement(transfer) {
        const element = document.createElement('div');
        element.className = 'transfer-item';
        
        const isIncome = transfer.sender_index === -1 || transfer.recipient_index === this.getCurrentPlayerIndex();
        const isOutgoing = transfer.sender_index === this.getCurrentPlayerIndex() && transfer.recipient_index !== -1;
        
        const amountClass = isIncome ? 'amount income' : 'amount outgoing';
        const amountPrefix = isIncome ? '+' : '-';
        
        element.innerHTML = `
            <div class="transfer-info">
                <div class="transfer-description">${transfer.description}</div>
                <div class="transfer-time">${new Date(transfer.timestamp).toLocaleString()}</div>
            </div>
            <div class="${amountClass}">${amountPrefix}$${transfer.amount.toLocaleString()}</div>
        `;
        
        return element;
    }
    
    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–†–ï–î–ò–¢–ï
     */
    updateCreditInfo() {
        const currentCreditElement = document.getElementById('currentCredit');
        const maxCreditElement = document.getElementById('maxCredit');
        
        if (currentCreditElement) {
            currentCreditElement.textContent = `$${this.currentCredit.toLocaleString()}`;
        }
        
        if (maxCreditElement) {
            maxCreditElement.textContent = `$${this.maxCredit.toLocaleString()}`;
        }
        
        console.log('Credit:', this.currentCredit);
    }
    
    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï ID –ö–û–ú–ù–ê–¢–´ –ò–ó URL
     */
    getRoomIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('room');
    }
    
    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–î–ï–ö–°–ê –¢–ï–ö–£–©–ï–ì–û –ò–ì–†–û–ö–ê
     */
    getCurrentPlayerIndex() {
        // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
        return window.currentPlayer || 0;
    }
    
    /**
     * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async syncWithServer() {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
        await this.loadFromServer(true);
    }
    
    /**
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
     */
    async init() {
        console.log('üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–∞–Ω–∫–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await this.loadFromServer(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setInterval(() => {
            this.loadFromServer();
        }, this.config.updateInterval);
        
        console.log('üè¶ –ú–æ–¥—É–ª—å –±–∞–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.BankModule = BankModule;