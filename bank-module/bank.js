/**
 * –ë–ê–ù–ö–û–í–°–ö–ò–ô –ú–û–î–£–õ–¨
 * –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

class BankModule {
    constructor() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞
        this.currentBalance = 0;
        this.transfersHistory = [];
        this.totalIncome = 0;
        this.totalExpenses = 0;
        this.monthlyIncome = 0;
        this.currentCredit = 0;
        this.maxCredit = 10000;
        this.isLoading = false;
        this.lastUpdateTime = 0;
        this.roomData = null; // –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            minTransferAmount: 1,
            maxTransferAmount: 1000000,
            updateInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            animationDuration: 1000
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üè¶ Initializing Bank Module...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadBankData(true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setInterval(() => {
            this.loadBankData(false);
        }, this.config.updateInterval);
        
        console.log('‚úÖ Bank Module initialized successfully');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadBankData(forceUpdate = false) {
        console.log('=== LOADING BANK DATA ===');
        
        try {
            const roomId = this.getRoomIdFromURL();
            if (!roomId) {
                console.error('Room ID not found in URL');
                return;
            }
            
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user || !user.id) {
                console.error('User not found in localStorage');
                return;
            }
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            if (!forceUpdate && this.currentBalance > 0) {
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö - –±–∞–ª–∞–Ω—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                return;
            }
            
            const response = await fetch(`/api/rooms/${roomId}?user_id=${user.id}`);
            if (!response.ok) {
                console.log(`Failed to load room data: HTTP ${response.status}`);
                return;
            }
            
            const data = await response.json();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            this.roomData = data;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const playerIndex = data.players.findIndex(p => p.user_id === user.id);
            
            if (playerIndex !== -1) {
                let newBalance = this.currentBalance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (game_data.player_balances)
                if (data.game_data?.player_balances?.[playerIndex] !== undefined) {
                    newBalance = data.game_data.player_balances[playerIndex];
                    console.log('Balance loaded from game_data.player_balances:', newBalance, 'for player', playerIndex);
                } 
                // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (players[].balance)
                else if (data.players[playerIndex]?.balance !== undefined) {
                    newBalance = data.players[playerIndex].balance;
                    console.log('Balance loaded from players[].balance:', newBalance, 'for player', playerIndex);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
                if (forceUpdate || newBalance > this.currentBalance) {
                    const oldBalance = this.currentBalance;
                    this.currentBalance = newBalance;
                    this.lastUpdateTime = Date.now();
                    console.log('Balance updated from server:', oldBalance, '‚Üí', newBalance, 'forceUpdate:', forceUpdate);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                    this.animateBalanceChange(oldBalance, newBalance);
                } else {
                    console.log('Keeping current balance:', this.currentBalance, '(new:', newBalance, ')', 'forceUpdate:', forceUpdate);
                }
            } else {
                console.log('Player not found in room, user.id:', user.id, 'players:', data.players.map(p => p.user_id));
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            if (data.game_data?.transfers_history) {
                this.transfersHistory = data.game_data.transfers_history;
                console.log('Transfers history loaded:', this.transfersHistory.length, 'transfers');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadFinancialData(roomId, playerIndex);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateBankUI();
            
            console.log('=== BANK DATA LOADED ===');
            console.log('Balance:', this.currentBalance);
            console.log('Income:', this.totalIncome);
            console.log('Expenses:', this.totalExpenses);
            console.log('Cash Flow:', this.monthlyIncome);
            console.log('Credit:', this.currentCredit);
            
        } catch (error) {
            console.error('Error loading bank data:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
     */
    async loadFinancialData(roomId, playerIndex) {
        try {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) return;
            
            const response = await fetch(`/api/rooms/${roomId}/player/${playerIndex}/profession?user_id=${user.id}`);
            
            if (response.ok) {
                const data = await response.json();
                this.totalIncome = data.totalIncome || 0;
                this.totalExpenses = data.totalExpenses || 0;
                this.monthlyIncome = data.cashFlow || 0;
                this.currentCredit = data.currentCredit || 0;
                console.log('Financial data loaded from API:', {
                    totalIncome: this.totalIncome,
                    totalExpenses: this.totalExpenses,
                    monthlyIncome: this.monthlyIncome,
                    currentCredit: this.currentCredit
                });
            } else {
                console.log('Failed to load profession data from API, trying local data');
                // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ room data
                const user = JSON.parse(localStorage.getItem('user'));
                const roomResponse = await fetch(`/api/rooms/${roomId}?user_id=${user.id}`);
                if (roomResponse.ok) {
                    const roomData = await roomResponse.json();
                    const player = roomData.players[playerIndex];
                    if (player?.profession_data) {
                        this.totalIncome = player.profession_data.salary || 0;
                        this.totalExpenses = player.profession_data.expenses || 0;
                        this.monthlyIncome = player.profession_data.cash_flow || player.profession_data.cashFlow || 0;
                        this.currentCredit = 0; // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –≤ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    }
                }
            }
        } catch (error) {
            console.error('Error loading financial data:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–∞–Ω–∫–∞
     */
    updateBankUI() {
        console.log('=== UPDATING BANK UI ===');
        console.log('Current data:', {
            currentBalance: this.currentBalance,
            totalIncome: this.totalIncome,
            totalExpenses: this.totalExpenses,
            monthlyIncome: this.monthlyIncome,
            currentCredit: this.currentCredit
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        this.updateBalanceDisplay();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        this.updateFinancialSummary();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        this.updateTransfersHistory();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateCreditInfo();
        
        console.log('=== BANK UI UPDATE COMPLETE ===');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalanceDisplay() {
        const balanceElements = [
            document.getElementById('currentBalance'),
            document.querySelector('.bank-preview .balance-amount')
        ];
        
        balanceElements.forEach(el => {
            if (el) {
                el.textContent = `$${this.currentBalance.toLocaleString()}`;
                // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                el.classList.add('balance-updated');
                setTimeout(() => el.classList.remove('balance-updated'), 500);
            }
        });
        
        console.log('Balance updated to:', this.currentBalance);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
     */
    updateFinancialSummary() {
        console.log('Updating financial summary:', {
            totalIncome: this.totalIncome,
            totalExpenses: this.totalExpenses,
            monthlyIncome: this.monthlyIncome
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        const totalIncomeEl = document.getElementById('totalIncome') || 
                             document.querySelector('.finance-item:nth-child(1) .finance-value');
        if (totalIncomeEl) {
            totalIncomeEl.textContent = `$${this.totalIncome.toLocaleString()}`;
            console.log('Updated totalIncome: $' + this.totalIncome.toLocaleString());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        const totalExpensesEl = document.getElementById('totalExpenses') || 
                               document.querySelector('.finance-item:nth-child(2) .finance-value');
        if (totalExpensesEl) {
            totalExpensesEl.textContent = `$${this.totalExpenses.toLocaleString()}`;
            console.log('Updated totalExpenses: $' + this.totalExpenses.toLocaleString());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
        const monthlyIncomeEl = document.getElementById('monthlyIncome') || 
                               document.querySelector('.finance-item:nth-child(3) .finance-value');
        if (monthlyIncomeEl) {
            monthlyIncomeEl.textContent = `$${this.monthlyIncome.toLocaleString()}`;
            console.log('Updated monthlyIncome: $' + this.monthlyIncome.toLocaleString());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
     */
    updateTransfersHistory() {
        const historyContainer = document.getElementById('transfersHistory');
        const historyCount = document.getElementById('historyCount');
        
        if (!historyContainer) return;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        historyContainer.innerHTML = '';
        
        if (this.transfersHistory.length === 0) {
            historyContainer.innerHTML = '<div class="no-transfers">–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞</div>';
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const currentPlayerIndex = this.getCurrentPlayerIndex();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        let currentPlayerName = `Player ${currentPlayerIndex}`;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ roomData
        if (this.roomData?.players?.[currentPlayerIndex]?.name) {
            currentPlayerName = this.roomData.players[currentPlayerIndex].name;
        }
        
        console.log(`üîç Filtering transfers for current player: ${currentPlayerName} (index: ${currentPlayerIndex})`);
        console.log(`üìã Total transfers available: ${this.transfersHistory.length}`);
        console.log(`üìã Transfers data:`, this.transfersHistory);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const myTransfers = this.transfersHistory.filter(transfer => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≥–¥–µ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ - –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
            const isSender = transfer.sender_index === currentPlayerIndex;
            const isRecipient = transfer.recipient_index === currentPlayerIndex;
            
            // –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞—Å–∞—é—Ç—Å—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            const isBankToPlayer = transfer.sender_index === -1 && transfer.recipient_index === currentPlayerIndex;
            const isPlayerToBank = transfer.sender_index === currentPlayerIndex && transfer.recipient_index === -1;
            
            console.log(`üîç Transfer ${transfer.description}: sender=${transfer.sender_index}, recipient=${transfer.recipient_index}, currentPlayer=${currentPlayerIndex}, isSender=${isSender}, isRecipient=${isRecipient}, isBankToPlayer=${isBankToPlayer}, isPlayerToBank=${isPlayerToBank}`);
            
            return isSender || isRecipient || isBankToPlayer || isPlayerToBank;
        });
        
        console.log(`üìä Found ${myTransfers.length} transfers for current player out of ${this.transfersHistory.length} total`);
        
        if (myTransfers.length === 0) {
            historyContainer.innerHTML = '<div class="no-transfers">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (historyCount) {
            historyCount.textContent = myTransfers.length;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedTransfers = [...myTransfers].sort((a, b) => 
            new Date(b.timestamp) - new Date(a.timestamp)
        );
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
        sortedTransfers.forEach(transfer => {
            const transferElement = this.createTransferElement(transfer);
            historyContainer.appendChild(transferElement);
        });
        
        console.log(`‚úÖ Updated transfers history with ${sortedTransfers.length} transfers for current player`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
     */
    createTransferElement(transfer) {
        const element = document.createElement('div');
        element.className = 'transfer-item';
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = JSON.parse(localStorage.getItem('user'));
        const currentUserId = user ? user.id : null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ—Ö–æ–¥–æ–º –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–º
        const isIncome = transfer.sender_index === -1 || 
                        (transfer.recipient_index === this.getCurrentPlayerIndex() && transfer.sender_index !== this.getCurrentPlayerIndex());
        const isOutgoing = transfer.sender_index === this.getCurrentPlayerIndex() && transfer.recipient_index !== -1;
        
        const amount = transfer.amount || 0;
        const amountText = isIncome ? `+$${amount.toLocaleString()}` : `-$${amount.toLocaleString()}`;
        const amountClass = isIncome ? 'income' : 'expense';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const date = new Date(transfer.timestamp);
        const timeAgo = this.getTimeAgo(date);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        let senderName = '–ë–∞–Ω–∫';
        let recipientName = '–ë–∞–Ω–∫';
        
        if (transfer.sender_index !== -1 && this.roomData?.players?.[transfer.sender_index]) {
            senderName = this.roomData.players[transfer.sender_index].name;
        }
        if (transfer.recipient_index !== -1 && this.roomData?.players?.[transfer.recipient_index]) {
            recipientName = this.roomData.players[transfer.recipient_index].name;
        }
        
        element.innerHTML = `
            <div class="transfer-info">
                <div class="transfer-parties">${senderName} ‚Üí ${recipientName}</div>
                <div class="transfer-description">${transfer.description || '–ü–µ—Ä–µ–≤–æ–¥'}</div>
                <div class="transfer-time">${timeAgo}</div>
            </div>
            <div class="transfer-amount ${amountClass}">${amountText}</div>
        `;
        
        return element;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    updateCreditInfo() {
        const currentCreditEl = document.getElementById('currentCredit');
        const maxCreditEl = document.getElementById('maxCredit');
        
        if (currentCreditEl) {
            currentCreditEl.textContent = `$${this.currentCredit.toLocaleString()}`;
        }
        
        if (maxCreditEl) {
            this.maxCredit = Math.floor(this.monthlyIncome / 100) * 1000;
            maxCreditEl.textContent = `$${this.maxCredit.toLocaleString()}`;
        }
        
        console.log('Credit:', this.currentCredit);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    async openBank() {
        console.log('=== OPENING BANK MODAL ===');
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingIndicator();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadBankData(true);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            await this.loadRecipients();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.getElementById('bankModal');
            if (modal) {
                modal.style.display = 'block';
                modal.classList.add('modal-show');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                setTimeout(() => {
                    this.updateBankUI();
                }, 100);
            }
            
            console.log('=== BANK MODAL OPENED SUCCESSFULLY ===');
            
        } catch (error) {
            console.error('Error opening bank modal:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–Ω–∫–∞: ' + error.message);
        } finally {
            this.hideLoadingIndicator();
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeBankModal() {
        const modal = document.getElementById('bankModal');
        if (modal) {
            modal.classList.remove('modal-show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
     */
    async loadRecipients() {
        try {
            const roomId = this.getRoomIdFromURL();
            const user = JSON.parse(localStorage.getItem('user'));
            
            if (!roomId || !user) return;
            
            console.log('Loading recipients for user:', user.id);
            
            const response = await fetch(`/api/rooms/${roomId}?user_id=${user.id}`);
            if (!response.ok) return;
            
            const data = await response.json();
            console.log('Players data:', data.players);
            
            const recipientSelect = document.getElementById('recipientSelect');
            if (!recipientSelect) return;
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
            recipientSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞...</option>';
            
            if (data.players) {
                data.players.forEach((player, index) => {
                    console.log(`Player ${index}:`, {
                        name: player.name,
                        user_id: player.user_id,
                        current_user_id: user.id,
                        is_current_user: player.user_id === user.id
                    });
                    
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (player.user_id !== user.id) {
                        const option = document.createElement('option');
                        option.value = index;
                        option.textContent = player.name;
                        recipientSelect.appendChild(option);
                        console.log('Added recipient:', player.name, 'index:', index);
                    } else {
                        console.log('Skipped current user:', player.name, 'user_id:', player.user_id);
                    }
                });
            }
            
        } catch (error) {
            console.error('Error loading recipients:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
     */
    async processTransfer() {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            if (!this.validateTransferForm()) {
                return;
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const transferData = this.prepareTransferData();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            const response = await this.sendTransferRequest(transferData);
            
            if (response.ok) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                const amountInput = document.getElementById('transferAmount');
                const recipientSelect = document.getElementById('recipientSelect');
                const transferAmount = parseFloat(amountInput.value);
                const recipientName = recipientSelect.options[recipientSelect.selectedIndex].text;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
                this.showTransferAnimation(transferAmount, recipientName);
                
                // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
                setTimeout(async () => {
                    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞...');
                    await this.loadBankData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    this.showSuccess(`–ü–µ—Ä–µ–≤–æ–¥ $${transferAmount} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
                }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                this.resetTransferForm();
                
            } else {
                this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: ' + (response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
            
        } catch (error) {
            console.error('Transfer error:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: ' + error.message);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    validateTransferForm() {
        const recipientSelect = document.getElementById('recipientSelect');
        const amountInput = document.getElementById('transferAmount');
        
        console.log('Validating transfer form:', {
            recipientSelect: !!recipientSelect,
            amountInput: !!amountInput,
            recipientValue: recipientSelect?.value,
            amountValue: amountInput?.value
        });
        
        if (!recipientSelect || !amountInput) {
            this.showError('–§–æ—Ä–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }
        
        const recipientIndex = recipientSelect.value;
        const amount = parseFloat(amountInput.value);
        
        console.log('Validation values:', {
            recipientIndex,
            amount,
            amountInputValue: amountInput.value,
            minAmount: this.config.minTransferAmount,
            currentBalance: this.currentBalance
        });
        
        if (!recipientIndex || recipientIndex === '') {
            this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
            return false;
        }
        
        if (isNaN(amount) || amount < this.config.minTransferAmount) {
            this.showError(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: $${this.config.minTransferAmount}`);
            return false;
        }
        
        if (amount > this.currentBalance) {
            this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
            return false;
        }
        
        console.log('Transfer validation passed');
        return true;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    prepareTransferData() {
        const roomId = this.getRoomIdFromURL();
        const user = JSON.parse(localStorage.getItem('user'));
        const recipientIndex = parseInt(document.getElementById('recipientSelect').value);
        const amount = parseFloat(document.getElementById('transferAmount').value);
        
        const transferData = {
            roomId,
            userId: user.id,
            recipientIndex,
            amount
        };
        
        console.log('Prepared transfer data:', transferData);
        return transferData;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
     */
    async sendTransferRequest(transferData) {
        const url = `/api/rooms/${transferData.roomId}/transfer`;
        const body = {
            user_id: transferData.userId,
            recipient_index: transferData.recipientIndex,
            amount: transferData.amount
        };
        
        console.log('Sending transfer request:', { url, body });
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(body)
        });
        
        const data = await response.json();
        console.log('Transfer response:', { status: response.status, data });
        
        return {
            ok: response.ok,
            status: response.status,
            data
        };
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    resetTransferForm() {
        document.getElementById('recipientSelect').value = '';
        document.getElementById('transferAmount').value = '';
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    showTransferAnimation(amount, recipientName) {
        console.log(`üí∏ –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: $${amount} ‚Üí ${recipientName}`);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        const animation = document.createElement('div');
        animation.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            z-index: 3000;
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            animation: pulse 1s ease-in-out;
        `;
        
        animation.innerHTML = `
            <div style="font-size: 24px; margin-bottom: 10px;">ÔøΩÔøΩ</div>
            <div>–ü–µ—Ä–µ–≤–æ–¥ $${amount.toLocaleString()}</div>
            <div style="font-size: 14px; opacity: 0.8;">‚Üí ${recipientName}</div>
        `;
        
        document.body.appendChild(animation);
        
        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            document.body.removeChild(animation);
        }, 2000);
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    animateBalanceChange(oldBalance, newBalance) {
        const difference = newBalance - oldBalance;
        const isIncrease = difference > 0;
        
        console.log(`üí∞ –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${oldBalance} ‚Üí ${newBalance} (${isIncrease ? '+' : ''}${difference})`);
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–ª–∞–Ω—Å–∞
        const balanceElements = document.querySelectorAll('[data-balance], .balance-amount, #currentBalance');
        
        balanceElements.forEach(element => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            element.classList.add('balance-updated');
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 500ms
            setTimeout(() => {
                element.classList.remove('balance-updated');
            }, 500);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingIndicator() {
        let indicator = document.getElementById('loadingIndicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.id = 'loadingIndicator';
            indicator.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 20px;
                border-radius: 10px;
                z-index: 2000;
                font-size: 16px;
            `;
            indicator.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
            document.body.appendChild(indicator);
        }
        indicator.style.display = 'block';
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingIndicator() {
        const indicator = document.getElementById('loadingIndicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.showNotification(message, 'error');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
     */
    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        const colors = {
            error: '#ef4444',
            success: '#10b981',
            info: '#3b82f6'
        };
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${colors[type] || colors.info};
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 2000;
            font-size: 14px;
            max-width: 300px;
            animation: slideIn 0.3s ease-out;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 3000);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL
     */
    getRoomIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('room');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayerIndex() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é currentPlayer
        return typeof currentPlayer !== 'undefined' ? currentPlayer : 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥
     */
    getTimeAgo(date) {
        const now = new Date();
        const diffInSeconds = Math.floor((now - date) / 1000);
        
        if (diffInSeconds < 60) {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        } else if (diffInSeconds < 3600) {
            const minutes = Math.floor(diffInSeconds / 60);
            return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        } else if (diffInSeconds < 86400) {
            const hours = Math.floor(diffInSeconds / 3600);
            return `${hours} —á –Ω–∞–∑–∞–¥`;
        } else {
            const days = Math.floor(diffInSeconds / 86400);
            return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BankModule;
} else {
    window.BankModule = BankModule;
}
