/**
 * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å - API –°–µ—Ä–≤–∏—Å
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

class BankApiService {
    constructor() {
        console.log('üåê BankApiService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–∏—Å–∞');
        this.baseUrl = '/api';
        this.timeout = 10000;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å
     */
    async makeRequest(url, options = {}) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal,
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('Request timeout');
            }
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    async loadRoomData(roomId, userId) {
        console.log('üì° BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', { roomId, userId });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}?user_id=${userId}`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
     */
    async executeTransfer(roomId, userId, recipientIndex, amount) {
        console.log('üí∏ BankApiService: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞', { 
            roomId, userId, recipientIndex, amount 
        });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/transfer`;
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    recipient_index: recipientIndex,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    async loadPlayerFinancialData(roomId, playerIndex) {
        console.log('üí∞ BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { roomId, playerIndex });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/player/${playerIndex}/financial`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ
     */
    async loadTurnInfo(roomId) {
        console.log('üîÑ BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ', { roomId });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/turn`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ–¥–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async requestCredit(roomId, userId, amount) {
        console.log('üí≥ BankApiService: –ó–∞–ø—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–∞', { roomId, userId, amount });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/credit`;
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ö—Ä–µ–¥–∏—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async payoffCredit(roomId, userId, amount) {
        console.log('üí≥ BankApiService: –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', { roomId, userId, amount });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/payoff-credit`;
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.BankApiService = BankApiService;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BankApiService;
}
