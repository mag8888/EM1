/**
 * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å - API –°–µ—Ä–≤–∏—Å
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

class BankApiService {
    constructor() {
        console.log('üåê BankApiService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–∏—Å–∞');
        this.baseUrl = '/api';
        this.timeout = 10000;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayerIndex(roomData) {
        const userId = this.getUserId();
        console.log('üîç BankApiService: –ü–æ–∏—Å–∫ player_index', { userId, players: roomData?.players });
        
        if (!userId || !roomData?.players) {
            console.warn('‚ö†Ô∏è BankApiService: userId –∏–ª–∏ players –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0');
            return 0;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ ID –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const playerIds = roomData.players.map((player, index) => ({ index, _id: player._id, user_id: player.user_id, name: player.name }));
        console.log('üîç BankApiService: –í—Å–µ –∏–≥—Ä–æ–∫–∏:', playerIds);
        console.log('üîç BankApiService: –ò—â–µ–º userId:', userId);
        console.log('üîç BankApiService: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', roomData.players.map(p => ({ user_id: p.user_id, matches: p.user_id === userId })));
        
        const playerIndex = roomData.players.findIndex(player => player.user_id === userId);
        console.log('üîç BankApiService: –ù–∞–π–¥–µ–Ω player_index:', playerIndex);
        
        if (playerIndex < 0) {
            console.warn('‚ö†Ô∏è BankApiService: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0');
            return 0;
        }
        
        return playerIndex;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserId() {
        try {
            // 1) –ò–∑ –æ–±—ä–µ–∫—Ç–∞ user –≤ localStorage
            const rawUser = localStorage.getItem('user') || sessionStorage.getItem('user');
            if (rawUser) {
                const user = JSON.parse(rawUser);
                const candidate = user?.id || user?._id || user?.user_id || user?.userId;
                if (candidate) return candidate;
            }
            // 2) –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
            const direct = localStorage.getItem('user_id') || localStorage.getItem('userId') || sessionStorage.getItem('user_id') || sessionStorage.getItem('userId');
            if (direct) return direct;
            // 3) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if (window.currentUser?.id) return window.currentUser.id;
            if (window.user?.id) return window.user.id;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        return null;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å
     */
    async makeRequest(url, options = {}) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal,
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                let serverMsg = '';
                try {
                    const errJson = await response.json();
                    serverMsg = errJson?.message || '';
                } catch (_) {}
                throw new Error(`HTTP ${response.status}: ${response.statusText}${serverMsg ? ' - ' + serverMsg : ''}`);
            }
            
            return await response.json();
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('Request timeout');
            }
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    async loadRoomData(roomId, userId) {
        console.log('üì° BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', { roomId, userId });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}?user_id=${userId}`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
     */
    async executeTransfer(roomId, userId, recipientIndex, amount) {
        console.log('üí∏ BankApiService: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞', { 
            roomId, userId, recipientIndex, amount 
        });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/transfer`;
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    user_id: userId,
                    recipient_index: recipientIndex,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    async loadPlayerFinancialData(roomId, playerIndex) {
        console.log('üí∞ BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { roomId, playerIndex });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/player/${playerIndex}/financial`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ
     */
    async loadTurnInfo(roomId) {
        console.log('üîÑ BankApiService: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ', { roomId });
        
        try {
            const url = `${this.baseUrl}/rooms/${roomId}/turn`;
            const data = await this.makeRequest(url);
            
            console.log('‚úÖ BankApiService: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ–¥–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ:', error);
            throw error;
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async requestCredit(roomId, userId, amount) {
        console.log('üí≥ BankApiService: –ó–∞–ø—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–∞', { roomId, userId, amount });
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ player_index
            console.log('üì° BankApiService: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è player_index');
            const roomData = await this.loadRoomData(roomId, userId);
            const playerIndex = this.getCurrentPlayerIndex(roomData);
            
            console.log('üì° BankApiService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–¥–∏—Ç', { playerIndex, amount });
            const url = `${this.baseUrl}/rooms/${roomId}/take-credit`;
            console.log('üì° BankApiService: URL –∑–∞–ø—Ä–æ—Å–∞', url);
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    player_index: playerIndex,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ö—Ä–µ–¥–∏—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', data);
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞:', error);
            console.error('‚ùå BankApiService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                message: error.message,
                status: error.status,
                response: error.response
            });
            throw error;
        }
    }
    
    /**
     * –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
     */
    async payoffCredit(roomId, userId, amount) {
        console.log('üí≥ BankApiService: –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', { roomId, userId, amount });
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ player_index
            const roomData = await this.loadRoomData(roomId, userId);
            const playerIndex = this.getCurrentPlayerIndex(roomData);
            
            const url = `${this.baseUrl}/rooms/${roomId}/payoff-credit`;
            const data = await this.makeRequest(url, {
                method: 'POST',
                body: JSON.stringify({
                    player_index: playerIndex,
                    amount: amount
                })
            });
            
            console.log('‚úÖ BankApiService: –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return data;
        } catch (error) {
            console.error('‚ùå BankApiService: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.BankApiService = BankApiService;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BankApiService;
}
