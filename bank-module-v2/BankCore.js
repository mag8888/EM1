/**
 * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å - –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */

class BankCore {
    constructor() {
        console.log('üè¶ BankCore: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã');
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞
        this.state = {
            currentBalance: 0,
            totalIncome: 0,
            totalExpenses: 0,
            monthlyIncome: 0,
            currentCredit: 0,
            maxCredit: 0,
            transfersHistory: [],
            isLoading: false,
            hasLocalChanges: false,
            lastUpdateTime: 0
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            minTransferAmount: 1,
            maxTransferAmount: 1000000,
            updateInterval: 30000,
            animationDuration: 1000,
            debounceDelay: 300
        };
        
        // –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        this.roomData = null;
        this.currentPlayerIndex = 0;
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventListeners = new Map();
        
        console.log('‚úÖ BankCore: –Ø–¥—Ä–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getState() {
        return { ...this.state };
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    setState(newState) {
        const oldState = { ...this.state };
        this.state = { ...this.state, ...newState };
        this.emit('stateChanged', { oldState, newState: this.state });
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
    }
    
    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    off(event, callback) {
        if (this.eventListeners.has(event)) {
            const listeners = this.eventListeners.get(event);
            const index = listeners.indexOf(callback);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        }
    }
    
    /**
     * –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
     */
    emit(event, data) {
        if (this.eventListeners.has(event)) {
            this.eventListeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Error in event listener for ${event}:`, error);
                }
            });
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    setRoomData(roomData) {
        this.roomData = roomData;
        this.emit('roomDataChanged', roomData);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    setCurrentPlayerIndex(playerIndex) {
        this.currentPlayerIndex = playerIndex;
        this.emit('playerIndexChanged', playerIndex);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
     */
    updateBalance(newBalance, source = 'unknown') {
        const oldBalance = this.state.currentBalance;
        this.setState({ currentBalance: newBalance });
        this.emit('balanceChanged', { 
            oldBalance, 
            newBalance, 
            difference: newBalance - oldBalance,
            source 
        });
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addTransferToHistory(transfer) {
        const newHistory = [transfer, ...this.state.transfersHistory];
        this.setState({ transfersHistory: newHistory });
        this.emit('transferAdded', transfer);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    setLocalChanges(hasChanges) {
        this.setState({ hasLocalChanges: hasChanges });
        this.emit('localChangesChanged', hasChanges);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(isLoading) {
        this.setState({ isLoading });
        this.emit('loadingChanged', isLoading);
    }
    
    /**
     * –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    reset() {
        this.setState({
            currentBalance: 0,
            totalIncome: 0,
            totalExpenses: 0,
            monthlyIncome: 0,
            currentCredit: 0,
            maxCredit: 0,
            transfersHistory: [],
            isLoading: false,
            hasLocalChanges: false,
            lastUpdateTime: 0
        });
        this.emit('stateReset');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.BankCore = BankCore;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BankCore;
}
