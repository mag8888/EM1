const roomState = require('../services/room-state');

function registerRoomsModule({ app, db, auth, isDbReady }) {
    const {
        listRooms,
        getRoomById,
        createRoomInstance,
        addPlayerToRoom,
        removePlayerFromRoom,
        assignDreamToPlayer,
        assignTokenToPlayer,
        toggleReadyStatus,
        sanitizeRoom,
        initializeGame,
        MIN_PLAYERS,
        forceSaveRoom
    } = roomState;

    const authenticate = auth?.authenticateToken;

    const ensureAuth = (req, res, next) => {
        if (!authenticate) {
            return res.status(401).json({ success: false, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }
        if (!req.headers.authorization) {
            return res.status(401).json({ success: false, message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }
        return authenticate(req, res, next);
    };

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç—ã
    const roomLoadLocks = new Map();

    const ensureRoomLoaded = async (roomId) => {
        if (roomLoadLocks.has(roomId)) {
            // –∂–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
            await roomLoadLocks.get(roomId);
            return getRoomById(roomId);
        }

        let room = getRoomById(roomId);
        if (!room && isDbReady?.()) {
            const loadPromise = db.getRoomWithPlayers(roomId)
                .finally(() => roomLoadLocks.delete(roomId));
            roomLoadLocks.set(roomId, loadPromise);
            const snapshot = await loadPromise;
            if (snapshot?.room) {
                room = createRoomInstance({
                    id: snapshot.room.id,
                    name: snapshot.room.name,
                    creator: {},
                    maxPlayers: snapshot.room.max_players,
                    turnTime: snapshot.room.turn_time,
                    assignProfessions: snapshot.room.assign_professions,
                    register: true
                });
                room.creatorId = snapshot.room.creator_id;
                room.status = snapshot.room.status;
                room.gameStarted = Boolean(snapshot.room.game_started);
                room.createdAt = snapshot.room.created_at;
                room.updatedAt = snapshot.room.updated_at;
                room.lastActivity = snapshot.room.last_activity || Date.now();
                
                // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
                room.players = [];
                room.game_data.player_balances = [];
                room.game_data.credit_data.player_credits = [];

                for (const playerRow of snapshot.players || []) {
                    console.log(`üîç ensureRoomLoaded: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–∞ ${playerRow.name}, is_host: ${playerRow.is_host}, is_ready: ${playerRow.is_ready}`);
                    console.log(`üîç ensureRoomLoaded: playerRow.is_host = ${playerRow.is_host}, Boolean(playerRow.is_host) = ${Boolean(playerRow.is_host)}`);
                    const player = addPlayerToRoom(room, {
                        userId: playerRow.user_id,
                        name: playerRow.name,
                        avatar: playerRow.avatar,
                        isHost: Boolean(playerRow.is_host),
                        isReady: Boolean(playerRow.is_ready),
                        selectedDream: playerRow.selected_dream,
                        selectedToken: playerRow.selected_token
                    });
                    console.log(`‚úÖ ensureRoomLoaded: –∏–≥—Ä–æ–∫ ${player.name} –¥–æ–±–∞–≤–ª–µ–Ω, isHost: ${player.isHost}, isReady: ${player.isReady}`);
                }
            }
        }
        return getRoomById(roomId);
    };

    const getDisplayName = (user) => {
        if (!user) return '–ò–≥—Ä–æ–∫';
        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º username
        if (user.username && String(user.username).trim() !== '') {
            return user.username;
        }
        return [user.first_name, user.last_name].filter(Boolean).join(' ') || user.email || '–ò–≥—Ä–æ–∫';
    };

    const buildRoomResponse = (room, userId) => sanitizeRoom(room, { includePlayers: true, userId });

    const loadRooms = async ({ userId = null, includePlayers = true } = {}) => {
        if (isDbReady?.()) {
            const dbRooms = await db.getAllRooms();
            const result = [];
            for (const row of dbRooms) {
                const loaded = await ensureRoomLoaded(row.id);
                if (loaded) {
                    result.push(sanitizeRoom(loaded, { includePlayers, userId }));
                }
            }
            return result;
        }

        return listRooms().map((room) => sanitizeRoom(room, { includePlayers, userId }));
    };

    app.get('/api/rooms', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || null;
            const result = await loadRooms({ userId, includePlayers: true });
            res.json({ success: true, rooms: result });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
            res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    app.get('/api/rooms/simple', async (req, res) => {
        try {
            const rooms = await loadRooms({ includePlayers: false });
            const simplified = rooms.map(room => ({
                id: room.id,
                name: room.name,
                creatorName: room.creatorName,
                maxPlayers: room.maxPlayers,
                playersCount: room.players?.length || 0,
                status: room.status,
                gameStarted: room.gameStarted,
                canStart: room.canStart
            }));
            res.json({ success: true, rooms: simplified });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
            res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    app.get('/api/rooms/:roomId', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || null;
            console.log(`üîç API getRoom: –∑–∞–ø—Ä–æ—Å –∫–æ–º–Ω–∞—Ç—ã ${req.params.roomId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            const room = await ensureRoomLoaded(req.params.roomId);
            console.log(`üîç API getRoom: –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:`, {
                roomId: room?.id,
                playersCount: room?.players?.length,
                hasCurrentPlayer: !!room?.players?.find(p => p.userId === userId),
                gameStarted: room?.gameStarted
            });
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            const sanitizedRoom = sanitizeRoom(room, { includePlayers: true, userId });
            console.log(`üîç API getRoom: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å ${sanitizedRoom.players?.length} –∏–≥—Ä–æ–∫–∞–º–∏`);
            res.json({ success: true, room: sanitizedRoom });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
        }
    });

    app.post('/api/rooms', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            if (!userId) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const name = (req.body?.name || '').toString().trim();
            const maxPlayers = Number(req.body?.max_players || req.body?.maxPlayers || 4);
            const turnTime = Number(req.body?.turn_time || req.body?.turnTime || 120);
            if (name.length < 3 || name.length > 48) {
                return res.status(400).json({ success: false, message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3-48 —Å–∏–º–≤–æ–ª–æ–≤' });
            }
            if (!Number.isInteger(maxPlayers) || maxPlayers < 2 || maxPlayers > 8) {
                return res.status(400).json({ success: false, message: 'maxPlayers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 8' });
            }
            if (!Number.isInteger(turnTime) || turnTime < 30 || turnTime > 600) {
                return res.status(400).json({ success: false, message: 'turnTime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 30-600 —Å–µ–∫—É–Ω–¥' });
            }
            let user = null;
            if (isDbReady?.()) {
                user = await db.getUserById(userId);
            }
            const room = createRoomInstance({
                name,
                creator: {
                    id: userId,
                    name: getDisplayName(user),
                    avatar: user?.avatar || null
                },
                maxPlayers,
                turnTime,
                assignProfessions: req.body?.assign_professions || req.body?.profession_mode
            });

            console.log(`üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: userId=${userId}, name=${getDisplayName(user)}, isHost=true`);
            const host = addPlayerToRoom(room, {
                userId,
                name: getDisplayName(user),
                avatar: user?.avatar || null,
                isHost: true
            });
            console.log(`üîß –•–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: isHost=${host.isHost}, userId=${host.userId}`);

            if (isDbReady?.()) {
                await db.createRoom({
                    id: room.id,
                    name: room.name,
                    creatorId: room.creatorId,
                    creatorName: room.creatorName,
                    creatorAvatar: room.creatorAvatar,
                    maxPlayers: room.maxPlayers,
                    minPlayers: room.minPlayers,
                    turnTime: room.turnTime,
                    assignProfessions: room.assignProfessions
                });
                await db.addPlayerToRoom(room.id, {
                    userId: host.userId,
                    name: host.name,
                    avatar: host.avatar,
                    isHost: true
                });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è`);
            }

            res.status(201).json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
        }
    });

    app.post('/api/rooms/:roomId/join', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            console.log(`üîç API join: –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${req.params.roomId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            if (!userId) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            const room = await ensureRoomLoaded(req.params.roomId);
            console.log(`üîç API join: –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:`, {
                roomId: room?.id,
                playersCount: room?.players?.length,
                maxPlayers: room?.maxPlayers,
                gameStarted: room?.gameStarted
            });
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            if (room.players.length >= room.maxPlayers) {
                return res.status(400).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
            }
            let user = null;
            if (isDbReady?.()) {
                user = await db.getUserById(userId);
                console.log(`üîç API join: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î:`, {
                    id: user?.id,
                    name: user?.first_name || user?.username || user?.email
                });
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã
            const isCreator = room.creatorId === userId;
            console.log(`üîç API join: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è: userId=${userId}, creatorId=${room.creatorId}, isCreator=${isCreator}`);
            
            const newPlayer = addPlayerToRoom(room, {
                userId,
                name: getDisplayName(user),
                avatar: user?.avatar || null,
                isHost: isCreator // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ isHost = true
            });
            console.log(`üîç API join: –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:`, {
                userId: newPlayer.userId,
                name: newPlayer.name,
                isHost: newPlayer.isHost
            });

            if (isDbReady?.()) {
                await db.addPlayerToRoom(room.id, {
                    userId,
                    name: newPlayer.name,
                    avatar: newPlayer.avatar,
                    isHost: isCreator // –ò—Å–ø–æ–ª—å–∑—É–µ–º isCreator –≤–º–µ—Å—Ç–æ newPlayer.isHost
                });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞`);
            }

            res.json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' });
        }
    });

    app.post('/api/rooms/:roomId/leave', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            if (!userId) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            const room = await ensureRoomLoaded(req.params.roomId);
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            const wasHost = room.players.find(p => p.userId === userId.toString())?.isHost;
            removePlayerFromRoom(room, userId);

            if (isDbReady?.()) {
                await db.removePlayerFromRoom(room.id, userId);
                if (wasHost && room.players.length > 0) {
                    await db.setRoomHost(room.id, room.players[0].userId);
                }
                if (room.players.length === 0) {
                    await db.deleteRoom(room.id);
                }
            }

            res.json({ success: true, room: buildRoomResponse(room, req.user?.userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' });
        }
    });

    app.post('/api/rooms/:roomId/dream', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            const { dream_id } = req.body || {};
            const room = await ensureRoomLoaded(req.params.roomId);
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            assignDreamToPlayer(room, userId, dream_id);
            const player = room.players.find(p => p.userId === userId.toString());
            if (isDbReady?.()) {
                await db.updatePlayerSelection(room.id, userId, {
                    dreamId: player?.selectedDream ?? dream_id,
                    tokenId: player?.selectedToken ?? null
                });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã –∏–≥—Ä–æ–∫–æ–º ${userId}`);
            }
            res.json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã' });
        }
    });

    app.post('/api/rooms/:roomId/token', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            const { token_id } = req.body || {};
            const room = await ensureRoomLoaded(req.params.roomId);
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            assignTokenToPlayer(room, userId, token_id);
            const player = room.players.find(p => p.userId === userId.toString());
            if (isDbReady?.()) {
                await db.updatePlayerSelection(room.id, userId, {
                    dreamId: player?.selectedDream ?? null,
                    tokenId: player?.selectedToken ?? token_id
                });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–º ${userId}`);
            }
            res.json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏' });
        }
    });

    app.post('/api/rooms/:roomId/ready', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            const room = await ensureRoomLoaded(req.params.roomId);
            if (!room) {
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            const isReady = toggleReadyStatus(room, userId);
            if (isDbReady?.()) {
                await db.updatePlayerReady(room.id, userId, isReady);
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ ${userId}`);
            }
            res.json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' });
        }
    });

    app.post('/api/rooms/:roomId/start', ensureAuth, async (req, res) => {
        try {
            const userId = req.user?.userId || req.headers['x-user-id'];
            console.log(`üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã: userId=${userId}, roomId=${req.params.roomId}`);
            
            const room = await ensureRoomLoaded(req.params.roomId);
            if (!room) {
                console.log('‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', req.params.roomId);
                return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: creatorId=${room.creatorId}, userId=${userId}`);
            if (room.creatorId && room.creatorId.toString() !== userId.toString()) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã');
                return res.status(403).json({ success: false, message: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É' });
            }
            
            const readyPlayers = room.players.filter(player => player.isReady);
            console.log(`üë• –ì–æ—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏: ${readyPlayers.length}/${MIN_PLAYERS}`);
            if (readyPlayers.length < MIN_PLAYERS) {
                console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
                return res.status(400).json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤' });
            }
            
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
            initializeGame(room);
            
            if (isDbReady?.()) {
                await db.markRoomStatus(room.id, { status: 'playing', gameStarted: true });
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
                await forceSaveRoom(room.id);
                console.log(`üíæ –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã`);
            }
            
            console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
            res.json({ success: true, room: buildRoomResponse(room, userId) });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            res.status(400).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã' });
        }
    });
}

module.exports = registerRoomsModule;
// –°–æ–∑–¥–∞–µ–º ensureAuth —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
const createEnsureAuth = (authenticate) => {
    return (req, res, next) => {
        if (!authenticate) {
            return res.status(401).json({ success: false, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }
        if (!req.headers.authorization) {
            return res.status(401).json({ success: false, message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }
        return authenticate(req, res, next);
    };
};

module.exports.ensureAuth = createEnsureAuth;
