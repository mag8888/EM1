/**
 * Auth Module - –º–∏–∫—Ä–æ–º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è
 */

const jwt = require('jsonwebtoken');

function registerAuthModule({ app, db, jwtSecret, roomState }) {
    if (!app || !db || !jwtSecret) {
        throw new Error('Auth module requires app, db, and jwtSecret parameters');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏
    const { addUserToMemory, getUserFromMemory, getUserByEmailFromMemory, updateUserInMemory } = roomState || {};

    // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
    function authenticateToken(req, res, next) {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];

        if (!token) {
            return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
        }

        try {
            const payload = jwt.verify(token, jwtSecret);
            req.user = payload;
            return next();
        } catch (error) {
            console.error('JWT verification failed:', error.message, 'Token:', token.substring(0, 20) + '...');
            if (error.name === 'JsonWebTokenError') {
                return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
            } else if (error.name === 'TokenExpiredError') {
                return res.status(403).json({ message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' });
            } else {
                return res.status(403).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' });
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function sanitizeUser(user) {
        if (!user) {
            return null;
        }
        const plain = typeof user.toObject === 'function' ? user.toObject() : user;
        return {
            id: plain._id ? plain._id.toString() : plain.id,
            telegram_id: plain.telegram_id || null,
            username: plain.username || '',
            first_name: plain.first_name || '',
            last_name: plain.last_name || '',
            email: plain.email || '',
            balance: plain.balance ?? 0,
            level: plain.level ?? 1,
            experience: plain.experience ?? 0,
            games_played: plain.games_played ?? 0,
            wins_count: plain.wins_count ?? 0,
            referrals_count: plain.referrals_count ?? 0,
            referral_code: plain.referral_code || null,
            referral_earnings: plain.referral_earnings ?? 0,
            is_active: plain.is_active ?? true,
            created_at: plain.created_at,
            updated_at: plain.updated_at
        };
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.post('/api/auth/register', async (req, res) => {
        const { email, password, first_name, last_name, referral_code } = req.body || {};
        
        if (!email || !password) {
            return res.status(400).json({ message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await db.getUserByEmail(email);
            if (existingUser) {
                return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = await db.createUser({
                email,
                password,
                first_name: first_name || '',
                last_name: last_name || '',
                balance: 10000,
                level: 1,
                experience: 0,
                games_played: 0,
                wins_count: 0,
                referrals_count: 0,
                referral_earnings: 0,
                is_active: true
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
            if (addUserToMemory) {
                addUserToMemory(newUser);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                { userId: newUser.id, email: newUser.email }, 
                jwtSecret, 
                { expiresIn: '24h' }
            );

            res.status(201).json({
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                token,
                expiresIn: '24h',
                user: sanitizeUser(newUser)
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.post('/api/auth/login', async (req, res) => {
        const { email, password, rememberMe } = req.body || {};
        
        if (!email || !password) {
            return res.status(400).json({ message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        try {
            console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è email: ${email}`);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ –ø–æ email
            let user = getUserByEmailFromMemory ? getUserByEmailFromMemory(email) : null;
            console.log(`üîç –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏: ${user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (!user) {
                console.log('üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                user = await db.getUserByEmail(email);
                if (user && addUserToMemory) {
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å');
                    addUserToMemory(user);
                }
            }
            
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø–∞–º—è—Ç–∏, –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.email} (ID: ${user.id})`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if (user.password !== password) {
                return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
            if (!user.is_active) {
                return res.status(401).json({ message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                { userId: user.id, email: user.email }, 
                jwtSecret, 
                { expiresIn: '24h' }
            );

            res.json({
                message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                token,
                expiresIn: '24h',
                user: sanitizeUser(user)
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.get('/api/user/profile', authenticateToken, async (req, res) => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
            let user = getUserFromMemory ? getUserFromMemory(req.user.userId) : null;
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (!user) {
                user = await db.getUserById(req.user.userId);
                if (user && addUserToMemory) {
                    addUserToMemory(user);
                }
            }
            
            if (!user) {
                return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            res.json(sanitizeUser(user));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.get('/api/user/stats', authenticateToken, async (req, res) => {
        try {
            const user = await db.getUserById(req.user.userId);
            if (!user) {
                return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            res.json({
                games_played: user.games_played || 0,
                wins_count: user.wins_count || 0,
                level: user.level || 1,
                experience: user.experience || 0,
                balance: user.balance || 0
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.put('/api/user/profile', authenticateToken, async (req, res) => {
        try {
            const { first_name, last_name, username } = req.body || {};
            const userId = req.user.userId;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await db.updateUser(userId, {
                first_name: first_name || '',
                last_name: last_name || '',
                username: username || ''
            });

            if (!updatedUser) {
                return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
            if (updateUserInMemory) {
                updateUserInMemory(userId, updatedUser);
            }

            res.json({
                message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
                user: sanitizeUser(updatedUser)
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ JWT stateless)
    app.post('/api/auth/logout', authenticateToken, (req, res) => {
        res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥' });
    });

    return { sanitizeUser, authenticateToken };
}

module.exports = registerAuthModule;